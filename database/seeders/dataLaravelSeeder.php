<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class dataLaravelSeeder extends Seeder
{
    public $questions_laravel = [];
    public $essays_laravel = [];
    public function __construct()
    {
        $this->questions_laravel =
            [
                [
                    'question' => 'Laravel là một framework PHP dùng để xây dựng ứng dụng gì?',
                    'option_1' => 'Web',
                    'option_2' => 'Desktop',
                    'option_3' => 'Mobile',
                    'option_4' => 'Game',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::get(\'/welcome\', function () {\n    return view(\'welcome\');\n});\n```',
                    'option_1' => 'Trả về view "welcome"',
                    'option_2' => 'Trả về thông báo lỗi',
                    'option_3' => 'Trả về trang 404',
                    'option_4' => 'Trả về trang chủ',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nSchema::create(\'users\', function (Blueprint $table) {\n    $table->id();\n    $table->string(\'name\');\n    $table->timestamps();\n});\n```',
                    'option_1' => 'Tạo bảng "users" với các cột id, name và timestamps',
                    'option_2' => 'Tạo bảng "users" với các cột id, name và created_at',
                    'option_3' => 'Tạo bảng "users" với các cột id, name và updated_at',
                    'option_4' => 'Tạo bảng "users" với cột id duy nhất',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel hỗ trợ các loại database nào?',
                    'option_1' => 'MySQL, PostgreSQL, SQLite, SQL Server',
                    'option_2' => 'MongoDB, Redis, Firebase',
                    'option_3' => 'Oracle, SQLite, Redis',
                    'option_4' => 'PostgreSQL, SQLite, Firebase',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau dùng để làm gì?\n\n```php\nRoute::resource(\'posts\', PostController::class);\n```',
                    'option_1' => 'Tạo các route resource cho controller PostController',
                    'option_2' => 'Tạo route cho các hành động của PostController',
                    'option_3' => 'Tạo route cho các view của PostController',
                    'option_4' => 'Tạo route cho các model của PostController',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    return User::find($id);\n}\n```',
                    'option_1' => 'Trả về đối tượng User có id tương ứng',
                    'option_2' => 'Trả về thông báo lỗi',
                    'option_3' => 'Trả về danh sách tất cả User',
                    'option_4' => 'Trả về id của User',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::get(\'/user/{id}\', [UserController::class, \'show\']);\n```',
                    'option_1' => 'Tạo route GET với tham số id để gọi phương thức show của UserController',
                    'option_2' => 'Tạo route GET với tham số id để gọi phương thức index của UserController',
                    'option_3' => 'Tạo route POST với tham số id để gọi phương thức show của UserController',
                    'option_4' => 'Tạo route GET mà không có tham số',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $validated = $request->validate([\n        \'name\' => \'required\',\n    ]);\n    // code to store validated data\n}\n```',
                    'option_1' => 'Xác thực dữ liệu yêu cầu và lưu trữ dữ liệu hợp lệ',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không lưu trữ',
                    'option_3' => 'Lưu trữ dữ liệu mà không xác thực',
                    'option_4' => 'Trả về lỗi xác thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng gì để quản lý dependency và autoload?',
                    'option_1' => 'Composer',
                    'option_2' => 'NPM',
                    'option_3' => 'Yarn',
                    'option_4' => 'Bower',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nCache::put(\'key\', \'value\', now()->addMinutes(10));\n```',
                    'option_1' => 'Lưu trữ giá trị "value" với key "key" và thời gian hết hạn là 10 phút',
                    'option_2' => 'Lưu trữ giá trị "value" với key "key" và thời gian hết hạn là 1 giờ',
                    'option_3' => 'Lưu trữ giá trị "key" với key "value" và thời gian hết hạn là 10 phút',
                    'option_4' => 'Xóa cache với key "key"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::latest()->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết mới nhất theo thứ tự giảm dần',
                    'option_2' => 'Lấy danh sách các bài viết cũ nhất theo thứ tự tăng dần',
                    'option_3' => 'Lấy danh sách các bài viết theo thứ tự ngẫu nhiên',
                    'option_4' => 'Lấy một bài viết mới nhất',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function index()\n{\n    return view(\'posts.index\', [\'posts\' => Post::all()]);\n}\n```',
                    'option_1' => 'Trả về view "posts.index" với dữ liệu các bài viết',
                    'option_2' => 'Trả về view "posts.index" mà không có dữ liệu',
                    'option_3' => 'Trả về tất cả các bài viết dưới dạng JSON',
                    'option_4' => 'Trả về danh sách các bài viết dưới dạng mảng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    Post::find($id)->delete();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xóa bài viết với id tương ứng và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xóa bài viết mà không chuyển hướng',
                    'option_3' => 'Chỉ chuyển hướng mà không xóa bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    return User::findOrFail($id);\n}\n```',
                    'option_1' => 'Trả về đối tượng User với id tương ứng hoặc lỗi 404 nếu không tìm thấy',
                    'option_2' => 'Trả về đối tượng User với id tương ứng hoặc null nếu không tìm thấy',
                    'option_3' => 'Trả về danh sách tất cả User',
                    'option_4' => 'Trả về id của User',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$validator = Validator::make($data, [\n    \'email\' => \'required|email\',\n    \'password\' => \'required|min:6\',\n]);\n```',
                    'option_1' => 'Tạo một validator với các quy tắc xác thực email và password',
                    'option_2' => 'Tạo một validator chỉ với quy tắc xác thực email',
                    'option_3' => 'Tạo một validator chỉ với quy tắc xác thực password',
                    'option_4' => 'Trả về lỗi xác thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function edit($id)\n{\n    $post = Post::find($id);\n    return view(\'posts.edit\', compact(\'post\'));\n}\n```',
                    'option_1' => 'Trả về view "posts.edit" với dữ liệu bài viết để chỉnh sửa',
                    'option_2' => 'Trả về view "posts.edit" mà không có dữ liệu bài viết',
                    'option_3' => 'Trả về tất cả các bài viết để chỉnh sửa',
                    'option_4' => 'Trả về dữ liệu bài viết dưới dạng JSON',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nDB::table(\'users\')->where(\'name\', \'John\')->get();\n```',
                    'option_1' => 'Lấy tất cả người dùng có tên là "John"',
                    'option_2' => 'Lấy người dùng đầu tiên có tên là "John"',
                    'option_3' => 'Lấy người dùng có id là "John"',
                    'option_4' => 'Lấy tất cả người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function create()\n{\n    return view(\'posts.create\');\n}\n```',
                    'option_1' => 'Trả về view "posts.create" để tạo bài viết mới',
                    'option_2' => 'Trả về view "posts.index" để xem danh sách bài viết',
                    'option_3' => 'Trả về view "posts.show" để xem chi tiết bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::post(\'/user\', [UserController::class, \'store\']);\n```',
                    'option_1' => 'Tạo route POST để gọi phương thức store của UserController',
                    'option_2' => 'Tạo route GET để gọi phương thức store của UserController',
                    'option_3' => 'Tạo route POST mà không có phương thức',
                    'option_4' => 'Tạo route GET để gọi phương thức index của UserController',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function update(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update($request->all());\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Cập nhật bài viết với id tương ứng và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Cập nhật bài viết và trả về view "posts.index"',
                    'option_3' => 'Chỉ cập nhật bài viết mà không chuyển hướng',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không cập nhật',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    Post::destroy($id);\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xóa bài viết với id tương ứng và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xóa bài viết mà không chuyển hướng',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không xóa bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel cung cấp công cụ gì để thực hiện migration?',
                    'option_1' => 'Artisan',
                    'option_2' => 'Composer',
                    'option_3' => 'NPM',
                    'option_4' => 'Yarn',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::orderBy(\'created_at\', \'desc\')->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết sắp xếp theo ngày tạo giảm dần',
                    'option_2' => 'Lấy danh sách các bài viết sắp xếp theo ngày tạo tăng dần',
                    'option_3' => 'Lấy danh sách các bài viết theo thứ tự ngẫu nhiên',
                    'option_4' => 'Lấy bài viết mới nhất',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng công cụ nào để quản lý session?',
                    'option_1' => 'Session Manager',
                    'option_2' => 'Cache Manager',
                    'option_3' => 'Queue Manager',
                    'option_4' => 'Database Manager',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nAuth::attempt([\'email\' => $email, \'password\' => $password]);\n```',
                    'option_1' => 'Thực hiện xác thực người dùng với email và password',
                    'option_2' => 'Đăng ký người dùng mới',
                    'option_3' => 'Thay đổi mật khẩu người dùng',
                    'option_4' => 'Cập nhật thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show(User $user)\n{\n    return $user->name;\n}\n```',
                    'option_1' => 'Trả về tên của người dùng với đối tượng User được truyền vào',
                    'option_2' => 'Trả về email của người dùng với đối tượng User được truyền vào',
                    'option_3' => 'Trả về danh sách tất cả người dùng',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function profile()\n{\n    return view(\'profile\');\n}\n```',
                    'option_1' => 'Trả về view "profile"',
                    'option_2' => 'Trả về view "home"',
                    'option_3' => 'Trả về một đối tượng',
                    'option_4' => 'Trả về một mảng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel hỗ trợ các loại middleware nào?',
                    'option_1' => 'Authentication, CSRF Protection, Logging',
                    'option_2' => 'Validation, Caching, Routing',
                    'option_3' => 'Session, Database, File Storage',
                    'option_4' => 'Queue, Notification, Email',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nreturn response ()->json([\'message\' => \'Success\'], 200);\n```',
                    'option_1' => 'Trả về phản hồi JSON với thông điệp "Success" và mã trạng thái 200',
                    'option_2' => 'Trả về phản hồi JSON với thông điệp "Error" và mã trạng thái 404',
                    'option_3' => 'Trả về phản hồi HTML với thông điệp "Success" và mã trạng thái 200',
                    'option_4' => 'Trả về phản hồi JSON với thông điệp "Success" và mã trạng thái 500',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function validate(Request $request)\n{\n    $request->validate([\n        \'email\' => \'required|email\',\n    ]);\n    return "Valid";\n}\n```',
                    'option_1' => 'Xác thực dữ liệu email và trả về "Valid" nếu dữ liệu hợp lệ',
                    'option_2' => 'Chỉ xác thực dữ liệu email mà không trả về thông báo',
                    'option_3' => 'Trả về thông báo lỗi nếu dữ liệu không hợp lệ',
                    'option_4' => 'Trả về "Invalid" nếu dữ liệu không hợp lệ',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::where(\'status\', \'published\')->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết có trạng thái "published"',
                    'option_2' => 'Lấy danh sách các bài viết có trạng thái "draft"',
                    'option_3' => 'Lấy danh sách tất cả các bài viết',
                    'option_4' => 'Lấy bài viết với id là "published"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$post = Post::findOrFail($id);\nreturn view(\'posts.show\', compact(\'post\'));\n```',
                    'option_1' => 'Tìm bài viết với id tương ứng hoặc trả về lỗi 404 và trả về view "posts.show" với dữ liệu bài viết',
                    'option_2' => 'Tìm bài viết với id tương ứng và trả về view "posts.show" mà không có dữ liệu bài viết',
                    'option_3' => 'Tìm tất cả bài viết và trả về view "posts.show"',
                    'option_4' => 'Trả về thông báo lỗi nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nDB::table(\'users\')->whereIn(\'role\', [\'admin\', \'editor\'])->get();\n```',
                    'option_1' => 'Lấy tất cả người dùng với vai trò "admin" hoặc "editor"',
                    'option_2' => 'Lấy người dùng với vai trò "admin" hoặc "editor" và sắp xếp theo tên',
                    'option_3' => 'Lấy người dùng với vai trò "admin" và "editor" dưới dạng JSON',
                    'option_4' => 'Lấy tất cả người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $post = new Post();\n    $post->title = $request->title;\n    $post->save();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Tạo bài viết mới với tiêu đề được truyền vào và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ lưu tiêu đề bài viết mà không tạo mới bài viết',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel cung cấp gì để thực hiện validation?',
                    'option_1' => 'Validator',
                    'option_2' => 'Request',
                    'option_3' => 'Middleware',
                    'option_4' => 'Controller',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    Post::findOrFail($id)->delete();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xóa bài viết với id tương ứng hoặc trả về lỗi 404 và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xóa bài viết mà không chuyển hướng',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không xóa bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::get(\'/home\', [HomeController::class, \'index\'])->name(\'home\');\n```',
                    'option_1' => 'Tạo route GET với phương thức index của HomeController và đặt tên route là "home"',
                    'option_2' => 'Tạo route POST với phương thức index của HomeController và đặt tên route là "home"',
                    'option_3' => 'Tạo route GET với phương thức show của HomeController và đặt tên route là "home"',
                    'option_4' => 'Tạo route GET mà không có tên',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc tạo factory cho mô hình không?',
                    'option_1' => 'Có, thông qua Artisan command',
                    'option_2' => 'Không, chỉ hỗ trợ thông qua seeder',
                    'option_3' => 'Có, nhưng cần cài đặt thêm package',
                    'option_4' => 'Không, cần viết mã thủ công',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    $post = Post::find($id);\n    return view(\'posts.show\')->with(\'post\', $post);\n}\n```',
                    'option_1' => 'Trả về view "posts.show" với dữ liệu bài viết',
                    'option_2' => 'Trả về view "posts.index" với dữ liệu bài viết',
                    'option_3' => 'Trả về danh sách tất cả bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::put(\'/posts/{id}\', [PostController::class, \'update\']);\n```',
                    'option_1' => 'Tạo route PUT để gọi phương thức update của PostController',
                    'option_2' => 'Tạo route GET để gọi phương thức update của PostController',
                    'option_3' => 'Tạo route POST để gọi phương thức update của PostController',
                    'option_4' => 'Tạo route PUT mà không có phương thức',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng gì để định nghĩa các route?',
                    'option_1' => 'Route file',
                    'option_2' => 'Controller file',
                    'option_3' => 'Model file',
                    'option_4' => 'Middleware file',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $post = Post::create($request->all());\n    return redirect()->route(\'posts.index\');\n        }\n```',
                    'option_1' => 'Tạo bài viết mới với tất cả các trường dữ liệu từ request và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ lưu các trường dữ liệu từ request mà không tạo bài viết mới',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel hỗ trợ các phương thức nào để làm việc với database?',
                    'option_1' => 'Query Builder, Eloquent ORM, Migrations',
                    'option_2' => 'Query Builder, File Storage, Sessions',
                    'option_3' => 'Migrations, Mail, Notifications',
                    'option_4' => 'Queue, Events, Broadcasting',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function update(Request $request, $id)\n{\n    $post = Post::findOrFail($id);\n    $post->update($request->all());\n    return response()->json($post, 200);\n}\n```',
                    'option_1' => 'Cập nhật bài viết với ID tương ứng và trả về dữ liệu bài viết dưới dạng JSON với mã trạng thái 200',
                    'option_2' => 'Cập nhật bài viết với ID tương ứng và trả về mã trạng thái 200 mà không có dữ liệu bài viết',
                    'option_3' => 'Chỉ cập nhật bài viết mà không trả về JSON',
                    'option_4' => 'Trả về lỗi nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $validatedData = $request->validate([\n        \'title\' => \'required|unique:posts|max:255\',\n    ]);\n    $post = Post::create($validatedData);\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xác thực dữ liệu bài viết và tạo mới bài viết nếu dữ liệu hợp lệ, sau đó chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không tạo bài viết mới',
                    'option_3' => 'Tạo bài viết mới mà không kiểm tra dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không lưu dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function index()\n{\n    $posts = Post::where(\'status\', \'published\')->orderBy(\'created_at\', \'desc\')->paginate(10);\n    return view(\'posts.index\', compact(\'posts\'));\n}\n```',
                    'option_1' => 'Lấy danh sách các bài viết có trạng thái "published", sắp xếp theo ngày tạo mới nhất trước và phân trang với 10 bài viết mỗi trang',
                    'option_2' => 'Lấy tất cả bài viết và sắp xếp theo ngày tạo mới nhất trước',
                    'option_3' => 'Lấy danh sách các bài viết có trạng thái "draft" và phân trang',
                    'option_4' => 'Trả về tất cả bài viết không phân trang',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::resource(\'posts\', PostController::class);\n```',
                    'option_1' => 'Tạo tất cả các route RESTful cho resource "posts" với PostController',
                    'option_2' => 'Tạo route GET cho resource "posts" với PostController',
                    'option_3' => 'Tạo route POST cho resource "posts" với PostController',
                    'option_4' => 'Tạo route PUT cho resource "posts" với PostController',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$users = User::withCount(\'posts\')->having(\'posts_count\', \'>\', 5)->get();\n```',
                    'option_1' => 'Lấy tất cả người dùng có số lượng bài viết lớn hơn 5',
                    'option_2' => 'Lấy tất cả người dùng và đếm số lượng bài viết của họ',
                    'option_3' => 'Lấy tất cả bài viết và đếm số lượng người dùng liên quan',
                    'option_4' => 'Lấy tất cả bài viết có số lượng người dùng lớn hơn 5',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function handle()\n{\n    $user = User::find(1);\n    $user->posts()->create([\'title\' => \'New Post\']);\n}\n```',
                    'option_1' => 'Tạo một bài viết mới với tiêu đề "New Post" cho người dùng có ID 1',
                    'option_2' => 'Tạo một người dùng mới với tiêu đề bài viết "New Post"',
                    'option_3' => 'Cập nhật tiêu đề bài viết của người dùng có ID 1',
                    'option_4' => 'Xóa bài viết của người dùng có ID 1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function search(Request $request)\n{\n    $query = $request->input(\'query\');\n    $posts = Post::where(\'title\', \'like\', "%$query%")->get();\n    return view(\'posts.search\', compact(\'posts\'));\n}\n```',
                    'option_1' => 'Tìm các bài viết có tiêu đề chứa chuỗi tìm kiếm và trả về view "posts.search" với kết quả tìm kiếm',
                    'option_2' => 'Tìm tất cả bài viết và trả về view "posts.search"',
                    'option_3' => 'Tìm bài viết theo ID và trả về view "posts.search"',
                    'option_4' => 'Tìm bài viết theo trạng thái và trả về view "posts.search"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show(Post $post)\n{\n    return view(\'posts.show\', compact(\'post\'));\n}\n```',
                    'option_1' => 'Trả về view "posts.show" với dữ liệu bài viết, sử dụng implicit model binding',
                    'option_2' => 'Trả về view "posts.index" với dữ liệu bài viết',
                    'option_3' => 'Tìm bài viết theo ID và trả về view "posts.show"',
                    'option_4' => 'Trả về thông báo lỗi nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng gì để xử lý yêu cầu HTTP từ client?',
                    'option_1' => 'Middleware',
                    'option_2' => 'Route',
                    'option_3' => 'Controller',
                    'option_4' => 'Model',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::select(\'title\', DB::raw(\'LENGTH(title) as title_length\'))->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết với tiêu đề và độ dài tiêu đề',
                    'option_2' => 'Lấy tất cả các bài viết và độ dài tiêu đề mặc định',
                    'option_3' => 'Lấy danh sách các bài viết với tiêu đề và số lượng bài viết',
                    'option_4' => 'Lấy tất cả bài viết với tiêu đề và số lượng từ trường "title"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostsByUser($userId)\n{\n    return Post::where(\'user_id\', $userId)->pluck(\'title\');\n}\n```',
                    'option_1' => 'Lấy danh sách tiêu đề bài viết của người dùng có ID tương ứng',
                    'option_2' => 'Lấy danh sách các bài viết với ID người dùng tương ứng',
                    'option_3' => 'Lấy danh sách người dùng có bài viết',
                    'option_4' => 'Lấy tất cả các bài viết không phân loại',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::withTrashed()->get();\n```',
                    'option_1' => 'Lấy tất cả các bài viết, bao gồm cả những bài viết đã bị xóa mềm (soft deleted)',
                    'option_2' => 'Lấy tất cả các bài viết chưa bị xóa',
                    'option_3' => 'Lấy danh sách bài viết đã bị xóa vĩnh viễn',
                    'option_4' => 'Lấy tất cả các bài viết không bao gồm những bài viết đã bị xóa mềm',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function removePost($id)\n{\n    Post::destroy($id);\n    return redirect()->back();\n}\n```',
                    'option_1' => 'Xóa bài viết với ID tương ứng và chuyển hướng trở lại trang trước đó',
                    'option_2' => 'Xóa tất cả các bài viết và chuyển hướng trở lại trang trước đó',
                    'option_3' => 'Chỉ chuyển hướng trở lại trang trước đó mà không xóa bài viết',
                    'option_4' => 'Xóa bài viết và hiển thị thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePost(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update($request->only([\'title\', \'content\']));\n    return redirect()->route(\'posts.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật bài viết với ID tương ứng và chuyển hướng đến trang chi tiết bài viết',
                    'option_2' => 'Chỉ cập nhật bài viết mà không chuyển hướng',
                    'option_3' => 'Chuyển hướng đến trang chi tiết bài viết mà không cập nhật',
                    'option_4' => 'Cập nhật tất cả các bài viết và chuyển hướng đến trang chi tiết bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ các phương thức nào cho việc xử lý form request?',
                    'option_1' => 'Validation, Authorization, Filtering',
                    'option_2' => 'Validation, Transformation, Storage',
                    'option_3' => 'Authorization, Middleware, Transformation',
                    'option_4' => 'Validation, Authorization, Middleware',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPosts($userId)\n{\n    $user = User::find($userId);\n    return $user->posts()->withCount(\'comments\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết của người dùng với số lượng bình luận của mỗi bài viết',
                    'option_2' => 'Lấy tất cả bài viết của người dùng mà không tính số lượng bình luận',
                    'option_3' => 'Lấy tất cả người dùng và số lượng bình luận của họ',
                    'option_4' => 'Lấy tất cả bình luận của người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ gì cho việc gửi email?',
                    'option_1' => 'Mailable Classes, Mail Facade, Notification Channels',
                    'option_2' => 'Mailable Classes, Event Listeners, Queue Jobs',
                    'option_3' => 'Notification Channels, Mail Facade, Database Seeding',
                    'option_4' => 'Queue Jobs, Event Listeners, Database Seeding',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    $post = Post::findOrFail($id);\n    return response()->json($post, 200);\n}\n```',
                    'option_1' => 'Lấy bài viết với ID tương ứng và trả về dữ liệu bài viết dưới dạng JSON với mã trạng thái 200, nếu không tìm thấy thì trả về lỗi 404',
                    'option_2' => 'Lấy tất cả bài viết và trả về dữ liệu dưới dạng JSON',
                    'option_3' => 'Trả về dữ liệu bài viết không có mã trạng thái',
                    'option_4' => 'Trả về lỗi 404 nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function update(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update($request->all());\n    return $post;\n}\n```',
                    'option_1' => 'Cập nhật bài viết với ID tương ứng và trả về dữ liệu bài viết đã cập nhật',
                    'option_2' => 'Chỉ cập nhật bài viết mà không trả về dữ liệu',
                    'option_3' => 'Trả về dữ liệu bài viết cũ mà không cập nhật',
                    'option_4' => 'Chuyển hướng về trang khác sau khi cập nhật',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::group([\'middleware\' => [\'auth\']], function () {\n    Route::get(\'/profile\', [ProfileController::class, \'index\']);\n});\n```',
                    'option_1' => 'Tạo nhóm route yêu cầu middleware "auth" cho route "/profile" và liên kết với ProfileController',
                    'option_2' => 'Tạo route "/profile" mà không cần middleware',
                    'option_3' => 'Tạo nhóm route không cần xác thực và liên kết với ProfileController',
                    'option_4' => 'Tạo route "/profile" không yêu cầu xác thực và không có controller',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc xử lý các lỗi HTTP thông qua:',
                    'option_1' => 'Exception Handling',
                    'option_2' => 'Middleware',
                    'option_3' => 'Routing',
                    'option_4' => 'Controllers',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::whereDate(\'created_at\', \'>=\', now()->startOfMonth())->get();\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo từ đầu tháng hiện tại đến nay',
                    'option_2' => 'Lấy tất cả bài viết được tạo từ đầu năm đến nay',
                    'option_3' => 'Lấy tất cả bài viết được tạo trong tuần hiện tại',
                    'option_4' => 'Lấy tất cả bài viết được tạo trong ngày hôm nay',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getActivePosts()\n{\n    return Post::where(\'status\', \'active\')->latest()->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết có trạng thái "active", sắp xếp theo ngày tạo mới nhất trước',
                    'option_2' => 'Lấy tất cả các bài viết có trạng thái "inactive", sắp xếp theo ngày tạo mới nhất trước',
                    'option_3' => 'Lấy tất cả các bài viết với trạng thái mặc định, không sắp xếp',
                    'option_4' => 'Lấy các bài viết mới nhất mà không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$post = Post::find(1);\n$post->tags()->sync([1, 2, 3]);\n```',
                    'option_1' => 'Gán các tag với ID 1, 2, 3 cho bài viết có ID 1 và xóa các tag không còn liên kết',
                    'option_2' => 'Gán các tag với ID 1, 2, 3 cho bài viết có ID 1 mà không xóa tag cũ',
                    'option_3' => 'Xóa tất cả các tag của bài viết có ID 1',
                    'option_4' => 'Tạo mới các tag với ID 1, 2, 3 và gán cho bài viết có ID 1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentPosts($days)\n{\n    return Post::where(\'created_at\', \'>\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo trong số ngày đã cho tính từ hiện tại',
                    'option_2' => 'Lấy tất cả bài viết được tạo trong số ngày đã cho tính từ đầu tháng',
                    'option_3' => 'Lấy tất cả bài viết được tạo từ đầu năm đến hiện tại',
                    'option_4' => 'Lấy tất cả bài viết được tạo trong ngày hôm nay',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function scopePublished($query)\n{\n    return $query->where(\'status\', \'published\');\n}\n```',
                    'option_1' => 'Tạo một scope để lọc các bài viết có trạng thái "published"',
                    'option_2' => 'Tạo một scope để lọc các bài viết có trạng thái "draft"',
                    'option_3' => 'Tạo một scope để sắp xếp bài viết theo ngày tạo',
                    'option_4' => 'Tạo một scope để lấy tất cả các bài viết mà không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPostsCount($userId)\n{\n    return Post::where(\'user_id\', $userId)->count();\n}\n```',
                    'option_1' => 'Đếm số lượng bài viết của người dùng có ID tương ứng',
                    'option_2' => 'Đếm tất cả các bài viết không phân loại người dùng',
                    'option_3' => 'Đếm số lượng người dùng có bài viết',
                    'option_4' => 'Đếm số lượng bài viết và số lượng người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $validatedData = $request->validate([\n        \'title\' => \'required|unique:posts\',\n    ]);\n    Post::create($validatedData);\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xác thực dữ liệu bài viết và lưu bài viết mới nếu dữ liệu hợp lệ, sau đó chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không lưu bài viết mới',
                    'option_3' => 'Lưu bài viết mới mà không xác thực dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostComments($postId)\n{\n    $post = Post::findOrFail($postId);\n    return $post->comments;\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết có bình luận',
                    'option_3' => 'Lấy tất cả bình luận của tất cả bài viết',
                    'option_4' => 'Lấy tất cả bài viết mà không có bình luận',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function removeUser($id)\n{\n    User::find($id)->delete();\n}\n```',
                    'option_1' => 'Xóa người dùng với ID tương ứng',
                    'option_2' => 'Chỉ tìm người dùng với ID tương ứng mà không xóa',
                    'option_3' => 'Xóa tất cả người dùng mà không phân loại ID',
                    'option_4' => 'Chỉ xóa người dùng mà không cập nhật dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc xác thực người dùng qua:',
                    'option_1' => 'Guards, Providers, Middleware',
                    'option_2' => 'Middleware, Guards, Policies',
                    'option_3' => 'Providers, Policies, Middleware',
                    'option_4' => 'Guards, Middleware, Controllers',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePostTitle($id, $title)\n{\n    $post = Post::find($id);\n    $post->title = $title;\n    $post->save();\n}\n```',
                    'option_1' => 'Cập nhật tiêu đề của bài viết với ID tương ứng và lưu thay đổi',
                    'option_2' => 'Chỉ lưu tiêu đề mới mà không cập nhật bài viết',
                    'option_3' => 'Chỉ cập nhật bài viết mà không thay đổi tiêu đề',
                    'option_4' => 'Cập nhật tiêu đề của tất cả bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPublishedPosts()\n{\n    return Post::published()->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết có trạng thái "published" bằng cách sử dụng scope',
                    'option_2' => 'Lấy tất cả các bài viết có trạng thái mặc định',
                    'option_3' => 'Lấy tất cả bài viết không phân loại trạng thái',
                    'option_4' => 'Lấy tất cả các bài viết có trạng thái "draft"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function scopeRecent($query)\n{\n    return $query->whereDate(\'created_at\', \'>=\', now()->subMonth());\n}\n```',
                    'option_1' => 'Tạo một scope để lọc các bài viết được tạo trong tháng qua',
                    'option_2' => 'Tạo một scope để lọc các bài viết được tạo trong tuần qua',
                    'option_3' => 'Tạo một scope để lọc các bài viết được tạo trong năm qua',
                    'option_4' => 'Tạo một scope để lọc tất cả các bài viết không phân loại thời gian',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePostContent(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update([\'content\' => $request->input(\'content\')]);\n    return $post;\n}\n```',
                    'option_1' => 'Cập nhật nội dung của bài viết với ID tương ứng và trả về dữ liệu bài viết đã cập nhật',
                    'option_2' => 'Chỉ cập nhật nội dung của bài viết mà không trả về dữ liệu',
                    'option_3' => 'Trả về nội dung bài viết mà không cập nhật',
                    'option_4' => 'Cập nhật nội dung của tất cả bài viết và trả về dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostById($id)\n{\n    return Post::findOrFail($id);\n}\n```',
                    'option_1' => 'Tìm bài viết với ID tương ứng và trả về, nếu không tìm thấy thì trả về lỗi 404',
                    'option_2' => 'Tìm tất cả bài viết và trả về dữ liệu',
                    'option_3' => 'Tìm bài viết với ID tương ứng mà không kiểm tra lỗi',
                    'option_4' => 'Tìm tất cả bài viết có ID tương ứng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getAllPosts()\n{\n    return Post::all();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết từ cơ sở dữ liệu',
                    'option_2' => 'Lấy bài viết mới nhất',
                    'option_3' => 'Lấy tất cả bài viết được phân loại theo trạng thái',
                    'option_4' => 'Lấy tất cả bài viết với trạng thái "published"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc sử dụng các API qua:',
                    'option_1' => 'HTTP Client, HTTP Requests, API Resources',
                    'option_2' => 'HTTP Requests, WebSockets, API Resources',
                    'option_3' => 'HTTP Client, WebSockets, Database Transactions',
                    'option_4' => 'Database Transactions, WebSockets, API Resources',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserWithPosts($userId)\n{\n    return User::with(\'posts\')->findOrFail($userId);\n}\n```',
                    'option_1' => 'Lấy người dùng với ID tương ứng và tất cả bài viết của người dùng đó',
                    'option_2' => 'Lấy người dùng với ID tương ứng mà không có bài viết',
                    'option_3' => 'Lấy tất cả người dùng và bài viết của họ',
                    'option_4' => 'Lấy người dùng với ID tương ứng và các bình luận của người dùng đó',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getAllPostsByStatus($status)\n{\n    return Post::where(\'status\', $status)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết với trạng thái tương ứng',
                    'option_2' => 'Lấy tất cả bài viết mà không phân loại trạng thái',
                    'option_3' => 'Lấy tất cả bài viết với trạng thái mặc định',
                    'option_4' => 'Lấy tất cả bài viết và phân loại theo trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPublishedPostsCount()\n{\n    return Post::where(\'status\', \'published\')->count();\n}\n```',
                    'option_1' => 'Đếm số lượng bài viết có trạng thái "published"',
                    'option_2' => 'Đếm tất cả bài viết không phân loại trạng thái',
                    'option_3' => 'Đếm số lượng người dùng có bài viết',
                    'option_4' => 'Đếm số lượng bài viết và số lượng người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostsByDateRange($startDate, $endDate)\n{\n    return Post::whereBetween(\'created_at\', [$startDate, $endDate])->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo trong khoảng thời gian đã cho',
                    'option_2' => 'Lấy tất cả bài viết được tạo từ đầu tháng đến hiện tại',
                    'option_3' => 'Lấy tất cả bài viết được tạo trong tuần hiện tại',
                    'option_4' => 'Lấy tất cả bài viết được tạo trong ngày hôm nay',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::middleware([\'auth\', \'verified\'])->group(function () {\n    Route::get(\'/dashboard\', [DashboardController::class, \'index\'])->name(\'dashboard\');\n});\n```',
                    'option_1' => 'Chỉ những người dùng đã xác thực và xác minh email mới có thể truy cập vào trang dashboard',
                    'option_2' => 'Tất cả người dùng đều có thể truy cập vào trang dashboard',
                    'option_3' => 'Chỉ những người dùng chưa xác thực mới có thể truy cập vào trang dashboard',
                    'option_4' => 'Người dùng phải xác thực nhưng không cần xác minh email để truy cập vào trang dashboard',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function handle($request, Closure $next)\n{\n    if (!$request->user() || !$request->user()->isAdmin()) {\n        return redirect(\'/home\');\n    }\n    return $next($request);\n}\n```',
                    'option_1' => 'Chỉ những người dùng là admin mới có thể tiếp tục, những người khác sẽ bị chuyển hướng đến trang home',
                    'option_2' => 'Tất cả người dùng đều có thể tiếp tục mà không cần kiểm tra quyền admin',
                    'option_3' => 'Người dùng không phải là admin sẽ được tiếp tục mà không bị chuyển hướng',
                    'option_4' => 'Chỉ những người dùng chưa đăng nhập mới bị chuyển hướng đến trang home',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nuse Illuminate\Support\Facades\DB;\n\nDB::transaction(function () {\n    DB::table(\'users\')->update([\'status\' => \'inactive\']);\n    DB::table(\'posts\')->update([\'status\' => \'archived\']);\n});\n```',
                    'option_1' => 'Cả hai thao tác cập nhật dữ liệu sẽ được thực hiện trong cùng một giao dịch, đảm bảo tính toàn vẹn của dữ liệu',
                    'option_2' => 'Cả hai thao tác cập nhật dữ liệu sẽ được thực hiện độc lập mà không có giao dịch',
                    'option_3' => 'Chỉ thao tác đầu tiên được thực hiện và thao tác thứ hai sẽ bị bỏ qua',
                    'option_4' => 'Giao dịch sẽ không được thực hiện và sẽ gặp lỗi khi chạy mã',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    protected $fillable = [\'name\', \'email\', \'password\'];\n\n    protected $hidden = [\'password\', \'remember_token\'];\n}\n```',
                    'option_1' => 'Các thuộc tính password và remember_token sẽ bị ẩn khi xuất dữ liệu người dùng',
                    'option_2' => 'Các thuộc tính name và email sẽ bị ẩn khi xuất dữ liệu người dùng',
                    'option_3' => 'Các thuộc tính name và email sẽ được làm đầy tự động khi tạo người dùng mới',
                    'option_4' => 'Các thuộc tính password và remember_token sẽ không được lưu vào cơ sở dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass UserController extends Controller\n{\n    public function store(Request $request)\n    {\n        $validatedData = $request->validate([\n            \'name\' => \'required|string|max:255\',\n            \'email\' => \'required|email|unique:users\',\n            \'password\' => \'required|string|min:8|confirmed\',\n        ]);\n        User::create([\n            \'name\' => $validatedData[\'name\'],\n            \'email\' => $validatedData[\'email\'],\n            \'password\' => Hash::make($validatedData[\'password\']),\n        ]);\n        return redirect()->route(\'users.index\');\n    }\n}\n```',
                    'option_1' => 'Xác thực và tạo một người dùng mới, sau đó chuyển hướng về trang danh sách người dùng',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không tạo người dùng mới',
                    'option_3' => 'Tạo người dùng mới mà không xác thực dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách người dùng mà không tạo người dùng mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    protected $fillable = [\'title\', \'content\', \'user_id\'];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n```',
                    'option_1' => 'Mô hình Post có một mối quan hệ "nhiều đến một" với mô hình User',
                    'option_2' => 'Mô hình Post có một mối quan hệ "một đến nhiều" với mô hình User',
                    'option_3' => 'Mô hình Post có một mối quan hệ "nhiều đến nhiều" với mô hình User',
                    'option_4' => 'Mô hình Post không có mối quan hệ với mô hình User',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass OrderController extends Controller\n{\n    public function show($id)\n    {\n        $order = Order::findOrFail($id);\n        return view(\'orders.show\', compact(\'order\')); \n    }\n}\n```',
                    'option_1' => 'Lấy đơn hàng với ID tương ứng và trả về view với dữ liệu đơn hàng',
                    'option_2' => 'Tạo một đơn hàng mới mà không kiểm tra ID',
                    'option_3' => 'Cập nhật thông tin của đơn hàng và trả về view',
                    'option_4' => 'Xóa đơn hàng với ID tương ứng và không trả về view',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass EventServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n        Event::listen(\n            UserRegistered::class,\n            [SendWelcomeEmail::class, \'handle\']\n        );\n    }\n}\n```',
                    'option_1' => 'Khi sự kiện UserRegistered xảy ra, lớp SendWelcomeEmail sẽ được gọi để xử lý sự kiện',
                    'option_2' => 'Khi sự kiện UserRegistered xảy ra, lớp SendWelcomeEmail sẽ được khởi tạo nhưng không xử lý',
                    'option_3' => 'Sự kiện UserRegistered sẽ không được xử lý và không có phản hồi',
                    'option_4' => 'Khi sự kiện UserRegistered xảy ra, không có hành động nào được thực hiện',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function showUserPosts($userId)\n{\n    $user = User::with(\'posts\')->find($userId);\n    return $user->posts;\n}\n```',
                    'option_1' => 'Lấy người dùng với ID tương ứng và tất cả bài viết của người dùng đó',
                    'option_2' => 'Lấy tất cả người dùng và bài viết của họ',
                    'option_3' => 'Lấy tất cả bài viết và người dùng của bài viết đó',
                    'option_4' => 'Lấy người dùng với ID tương ứng mà không có bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPopularPosts($limit)\n{\n    return Post::orderBy(\'views\', \'desc\')->take($limit)->get();\n}\n```',
                    'option_1' => 'Lấy các bài viết phổ biến nhất dựa trên số lượt xem, giới hạn số lượng theo biến $limit',
                    'option_2' => 'Lấy tất cả bài viết và sắp xếp theo số lượt xem',
                    'option_3' => 'Lấy các bài viết ít phổ biến nhất dựa trên số lượt xem',
                    'option_4' => 'Lấy các bài viết mới nhất theo số lượt xem',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentComments($days)\n{\n    return Comment::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bình luận được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả bình luận của ngày hiện tại',
                    'option_3' => 'Lấy tất cả bình luận của tuần hiện tại',
                    'option_4' => 'Lấy bình luận gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    protected $casts = [\'created_at\' => \'datetime:d-m-Y\'];\n}\n```',
                    'option_1' => 'Cột created_at sẽ được chuyển đổi thành định dạng ngày-tháng-năm khi truy xuất dữ liệu',
                    'option_2' => 'Cột created_at sẽ được chuyển đổi thành định dạng năm-tháng-ngày khi truy xuất dữ liệu',
                    'option_3' => 'Cột created_at sẽ không được chuyển đổi định dạng khi truy xuất dữ liệu',
                    'option_4' => 'Cột created_at sẽ được lưu dưới dạng định dạng ngày-tháng-năm',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass ApiController extends Controller\n{\n    public function getUser($id)\n    {\n        $user = User::find($id);\n        return response()->json($user);\n    }\n}\n```',
                    'option_1' => 'Trả về dữ liệu người dùng dưới dạng JSON',
                    'option_2' => 'Trả về dữ liệu người dùng dưới dạng XML',
                    'option_3' => 'Trả về mã lỗi nếu người dùng không được tìm thấy',
                    'option_4' => 'Trả về dữ liệu người dùng dưới dạng HTML',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $data = $request->only([\'name\', \'email\']);\n    // Xử lý lưu trữ dữ liệu\n}\n```',
                    'option_1' => 'Chỉ lấy các dữ liệu name và email từ request để xử lý lưu trữ',
                    'option_2' => 'Lấy tất cả dữ liệu từ request để xử lý lưu trữ',
                    'option_3' => 'Xóa các dữ liệu name và email khỏi request',
                    'option_4' => 'Kiểm tra xem dữ liệu name và email có tồn tại trong request không',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    public function scopePublished($query)\n    {\n        return $query->where(\'status\', \'published\');\n    }\n}\n```',
                    'option_1' => 'Tạo một phạm vi truy vấn để chỉ lấy các bài viết có trạng thái "published"',
                    'option_2' => 'Tạo một phạm vi truy vấn để chỉ lấy các bài viết có trạng thái "draft"',
                    'option_3' => 'Tạo một phương thức để cập nhật trạng thái bài viết thành "published"',
                    'option_4' => 'Tạo một phương thức để xóa tất cả bài viết có trạng thái "published"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function deletePost($id)\n{\n    $post = Post::findOrFail($id);\n    $post->delete();\n    return response()->json([\'message\' => \'Post deleted\']);\n}\n```',
                    'option_1' => 'Xóa bài viết với ID tương ứng và trả về thông báo JSON xác nhận việc xóa',
                    'option_2' => 'Xóa bài viết với ID tương ứng mà không trả về thông báo',
                    'option_3' => 'Xóa tất cả bài viết mà không kiểm tra ID và không trả về thông báo',
                    'option_4' => 'Trả về thông báo lỗi nếu bài viết không được tìm thấy',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    public function scopeActive($query)\n    {\n        return $query->where(\'status\', \'active\');\n    }\n}\n\n$posts = Post::active()->get();\n```',
                    'option_1' => 'Lấy tất cả các bài viết có trạng thái "active"',
                    'option_2' => 'Lấy tất cả bài viết không có trạng thái "active"',
                    'option_3' => 'Lấy tất cả bài viết với trạng thái "inactive"',
                    'option_4' => 'Lấy tất cả bài viết không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updateUser(Request $request, $id)\n{\n    $user = User::findOrFail($id);\n    $user->update($request->all());\n    return redirect()->route(\'users.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật thông tin người dùng với ID tương ứng bằng dữ liệu từ request và chuyển hướng về trang chi tiết người dùng',
                    'option_2' => 'Cập nhật thông tin người dùng mà không kiểm tra ID và không chuyển hướng',
                    'option_3' => 'Cập nhật thông tin người dùng với ID tương ứng bằng dữ liệu từ request nhưng không lưu thay đổi',
                    'option_4' => 'Chuyển hướng về trang chi tiết người dùng mà không cập nhật thông tin',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getCategoryPosts($categoryId)\n{\n    return Post::whereHas(\'category\', function ($query) use ($categoryId) {\n        $query->where(\'id\', $categoryId);\n    })->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết thuộc về danh mục với ID tương ứng',
                    'option_2' => 'Lấy tất cả danh mục với bài viết có ID tương ứng',
                    'option_3' => 'Lấy tất cả bài viết mà không phân loại theo danh mục',
                    'option_4' => 'Lấy tất cả danh mục mà không có bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getActiveUsers()\n{\n    return User::active()->get();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng có trạng thái "active" dựa trên phạm vi truy vấn active',
                    'option_2' => 'Lấy tất cả người dùng không có trạng thái "active"',
                    'option_3' => 'Lấy tất cả người dùng và phân loại theo trạng thái',
                    'option_4' => 'Lấy tất cả người dùng với trạng thái "inactive"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    $model = Model::find($id);\n    if ($model) {\n        $model->delete();\n    }\n    return response()->json([\'success\' => true]);\n}\n```',
                    'option_1' => 'Xóa mô hình với ID tương ứng nếu tồn tại và trả về thông báo JSON xác nhận thành công',
                    'option_2' => 'Xóa mô hình với ID tương ứng và trả về thông báo lỗi nếu không tồn tại',
                    'option_3' => 'Chỉ kiểm tra sự tồn tại của mô hình và không xóa',
                    'option_4' => 'Xóa tất cả các mô hình mà không kiểm tra ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function validateForm(Request $request)\n{\n    $validated = $request->validate([\n        \'title\' => \'required|string|max:255\',\n        \'description\' => \'nullable|string\',\n    ]);\n    // Xử lý dữ liệu đã xác thực\n}\n```',
                    'option_1' => 'Xác thực dữ liệu yêu cầu và trả về dữ liệu đã xác thực để xử lý',
                    'option_2' => 'Chỉ xác thực dữ liệu yêu cầu mà không xử lý',
                    'option_3' => 'Lưu trữ dữ liệu vào cơ sở dữ liệu mà không xác thực',
                    'option_4' => 'Hiển thị lỗi nếu dữ liệu không xác thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function sendWelcomeEmail($user)\n{\n    Mail::to($user->email)->send(new WelcomeEmail($user));\n}\n```',
                    'option_1' => 'Gửi email chào mừng đến người dùng với dữ liệu người dùng',
                    'option_2' => 'Gửi email chào mừng đến tất cả người dùng',
                    'option_3' => 'Gửi email chào mừng mà không có dữ liệu người dùng',
                    'option_4' => 'Chỉ lưu thông tin email mà không gửi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPosts($userId)\n{\n    return User::find($userId)->posts;\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết của tất cả người dùng',
                    'option_3' => 'Lấy người dùng với ID tương ứng mà không có bài viết',
                    'option_4' => 'Lấy tất cả bài viết mà không có thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Comment extends Model\n{\n    protected $fillable = [\'content\', \'post_id\'];\n}\n```',
                    'option_1' => 'Các thuộc tính content và post_id sẽ có thể được gán giá trị khi tạo hoặc cập nhật bình luận',
                    'option_2' => 'Các thuộc tính content và post_id sẽ không thể được gán giá trị khi tạo hoặc cập nhật bình luận',
                    'option_3' => 'Các thuộc tính content và post_id sẽ được ẩn khi xuất dữ liệu bình luận',
                    'option_4' => 'Các thuộc tính content và post_id sẽ không được lưu vào cơ sở dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getTopPosts($limit)\n{\n    return Post::orderBy(\'views\', \'desc\')->limit($limit)->get();\n}\n```',
                    'option_1' => 'Lấy các bài viết có số lượt xem cao nhất, giới hạn số lượng theo biến $limit',
                    'option_2' => 'Lấy tất cả bài viết và sắp xếp theo số lượt xem',
                    'option_3' => 'Lấy các bài viết có số lượt xem thấp nhất',
                    'option_4' => 'Lấy tất cả bài viết mới nhất theo số lượt xem',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function filterPostsByCategory($categoryId)\n{\n    return Post::where(\'category_id\', $categoryId)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết thuộc về danh mục với ID tương ứng',
                    'option_2' => 'Lấy tất cả danh mục với bài viết có ID tương ứng',
                    'option_3' => 'Lấy tất cả bài viết không phân loại theo danh mục',
                    'option_4' => 'Lấy tất cả danh mục mà không có bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function showPost($id)\n{\n    return view(\'posts.show\')->with([\'post\' => Post::find($id)]);\n}\n```',
                    'option_1' => 'Trả về view với bài viết có ID tương ứng',
                    'option_2' => 'Chỉ lấy bài viết với ID tương ứng mà không trả về view',
                    'option_3' => 'Trả về view mà không có dữ liệu bài viết',
                    'option_4' => 'Chỉ lấy tất cả bài viết mà không phân loại theo ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPosts($userId)\n{\n    return User::find($userId)->posts()->where(\'status\', \'published\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết đã xuất bản của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết của người dùng với ID tương ứng mà không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả bài viết đã xuất bản mà không phân loại theo người dùng',
                    'option_4' => 'Lấy tất cả bài viết của người dùng mà không có trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentPosts($days)\n{\n    return Post::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả bài viết của ngày hiện tại',
                    'option_3' => 'Lấy tất cả bài viết của tuần hiện tại',
                    'option_4' => 'Lấy bài viết gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getCommentsByPostId($postId)\n{\n    return Comment::where(\'post_id\', $postId)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết với bình luận có ID tương ứng',
                    'option_3' => 'Lấy tất cả bình luận không phân loại theo bài viết',
                    'option_4' => 'Lấy tất cả bài viết và bình luận của chúng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePost(Request $request, $id)\n{\n    $post = Post::findOrFail($id);\n    $post->update($request->only([\'title\', \'content\']));\n    return redirect()->route(\'posts.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật thông tin bài viết với ID tương ứng và chuyển hướng về trang chi tiết bài viết',
                    'option_2' => 'Cập nhật thông tin bài viết mà không kiểm tra ID và không chuyển hướng',
                    'option_3' => 'Cập nhật thông tin bài viết với ID tương ứng bằng dữ liệu từ request nhưng không lưu thay đổi',
                    'option_4' => 'Chuyển hướng về trang chi tiết bài viết mà không cập nhật thông tin',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getAllUsers()\n{\n    return User::all();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy người dùng với ID tương ứng',
                    'option_3' => 'Lấy tất cả người dùng mà không phân loại',
                    'option_4' => 'Lấy tất cả người dùng đã được phân loại',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function storePost(Request $request)\n{\n    $post = new Post();\n    $post->title = $request->input(\'title\');\n    $post->content = $request->input(\'content\');\n    $post->save();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Lưu bài viết mới vào cơ sở dữ liệu và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Lưu bài viết mới vào cơ sở dữ liệu mà không chuyển hướng',
                    'option_3' => 'Chỉ tạo bài viết mà không lưu vào cơ sở dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getActivePosts()\n{\n    return Post::where(\'status\', \'active\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết có trạng thái "active"',
                    'option_2' => 'Lấy tất cả bài viết không có trạng thái "active"',
                    'option_3' => 'Lấy tất cả bài viết và phân loại theo trạng thái',
                    'option_4' => 'Lấy tất cả bài viết không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentUsers($days)\n{\n    return User::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả người dùng của ngày hiện tại',
                    'option_3' => 'Lấy tất cả người dùng của tuần hiện tại',
                    'option_4' => 'Lấy người dùng gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getCommentById($id)\n{\n    return Comment::find($id);\n}\n```',
                    'option_1' => 'Lấy bình luận với ID tương ứng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy tất cả bình luận mà không phân loại theo ID',
                    'option_3' => 'Lấy tất cả bình luận đã được phân loại',
                    'option_4' => 'Lấy bình luận mà không có ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostById($id)\n{\n    return Post::find($id);\n}\n```',
                    'option_1' => 'Lấy bài viết với ID tương ứng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy tất cả bài viết mà không phân loại theo ID',
                    'option_3' => 'Lấy tất cả bài viết đã được phân loại',
                    'option_4' => 'Lấy bài viết mà không có ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserComments($userId)\n{\n    return User::find($userId)->comments;\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bình luận của tất cả người dùng',
                    'option_3' => 'Lấy người dùng với ID tương ứng mà không có bình luận',
                    'option_4' => 'Lấy tất cả bình luận mà không có thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostsByStatus($status)\n{\n    return Post::where(\'status\', $status)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết có trạng thái tương ứng',
                    'option_2' => 'Lấy tất cả bài viết không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả trạng thái của bài viết',
                    'option_4' => 'Lấy tất cả bài viết với trạng thái không xác định',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function deleteComment($id)\n{\n    $comment = Comment::find($id);\n    if ($comment) {\n        $comment->delete();\n    }\n    return response()->json([\'success\' => true]);\n}\n```',
                    'option_1' => 'Xóa bình luận với ID tương ứng nếu tồn tại và trả về thông báo JSON xác nhận thành công',
                    'option_2' => 'Xóa bình luận với ID tương ứng và trả về thông báo lỗi nếu không tồn tại',
                    'option_3' => 'Chỉ kiểm tra sự tồn tại của bình luận và không xóa',
                    'option_4' => 'Xóa tất cả các bình luận mà không kiểm tra ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getComments($postId)\n{\n    return Comment::where(\'post_id\', $postId)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết với bình luận có ID tương ứng',
                    'option_3' => 'Lấy tất cả bình luận không phân loại theo bài viết',
                    'option_4' => 'Lấy tất cả bài viết và bình luận của chúng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUsersByStatus($status)\n{\n    return User::where(\'status\', $status)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng có trạng thái tương ứng',
                    'option_2' => 'Lấy tất cả người dùng không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả trạng thái của người dùng',
                    'option_4' => 'Lấy tất cả người dùng với trạng thái không xác định',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserById($id)\n{\n    return User::find($id);\n}\n```',
                    'option_1' => 'Lấy người dùng với ID tương ứng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy tất cả người dùng mà không phân loại theo ID',
                    'option_3' => 'Lấy tất cả người dùng đã được phân loại',
                    'option_4' => 'Lấy người dùng mà không có ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPublishedComments($postId)\n{\n    return Comment::where(\'post_id\', $postId)->where(\'status\', \'published\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận đã xuất bản của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bình luận của bài viết với ID tương ứng mà không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả bình luận đã xuất bản mà không phân loại theo bài viết',
                    'option_4' => 'Lấy tất cả bình luận của bài viết mà không có trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentComments($days)\n{\n    return Comment::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả bình luận của ngày hiện tại',
                    'option_3' => 'Lấy tất cả bình luận của tuần hiện tại',
                    'option_4' => 'Lấy bình luận gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updateComment(Request $request, $id)\n{\n    $comment = Comment::findOrFail($id);\n    $comment->update($request->only([\'content\']));\n    return redirect()->route(\'comments.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật thông tin bình luận với ID tương ứng và chuyển hướng về trang chi tiết bình luận',
                    'option_2' => 'Cập nhật thông tin bình luận mà không kiểm tra ID và không chuyển hướng',
                    'option_3' => 'Cập nhật thông tin bình luận với ID tương ứng bằng dữ liệu từ request nhưng không lưu thay đổi',
                    'option_4' => 'Chuyển hướng về trang chi tiết bình luận mà không cập nhật thông tin',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function storeComment(Request $request)\n{\n    $comment = new Comment();\n    $comment->content = $request->input(\'content\');\n    $comment->save();\n    return redirect()->route(\'comments.index\');\n}\n```',
                    'option_1' => 'Lưu bình luận mới vào cơ sở dữ liệu và chuyển hướng về trang danh sách bình luận',
                    'option_2' => 'Lưu bình luận mới vào cơ sở dữ liệu mà không chuyển hướng',
                    'option_3' => 'Chỉ tạo bình luận mà không lưu vào cơ sở dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bình luận mà không lưu bình luận mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function deleteUser($id)\n{\n    $user = User::find($id);\n    if ($user) {\n        $user->delete();\n    }\n    return response()->json([\'success\' => true]);\n}\n```',
                    'option_1' => 'Xóa người dùng với ID tương ứng nếu tồn tại và trả về thông báo JSON xác nhận thành công',
                    'option_2' => 'Xóa người dùng với ID tương ứng và trả về thông báo lỗi nếu không tồn tại',
                    'option_3' => 'Chỉ kiểm tra sự tồn tại của người dùng và không xóa',
                    'option_4' => 'Xóa tất cả người dùng mà không kiểm tra ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserComments($userId)\n{\n    return User::find($userId)->comments;\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bình luận của tất cả người dùng',
                    'option_3' => 'Lấy người dùng với ID tương ứng mà không có bình luận',
                    'option_4' => 'Lấy tất cả bình luận mà không có thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];

        $this->essays_laravel =
            [
                [
                    'question' => 'Để tạo một route cơ bản trong Laravel, bạn có thể sử dụng phương thức [blank_1] trong file routes/web.php. Ví dụ: [code]Route::[blank_2]("/", function () { return "Hello World!"; });[/code]',
                    'blanks' => 'get, get',
                ],
                [
                    'question' => 'Để kết nối với cơ sở dữ liệu trong Laravel, bạn cần cấu hình thông tin trong file [blank_1]. Ví dụ: [code]DB::connection("[blank_2]")->getPdo();[/code]',
                    'blanks' => 'config/database.php, mysql',
                ],
                [
                    'question' => 'Để tạo một controller mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần truyền dữ liệu từ controller đến view, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]return view("home", ["[blank_2]" => $data]);[/code]',
                    'blanks' => 'view, data',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn cơ sở dữ liệu đơn giản trong Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]()->get();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một migration mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_users_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần xác thực dữ liệu nhập vào trong một form, bạn có thể sử dụng class [blank_1]. Ví dụ: [code]use Illuminate\\Http\\Request;[/code]',
                    'blanks' => 'Request',
                ],
                [
                    'question' => 'Để định nghĩa một route có tham số trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/user/{id}", [blank_2]::class, "show");[/code]',
                    'blanks' => 'controllerName, controllerName',
                ],
                [
                    'question' => 'Để lấy toàn bộ dữ liệu từ một bảng trong Laravel, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->[blank_2]();[/code]',
                    'blanks' => 'get, get',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route nhóm với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::group(["middleware" => "[blank_2]"], function () { /* ... */ });[/code]',
                    'blanks' => 'auth, auth',
                ],
                [
                    'question' => 'Để sử dụng Eloquent model trong Laravel, bạn cần khai báo tên bảng bằng cách sử dụng thuộc tính [blank_1] trong model. Ví dụ: [code]protected $table = "[blank_2]";[/code]',
                    'blanks' => 'table, users',
                ],
                [
                    'question' => 'Để tạo một form với method POST trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]<form action="[blank_2]" method="post">[/code]',
                    'blanks' => 'url, url',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route chỉ cho phương thức POST, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Route::[blank_2]("/submit", function () { /* ... */ });[/code]',
                    'blanks' => 'post, post',
                ],
                [
                    'question' => 'Để tạo một view mới trong Laravel, bạn cần tạo một file trong thư mục [blank_1]. Ví dụ: [code]resources/views/[blank_2].blade.php[/code]',
                    'blanks' => 'resources/views, welcome',
                ],
                [
                    'question' => 'Để sử dụng các biến môi trường trong Laravel, bạn có thể truy cập chúng bằng cách sử dụng hàm [blank_1]. Ví dụ: [code]env("[blank_2]")[/code]',
                    'blanks' => 'env, APP_NAME',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn cơ sở dữ liệu với điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("[blank_2]", "value")->get();[/code]',
                    'blanks' => 'where, columnName',
                ],
                [
                    'question' => 'Để sử dụng middleware trong Laravel, bạn có thể định nghĩa chúng trong file [blank_1]. Ví dụ: [code]protected $middleware = ["[blank_2]"];[/code]',
                    'blanks' => 'app/Http/Kernel.php, auth',
                ],
                [
                    'question' => 'Để định nghĩa một route cho phương thức GET và POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::match(["[blank_2]", "post"], "/submit", function () { /* ... */ });[/code]',
                    'blanks' => 'match, get',
                ],
                [
                    'question' => 'Khi bạn cần tạo một seed để nhập dữ liệu mẫu vào cơ sở dữ liệu, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] UserSeeder[/code]',
                    'blanks' => 'db:seed, db:seed',
                ],
                [
                    'question' => 'Để khai báo một thuộc tính protected trong một model, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]protected $[blank_2];[/code]',
                    'blanks' => 'protected, property',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin',
                ],
                [
                    'question' => 'Để sử dụng các helper function trong Laravel, bạn cần bao gồm file [blank_1]. Ví dụ: [code]include "[blank_2]";[/code]',
                    'blanks' => 'bootstrap/app.php, helpers.php',
                ],
                [
                    'question' => 'Khi bạn cần tạo một custom validation rule, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Validator::make($data, ["field" => "[blank_2]"]);[/code]',
                    'blanks' => 'Validator, ruleName',
                ],
                [
                    'question' => 'Để tạo một controller với resource methods, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Để lấy toàn bộ dữ liệu từ một bảng bằng Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một route với tên, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/home", [blank_2]::class, "index")->name("home");[/code]',
                    'blanks' => 'name, controllerName',
                ],
                [
                    'question' => 'Để tạo một form với CSRF token trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]@csrf[/code]',
                    'blanks' => 'csrf',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class để xử lý xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CreateRequest[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để lấy giá trị của một biến môi trường trong Laravel, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]config("[blank_2]")[/code]',
                    'blanks' => 'config, app.name',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với name và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/admin", [blank_2]::class)->name("admin")->middleware("auth");[/code]',
                    'blanks' => 'middleware, controllerName',
                ],
                [
                    'question' => 'Để tạo một migration để thêm cột mới vào bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Schema::table("[blank_2]", function (Blueprint $table) { $table->string("new_column"); });[/code]',
                    'blanks' => 'Schema::table, users',
                ],
                [
                    'question' => 'Để xác thực người dùng với Laravel Auth, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Auth::[blank_2]("email", "password");[/code]',
                    'blanks' => 'attempt, attempt',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route cho phương thức PUT, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/update", [blank_3]::class);[/code]',
                    'blanks' => 'put, put, controllerName',
                ],
                [
                    'question' => 'Để lấy giá trị của tất cả các thuộc tính từ một đối tượng trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->getAttributes();[/code]',
                    'blanks' => 'getAttributes',
                ],
                [
                    'question' => 'Khi bạn cần thêm một trường vào bảng trong một migration, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Schema::table("[blank_2]", function (Blueprint $table) { $table->string("new_field"); });[/code]',
                    'blanks' => 'table, users',
                ],
                [
                    'question' => 'Để tạo một route cho phương thức PATCH, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/edit", [blank_3]::class);[/code]',
                    'blanks' => 'patch, patch, controllerName',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để lấy bản ghi đầu tiên từ cơ sở dữ liệu, bạn có thể sử dụng [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'first, first',
                ],
                [
                    'question' => 'Để tạo một model mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] User[/code]',
                    'blanks' => 'make:model, make:model',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để tìm một bản ghi theo ID, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::find([blank_2]);[/code]',
                    'blanks' => 'find, id',
                ],
                [
                    'question' => 'Để lấy toàn bộ dữ liệu từ một bảng bằng Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một route cho phương thức DELETE, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/delete", [blank_3]::class);[/code]',
                    'blanks' => 'delete, delete, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần chuyển hướng người dùng đến một route khác, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]return [blank_2]("home");[/code]',
                    'blanks' => 'redirect, redirect',
                ],
                [
                    'question' => 'Để tạo một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::group(["prefix" => "[blank_2]", "middleware" => "auth"], function () { /* ... */ });[/code]',
                    'blanks' => 'group, admin',
                ],
                [
                    'question' => 'Khi bạn cần xác thực người dùng với email và password, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Auth::[blank_2]("email", "password");[/code]',
                    'blanks' => 'attempt, attempt',
                ],
                [
                    'question' => 'Để tạo một route với tên cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/profile", [blank_2]::class)->name("profile");[/code]',
                    'blanks' => 'name, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần chạy một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("id", $id)->[blank_2]("name", "newName");[/code]',
                    'blanks' => 'update, update',
                ],
                [
                    'question' => 'Để tạo một model với tên bảng cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]protected $table = "[blank_2]";[/code]',
                    'blanks' => 'protected, users',
                ],
                [
                    'question' => 'Để tạo một route với phương thức GET và POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2](["get", "post"], "/action", [blank_3]::class);[/code]',
                    'blanks' => 'match, match, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa một bản ghi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("id", $id)->[blank_2]();[/code]',
                    'blanks' => 'delete, delete',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("auth")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, admin',
                ],
                [
                    'question' => 'Để tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CreateRequest[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả dữ liệu từ một bảng trong Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::group(["middleware" => "[blank_2]"], function () { /* ... */ });[/code]',
                    'blanks' => 'group, auth',
                ],
                [
                    'question' => 'Để tạo một migration mới cho bảng, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_users_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần tạo một model với thuộc tính fillable, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]protected $fillable = ["[blank_2]"];[/code]',
                    'blanks' => 'fillable, field1',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/post", [blank_3]::class);[/code]',
                    'blanks' => 'post, post, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần truy cập biến môi trường trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]env("[blank_2]")[/code]',
                    'blanks' => 'env, APP_ENV',
                ],
                [
                    'question' => 'Để kiểm tra xem một người dùng đã xác thực hay chưa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Auth::[blank_2]();[/code]',
                    'blanks' => 'check, check',
                ],
                [
                    'question' => 'Để lấy dữ liệu từ một model Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Khi bạn cần truyền dữ liệu từ controller đến view, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]return view("[blank_2]", ["data" => $data]);[/code]',
                    'blanks' => 'view, home',
                ],
                [
                    'question' => 'Để tạo một migration để xóa một cột khỏi bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Schema::table("[blank_2]", function (Blueprint $table) { $table->dropColumn("old_column"); });[/code]',
                    'blanks' => 'Schema::table, users',
                ],
                [
                    'question' => 'Để tạo một controller mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lọc dữ liệu theo điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("[blank_2]", "value")->get();[/code]',
                    'blanks' => 'where, column',
                ],
                [
                    'question' => 'Để tạo một form với method PUT trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]<form action="[blank_2]" method="put">[/code]',
                    'blanks' => 'url, url',
                ],
                [
                    'question' => 'Khi bạn cần xác thực dữ liệu nhập vào với Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Validator::make($request->all(), ["field" => "[blank_2]"]);[/code]',
                    'blanks' => 'Validator, required',
                ],
                [
                    'question' => 'Để lấy giá trị của một thuộc tính trong model, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$model->[blank_2];[/code]',
                    'blanks' => 'propertyName, propertyName',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả dữ liệu từ một bảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->get();[/code]',
                    'blanks' => 'get, users',
                ],
                [
                    'question' => 'Để tạo một view mới trong Laravel, bạn cần tạo một file trong thư mục [blank_1]. Ví dụ: [code]resources/views/[blank_2].blade.php[/code]',
                    'blanks' => 'resources/views, welcome',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->delete();[/code]',
                    'blanks' => 'delete, users',
                ],
                [
                    'question' => 'Để tạo một migration mới cho một bảng, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_table_name[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để lấy bản ghi đầu tiên từ cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Model::[blank_2]();[/code]',
                    'blanks' => 'first, first',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route cho phương thức PUT, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/update", [blank_3]::class);[/code]',
                    'blanks' => 'put, put, controllerName',
                ],
                [
                    'question' => 'Để tạo một form với method POST trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]<form action="[blank_2]" method="post">[/code]',
                    'blanks' => 'url, url',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth',
                ],
                [
                    'question' => 'Để tạo một model mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] ModelName[/code]',
                    'blanks' => 'make:model, make:model',
                ],
                [
                    'question' => 'Khi bạn cần xác thực dữ liệu trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Validator::make($request->all(), ["[blank_2]" => "required"]);[/code]',
                    'blanks' => 'Validator, fieldName',
                ],
                [
                    'question' => 'Để lấy giá trị của một thuộc tính trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$model->[blank_2];[/code]',
                    'blanks' => 'propertyName, propertyName',
                ],
                [
                    'question' => 'Để tạo một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Để định nghĩa một route với tên cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/dashboard", [blank_2]::class)->name("dashboard");[/code]',
                    'blanks' => 'name, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần truy cập biến môi trường trong Laravel, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]config("[blank_2]")[/code]',
                    'blanks' => 'config, app.name',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để định nghĩa một route nhóm với middleware và tên nhóm, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->name("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth, admin',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với phương thức PATCH và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::patch("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'patch, controllerName, auth',
                ],
                [
                    'question' => 'Để tạo một request class với xác thực và middleware, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName --middleware="[blank_3]"[/code]',
                    'blanks' => 'make:request, make:request, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa nhiều bản ghi theo điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->delete();[/code]',
                    'blanks' => 'delete, users, field, value',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để cập nhật bản ghi với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->update(["[blank_6]" => "[blank_7]"]);[/code]',
                    'blanks' => 'update, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource và tên cụ thể, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm bản ghi theo nhiều điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->orderBy("[blank_6]")->get();[/code]',
                    'blanks' => 'where, field1, value1, field2, value2, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức GET và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/dashboard", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'get, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration mới với tên cụ thể, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_table_name[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu từ một model theo điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->get();[/code]',
                    'blanks' => 'where, field, value',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->prefix("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth, admin',
                ],
                [
                    'question' => 'Để tạo một route với tên cụ thể và phương thức POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::post("/submit", [blank_2]::class)->name("[blank_3]");[/code]',
                    'blanks' => 'name, controllerName, submit',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Để tạo một route với phương thức POST và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::post("/submit", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'post, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu với điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'where, field, value, 10',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Khi bạn cần tạo một custom request class, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomRequest[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để cập nhật một bản ghi bằng phương thức Eloquent, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, field, value, column, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức PATCH, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::patch("/update/{id}", [blank_2]::class);[/code]',
                    'blanks' => 'patch, controllerName',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa bản ghi dựa trên một điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->delete();[/code]',
                    'blanks' => 'delete, tableName, field, value',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'paginate, field, value, 10',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent và sắp xếp dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::orderBy("[blank_2]")->get();[/code]',
                    'blanks' => 'orderBy, column',
                ],
                [
                    'question' => 'Khi bạn cần tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->get();[/code]',
                    'blanks' => 'where, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để tạo một bản ghi mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Khi bạn cần tạo một controller với phương thức API, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ApiController[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Để định nghĩa một route nhóm với prefix và namespace, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::namespace("[blank_2]")->prefix("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'namespace, Admin, admin',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent và sử dụng eager loading, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::with("[blank_2]")->get();[/code]',
                    'blanks' => 'with, relationName',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu với điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'where, field, value, 10',
                ],
                [
                    'question' => 'Để tạo một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/home", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'get, HomeController, auth',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration để thêm cột vào bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] add_column_to_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để xóa bản ghi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->delete();[/code]',
                    'blanks' => 'delete, field, value',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với điều kiện phức tạp trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where(function ($query) { $query->where("[blank_3]", "[blank_4]")->orWhere("[blank_5]", "[blank_6]"); })->get();[/code]',
                    'blanks' => 'where, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để tạo một service provider mới, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] MyServiceProvider[/code]',
                    'blanks' => 'make:provider, make:provider',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để tạo mới một bản ghi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::create(["[blank_2]" => "[blank_3]"]);[/code]',
                    'blanks' => 'create, field, value',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm kiếm bản ghi với điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->first();[/code]',
                    'blanks' => 'where, field, value',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với điều kiện phức tạp và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orWhere("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, users, field1, value1, field2, value2, 10',
                ],
                [
                    'question' => 'Khi bạn cần tạo một middleware tùy chỉnh và đăng ký nó trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Để tạo một migration để xóa cột từ bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] remove_column_from_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với điều kiện và sắp xếp theo nhiều cột, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orderBy("[blank_5]", "[blank_6]")->orderBy("[blank_7]")->get();[/code]',
                    'blanks' => 'orderBy, users, field1, value1, column1, asc, column2',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->update(["[blank_6]" => "[blank_7]"]);[/code]',
                    'blanks' => 'update, field1, value1, field2, value2, column, newValue',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, users, field1, value1, field2, value2, 10',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, UpdateController, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu với điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'paginate, field, value, 15',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức POST và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::post("/create", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'post, CreateController, auth',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với middleware và nhóm route, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/dashboard", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, DashboardController',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với điều kiện phức tạp và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, users, field1, value1, field2, value2, 20',
                ],
                [
                    'question' => 'Để tạo một command mới trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomCommand[/code]',
                    'blanks' => 'make:command, make:command',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để lấy dữ liệu và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'where, field, value, 25',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration để thêm bảng mới, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] create_users_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức PATCH và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::patch("/update/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'patch, UpdateController, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với Eloquent để tìm kiếm bản ghi theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->get();[/code]',
                    'blanks' => 'where, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để tạo một service provider và đăng ký nó, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ServiceProvider[/code]',
                    'blanks' => 'make:provider, make:provider',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->update(["[blank_6]" => "[blank_7]"]);[/code]',
                    'blanks' => 'update, field1, value1, field2, value2, column, newValue',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu với nhiều điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, orders, field1, value1, field2, value2, 30',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration để xóa bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] drop_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/profile", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, ProfileController',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với Eloquent để tìm kiếm bản ghi theo nhiều điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->paginate([blank_6]);[/code]',
                    'blanks' => 'paginate, field1, value1, field2, value2, 40',
                ],
                [
                    'question' => 'Để tạo một middleware và đăng ký nó trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] MiddlewareName[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với điều kiện phức tạp và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orderBy("[blank_5]", "[blank_6]")->get();[/code]',
                    'blanks' => 'orderBy, posts, field, value, column, desc',
                ],
                [
                    'question' => 'Để tạo một route với middleware và nhóm route với prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { Route::get("/settings", [blank_4]::class); });[/code]',
                    'blanks' => 'prefix, admin, auth, SettingsController',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, products, field1, value1, field2, value2, 50',
                ],
                [
                    'question' => 'Để tạo một controller với phương thức API và resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ApiController --api --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, orders, field1, value1, field2, value2, column, newValue',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/remove/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, RemoveController, auth',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu và sắp xếp theo nhiều cột, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::orderBy("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'orderBy, field1, asc, field2',
                ],
                [
                    'question' => 'Để tạo một middleware và áp dụng cho route, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/dashboard", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, DashboardController',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu với điều kiện và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->paginate([blank_6]);[/code]',
                    'blanks' => 'paginate, field1, value1, field2, value2, 60',
                ],
                [
                    'question' => 'Để tạo một migration để sửa đổi bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] modify_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu với nhiều điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orderBy("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, products, field1, value1, column, asc',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với nhiều điều kiện và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, orders, field1, value1, field2, value2, 70',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm kiếm và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'paginate, field, value, 80',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/home", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, HomeController',
                ],
            ];
    }
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        //
    }
}
