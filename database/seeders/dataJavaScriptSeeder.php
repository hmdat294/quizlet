<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class dataJavaScriptSeeder extends Seeder
{
    public $questions_javascript = [];
    public $essays_javascript = [];

    public function __construct()
    {

        $this->questions_javascript =
            [
                [
                    'question' => 'JavaScript là ngôn ngữ xử lý ở:',
                    'option_1' => 'Client',
                    'option_2' => 'Server',
                    'option_3' => 'Server/client',
                    'option_4' => 'Không có dạng nào.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp để khai báo biến trong JavaScript là:',
                    'option_1' => 'var',
                    'option_2' => 'let',
                    'option_3' => 'const',
                    'option_4' => 'Tất cả các phương án trên',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để chú thích một dòng trong JavaScript?',
                    'option_1' => '//',
                    'option_2' => '/*',
                    'option_3' => '#',
                    'option_4' => ';;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để khai báo một hàm trong JavaScript?',
                    'option_1' => 'function',
                    'option_2' => 'def',
                    'option_3' => 'func',
                    'option_4' => 'method',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'JavaScript có loại dữ liệu nào?',
                    'option_1' => 'String',
                    'option_2' => 'Number',
                    'option_3' => 'Boolean',
                    'option_4' => 'Tất cả các phương án trên',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi sử dụng `console.log()`, điều gì xảy ra?',
                    'option_1' => 'In thông tin ra màn hình console',
                    'option_2' => 'Ghi thông tin vào file',
                    'option_3' => 'Hiển thị thông tin trong alert box',
                    'option_4' => 'Không có gì xảy ra',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào sau đây là đúng để so sánh bằng trong JavaScript?',
                    'option_1' => '==',
                    'option_2' => '===',
                    'option_3' => '!=',
                    'option_4' => 'Tất cả các phương án trên',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào sau đây được dùng để khai báo mảng trong JavaScript?',
                    'option_1' => '[]',
                    'option_2' => '{}',
                    'option_3' => '()',
                    'option_4' => '<>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Hàm nào được gọi khi một sự kiện xảy ra trên trang web?',
                    'option_1' => 'Event handler',
                    'option_2' => 'Event listener',
                    'option_3' => 'Event generator',
                    'option_4' => 'Event creator',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào dùng để kiểm tra điều kiện trong JavaScript?',
                    'option_1' => 'if',
                    'option_2' => 'check',
                    'option_3' => 'condition',
                    'option_4' => 'verify',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào trong JavaScript được sử dụng để khai báo một biến không thay đổi?',
                    'option_1' => 'const',
                    'option_2' => 'let',
                    'option_3' => 'var',
                    'option_4' => 'static',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Toán tử nào dùng để kết nối hai chuỗi trong JavaScript?',
                    'option_1' => '+',
                    'option_2' => '-',
                    'option_3' => '*',
                    'option_4' => '/',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Chức năng của `parseInt()` trong JavaScript là gì?',
                    'option_1' => 'Chuyển đổi chuỗi thành số nguyên',
                    'option_2' => 'Chuyển đổi số thành chuỗi',
                    'option_3' => 'Chuyển đổi số thành số thực',
                    'option_4' => 'Chuyển đổi chuỗi thành số thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để gọi một hàm trong JavaScript?',
                    'option_1' => 'functionName()',
                    'option_2' => 'call functionName',
                    'option_3' => 'functionName[]',
                    'option_4' => 'call functionName()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => '`NaN` trong JavaScript có nghĩa là gì?',
                    'option_1' => 'Not a Number',
                    'option_2' => 'New Array Number',
                    'option_3' => 'Null and Number',
                    'option_4' => 'None of the above',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Sự khác biệt giữa `==` và `===` trong JavaScript là gì?',
                    'option_1' => '`==` so sánh giá trị, `===` so sánh giá trị và kiểu dữ liệu',
                    'option_2' => '`==` so sánh giá trị và kiểu dữ liệu, `===` so sánh giá trị',
                    'option_3' => 'Không có sự khác biệt',
                    'option_4' => '`==` dùng cho chuỗi, `===` dùng cho số',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp để khai báo một đối tượng trong JavaScript là gì?',
                    'option_1' => '{}',
                    'option_2' => '[]',
                    'option_3' => '()',
                    'option_4' => '<>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để lặp qua mảng trong JavaScript?',
                    'option_1' => 'for',
                    'option_2' => 'while',
                    'option_3' => 'forEach',
                    'option_4' => 'do while',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Hàm nào được gọi khi một trang web được tải xong?',
                    'option_1' => 'onload',
                    'option_2' => 'onclick',
                    'option_3' => 'onchange',
                    'option_4' => 'onmouseover',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để kiểm tra loại dữ liệu của một biến trong JavaScript, bạn sử dụng hàm nào?',
                    'option_1' => 'typeof',
                    'option_2' => 'instanceof',
                    'option_3' => 'checktype',
                    'option_4' => 'datatype',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để thêm phần tử vào cuối mảng?',
                    'option_1' => 'push()',
                    'option_2' => 'pop()',
                    'option_3' => 'shift()',
                    'option_4' => 'unshift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để tạo một đối tượng mới từ một lớp trong JavaScript, bạn sử dụng từ khóa nào?',
                    'option_1' => 'new',
                    'option_2' => 'create',
                    'option_3' => 'class',
                    'option_4' => 'object',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để loại bỏ phần tử cuối cùng của một mảng?',
                    'option_1' => 'pop()',
                    'option_2' => 'push()',
                    'option_3' => 'shift()',
                    'option_4' => 'unshift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một hàm không có tham số?',
                    'option_1' => 'function myFunction() {}',
                    'option_2' => 'function myFunction[] {}',
                    'option_3' => 'function myFunction() () {}',
                    'option_4' => 'function myFunction {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một biến toàn cục trong JavaScript?',
                    'option_1' => 'var',
                    'option_2' => 'let',
                    'option_3' => 'const',
                    'option_4' => 'global',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để tạo một đối tượng từ lớp trong JavaScript?',
                    'option_1' => 'new ClassName()',
                    'option_2' => 'ClassName.create()',
                    'option_3' => 'ClassName.new()',
                    'option_4' => 'create ClassName()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào dùng để phân cách các phần tử trong mảng?',
                    'option_1' => ',',
                    'option_2' => ';',
                    'option_3' => ':',
                    'option_4' => '|',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kết nối hai chuỗi trong JavaScript?',
                    'option_1' => 'String1 + String2',
                    'option_2' => 'String1 - String2',
                    'option_3' => 'String1 * String2',
                    'option_4' => 'String1 / String2',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào để lấy độ dài của một chuỗi trong JavaScript?',
                    'option_1' => 'length',
                    'option_2' => 'size',
                    'option_3' => 'count',
                    'option_4' => 'lengthOf',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để kết thúc câu lệnh trong JavaScript?',
                    'option_1' => ';',
                    'option_2' => ':',
                    'option_3' => ',',
                    'option_4' => '.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để khai báo một đối tượng trong JavaScript?',
                    'option_1' => '{}',
                    'option_2' => '[]',
                    'option_3' => '()',
                    'option_4' => '||',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào được sử dụng để khai báo một biến trong JavaScript mà giá trị của nó có thể thay đổi?',
                    'option_1' => 'let',
                    'option_2' => 'const',
                    'option_3' => 'var',
                    'option_4' => 'static',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra điều kiện trong JavaScript?',
                    'option_1' => 'if',
                    'option_2' => 'for',
                    'option_3' => 'while',
                    'option_4' => 'switch',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để loại bỏ phần tử đầu tiên của một mảng?',
                    'option_1' => 'shift()',
                    'option_2' => 'pop()',
                    'option_3' => 'push()',
                    'option_4' => 'unshift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào dùng để định nghĩa một lớp trong JavaScript?',
                    'option_1' => 'class ClassName {}',
                    'option_2' => 'create ClassName {}',
                    'option_3' => 'define ClassName {}',
                    'option_4' => 'new ClassName {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi nào bạn nên sử dụng từ khóa `const` trong JavaScript?',
                    'option_1' => 'Khi giá trị của biến không thay đổi',
                    'option_2' => 'Khi giá trị của biến thay đổi',
                    'option_3' => 'Khi bạn muốn khai báo một hàm',
                    'option_4' => 'Khi bạn muốn khai báo một đối tượng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để thực hiện một vòng lặp từ 1 đến 10 trong JavaScript, cú pháp nào là đúng?',
                    'option_1' => 'for (let i = 1; i <= 10; i++) {}',
                    'option_2' => 'for (let i = 0; i < 10; i++) {}',
                    'option_3' => 'for (let i = 1; i < 10; i++) {}',
                    'option_4' => 'for (let i = 0; i <= 10; i++) {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để thêm phần tử vào đầu mảng?',
                    'option_1' => 'unshift()',
                    'option_2' => 'push()',
                    'option_3' => 'pop()',
                    'option_4' => 'shift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi nào bạn sử dụng từ khóa `let` trong JavaScript?',
                    'option_1' => 'Khi bạn muốn khai báo một biến có phạm vi khối',
                    'option_2' => 'Khi bạn muốn khai báo một biến toàn cục',
                    'option_3' => 'Khi bạn muốn khai báo một hàm',
                    'option_4' => 'Khi bạn muốn khai báo một lớp',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào trả về chuỗi với chữ hoa đầu tiên trong JavaScript?',
                    'option_1' => 'toUpperCase()',
                    'option_2' => 'capitalize()',
                    'option_3' => 'toCapitalized()',
                    'option_4' => 'toLowerCase()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi bạn muốn so sánh hai đối tượng trong JavaScript, bạn nên dùng toán tử nào?',
                    'option_1' => '===',
                    'option_2' => '==',
                    'option_3' => '<>',
                    'option_4' => '!=',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để tạo một chuỗi trong JavaScript?',
                    'option_1' => '"My String"',
                    'option_2' => '"My String"',
                    'option_3' => 'My String',
                    'option_4' => 'String("My String")',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Sự khác biệt giữa `null` và `undefined` trong JavaScript là gì?',
                    'option_1' => '`null` là giá trị không có, `undefined` là không được định nghĩa',
                    'option_2' => '`null` là không được định nghĩa, `undefined` là giá trị không có',
                    'option_3' => 'Không có sự khác biệt',
                    'option_4' => '`null` và `undefined` là giống nhau',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra xem một giá trị có phải là mảng không?',
                    'option_1' => 'Array.isArray()',
                    'option_2' => 'isArray()',
                    'option_3' => 'checkArray()',
                    'option_4' => 'typeOfArray()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để nối hai mảng trong JavaScript?',
                    'option_1' => 'concat()',
                    'option_2' => 'merge()',
                    'option_3' => 'join()',
                    'option_4' => 'append()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để chọn phần tử HTML theo ID trong JavaScript?',
                    'option_1' => 'document.getElementById()',
                    'option_2' => 'document.querySelector()',
                    'option_3' => 'document.getElementByClass()',
                    'option_4' => 'document.getElement()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để loại bỏ khoảng trắng ở đầu và cuối chuỗi?',
                    'option_1' => 'trim()',
                    'option_2' => 'slice()',
                    'option_3' => 'replace()',
                    'option_4' => 'substring()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để viết chuỗi nhiều dòng trong JavaScript?',
                    'option_1' => '`',
                    'option_2' => '"',
                    'option_3' => '\'',
                    'option_4' => ';',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra xem một giá trị có phải là số không?',
                    'option_1' => 'isNaN()',
                    'option_2' => 'isNumber()',
                    'option_3' => 'checkNumber()',
                    'option_4' => 'typeof',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào được sử dụng để khai báo một biến trong JavaScript mà không thể thay đổi giá trị?',
                    'option_1' => 'const',
                    'option_2' => 'let',
                    'option_3' => 'var',
                    'option_4' => 'immutable',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để lấy giá trị của một thuộc tính trong đối tượng?',
                    'option_1' => 'object.property',
                    'option_2' => 'object.get(property)',
                    'option_3' => 'object.getProperty(property)',
                    'option_4' => 'object[property]',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một lớp trong JavaScript?',
                    'option_1' => 'class MyClass {}',
                    'option_2' => 'class MyClass() {}',
                    'option_3' => 'new MyClass {}',
                    'option_4' => 'MyClass class {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để lấy một phần của chuỗi?',
                    'option_1' => 'substring()',
                    'option_2' => 'slice()',
                    'option_3' => 'splice()',
                    'option_4' => 'sub()',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để khai báo một biến toàn cục trong JavaScript?',
                    'option_1' => 'var',
                    'option_2' => 'let',
                    'option_3' => 'const',
                    'option_4' => 'global',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào trong JavaScript được sử dụng để khai báo một hàm?',
                    'option_1' => 'function',
                    'option_2' => 'func',
                    'option_3' => 'method',
                    'option_4' => 'define',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một biến trong phạm vi khối trong JavaScript?',
                    'option_1' => 'let',
                    'option_2' => 'var',
                    'option_3' => 'const',
                    'option_4' => 'global',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để thay thế một phần của chuỗi trong JavaScript?',
                    'option_1' => 'replace()',
                    'option_2' => 'sub()',
                    'option_3' => 'slice()',
                    'option_4' => 'split()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Sự khác biệt giữa `==` và `===` trong JavaScript là gì?',
                    'option_1' => '`==` so sánh giá trị, `===` so sánh giá trị và kiểu dữ liệu',
                    'option_2' => '`==` so sánh giá trị và kiểu dữ liệu, `===` so sánh giá trị',
                    'option_3' => '`==` là toán tử so sánh, `===` là toán tử gán',
                    'option_4' => 'Không có sự khác biệt',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để khai báo một hàm trong JavaScript?',
                    'option_1' => 'function',
                    'option_2' => 'def',
                    'option_3' => 'func',
                    'option_4' => 'method',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để gọi một hàm trong JavaScript, cú pháp nào là đúng?',
                    'option_1' => 'functionName()',
                    'option_2' => 'call functionName',
                    'option_3' => 'functionName[]',
                    'option_4' => 'call functionName()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để xóa tất cả phần tử trong mảng?',
                    'option_1' => 'splice()',
                    'option_2' => 'pop()',
                    'option_3' => 'shift()',
                    'option_4' => 'remove()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi nào bạn sử dụng từ khóa `var` trong JavaScript?',
                    'option_1' => 'Khi bạn muốn khai báo biến toàn cục',
                    'option_2' => 'Khi bạn muốn khai báo biến khối',
                    'option_3' => 'Khi bạn muốn khai báo hàm',
                    'option_4' => 'Khi bạn muốn khai báo đối tượng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào dùng để so sánh hai giá trị trong JavaScript?',
                    'option_1' => '==',
                    'option_2' => '=',
                    'option_3' => '===',
                    'option_4' => '<>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào trong JavaScript dùng để khai báo một biến không thay đổi?',
                    'option_1' => 'const',
                    'option_2' => 'let',
                    'option_3' => 'var',
                    'option_4' => 'static',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để kết thúc một câu lệnh trong JavaScript?',
                    'option_1' => ';',
                    'option_2' => '.',
                    'option_3' => ',',
                    'option_4' => ':',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để lấy phần tử theo tên lớp trong JavaScript?',
                    'option_1' => 'document.getElementsByClassName()',
                    'option_2' => 'document.querySelectorAll()',
                    'option_3' => 'document.getElementById()',
                    'option_4' => 'document.querySelector()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào dùng để khai báo một mảng trong JavaScript?',
                    'option_1' => '[]',
                    'option_2' => '{}',
                    'option_3' => '()',
                    'option_4' => '||',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra kiểu dữ liệu của một giá trị trong JavaScript?',
                    'option_1' => 'typeof',
                    'option_2' => 'instanceof',
                    'option_3' => 'isType()',
                    'option_4' => 'typeOf()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof NaN);\n```',
                    'option_1' => 'number',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'object',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet a = { name: "John" };\nlet b = a;\nb.name = "Doe";\nconsole.log(a.name);\n```',
                    'option_1' => 'Doe',
                    'option_2' => 'John',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == [1]);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([] + []);\n```',
                    'option_1' => '""',
                    'option_2' => '[]',
                    'option_3' => 'null',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nfunction foo() {\n  console.log(arguments.length);\n}\nfoo(1, 2, 3);\n```',
                    'option_1' => '3',
                    'option_2' => '0',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 10;\n(function() {\n  let x = 20;\n  console.log(x);\n})();\nconsole.log(x);\n```',
                    'option_1' => '20, 10',
                    'option_2' => '10, 20',
                    'option_3' => 'undefined, 10',
                    'option_4' => '20, undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconst arr = [obj];\nobj.a = 2;\nconsole.log(arr);\n```',
                    'option_1' => '[{ a: 2 }]',
                    'option_2' => '[{ a: 1 }]',
                    'option_3' => '[]',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof null);\n```',
                    'option_1' => 'object',
                    'option_2' => 'null',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(1 + "1" - 1);\n```',
                    'option_1' => '10',
                    'option_2' => '11',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconst clone = Object.assign({}, obj);\nclone.a = 2;\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(2 * "3");\n```',
                    'option_1' => '6',
                    'option_2' => '23',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = (function() {\n  let x = 10;\n  return function() { return x; };\n})();\nconsole.log(foo());\n```',
                    'option_1' => '10',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => 'NaN',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.length = 2;\nconsole.log(arr);\n```',
                    'option_1' => '[1, 2]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => '[2, 3]',
                    'option_4' => '[]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.push(4);\narr.shift();\nconsole.log(arr);\n```',
                    'option_1' => '[2, 3, 4]',
                    'option_2' => '[1, 2, 3, 4]',
                    'option_3' => '[2, 3]',
                    'option_4' => '[1, 3, 4]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  return {\n    bar: 1\n  };\n};\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.splice(1, 1);\nconsole.log(arr);\n```',
                    'option_1' => '[1, 3]',
                    'option_2' => '[2, 3]',
                    'option_3' => '[1, 2]',
                    'option_4' => '[1, 2, 3]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconst obj2 = { ...obj, b: 2 };\nconsole.log(obj2);\n```',
                    'option_1' => '{ a: 1, b: 2 }',
                    'option_2' => '{ a: 1 }',
                    'option_3' => '{ b: 2 }',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = 1;\nconst b = { a: 2 };\nconsole.log(b.a);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(0.1 + 0.2 === 0.3);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = { bar: 1 };\nObject.defineProperty(foo, "bar", { value: 2, writable: false });\nfoo.bar = 3;\nconsole.log(foo.bar);\n```',
                    'option_1' => '2',
                    'option_2' => '3',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = async () => { return 1; };\nfoo().then(console.log);\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => 'async function',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 1;\n(function() {\n  let x = 2;\n  console.log(x);\n})()\nconsole.log(x);\n```',
                    'option_1' => '2, 1',
                    'option_2' => '1, 2',
                    'option_3' => 'undefined, 1',
                    'option_4' => '2, undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.unshift(0);\nconsole.log(arr);\n```',
                    'option_1' => '[0, 1, 2, 3]',
                    'option_2' => '[1, 2, 3, 0]',
                    'option_3' => '[0, 1, 2]',
                    'option_4' => '[1, 2, 0]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == true);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = [1, 2, 3];\nconsole.log(a == b);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconsole.log(Object.keys(obj));\n```',
                    'option_1' => '["a"]',
                    'option_2' => 'undefined',
                    'option_3' => '["a", 1]',
                    'option_4' => '[]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(0 == []);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 1;\nfunction foo() {\n  x = 2;\n}\nfoo();\nconsole.log(x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("5" - 2);\n```',
                    'option_1' => '3',
                    'option_2' => '52',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(2 ** 3);\n```',
                    'option_1' => '8',
                    'option_2' => '6',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(({} + []) === "0");\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("Hello".charAt(0));\n```',
                    'option_1' => 'H',
                    'option_2' => 'e',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == true);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst fn = (x, y) => x + y;\nconsole.log(fn(1, 2));\n```',
                    'option_1' => '3',
                    'option_2' => 'undefined',
                    'option_3' => '12',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("5" + 5);\n```',
                    'option_1' => '55',
                    'option_2' => '10',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet a = { x: 1 };\nlet b = a;\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.push(arr[0]);\nconsole.log(arr);\n```',
                    'option_1' => '[1, 2, 3, 1]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => '[2, 3, 1]',
                    'option_4' => '[1, 1, 2, 3]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  let x = 1;\n  return function() { return x; };\n};\nconst bar = foo();\nconsole.log(bar());\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => 'NaN',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = { a: 1 };\nconst y = { b: 2 };\nconst z = { ...x, ...y };\nconsole.log(z);\n```',
                    'option_1' => '{ a: 1, b: 2 }',
                    'option_2' => '{ a: 1 }',
                    'option_3' => '{ b: 2 }',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof []);\n```',
                    'option_1' => 'object',
                    'option_2' => 'array',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = 1;\nconst b = { a: 2 };\nconsole.log(a + b.a);\n```',
                    'option_1' => '3',
                    'option_2' => '12',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr[10] = 10;\nconsole.log(arr.length);\n```',
                    'option_1' => '11',
                    'option_2' => '10',
                    'option_3' => '3',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(1 + "2" + "3");\n```',
                    'option_1' => '123',
                    'option_2' => '6',
                    'option_3' => '15',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(1 + + "1");\n```',
                    'option_1' => '2',
                    'option_2' => '11',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  var x = 1;\n  if (true) {\n    var x = 2;\n    console.log(x);\n  }\n  console.log(x);\n};\nfoo();\n```',
                    'option_1' => '2, 2',
                    'option_2' => '1, 2',
                    'option_3' => '2, 1',
                    'option_4' => 'undefined, 2',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = Object.create({ a: 1 });\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'null',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([2] == [2]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet a = 5;\nlet b = a++ + ++a;\nconsole.log(b);\n```',
                    'option_1' => '12',
                    'option_2' => '11',
                    'option_3' => '10',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  console.log(this);\n};\nfoo();\n```',
                    'option_1' => 'undefined',
                    'option_2' => 'window (global object)',
                    'option_3' => 'null',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log({} + []);\n```',
                    'option_1' => '[object Object]',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a;\nconst c = [...a];\nconsole.log(b === c);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = { a: 1 };\nconst y = { ...x };\nconsole.log(x === y);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\na.length = 0;\nconsole.log(a);\n```',
                    'option_1' => '[]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { ...a };\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("10" / 2);\n```',
                    'option_1' => '5',
                    'option_2' => '102',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == 1);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = [1, 2, 3];\nconsole.log(a === b);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconsole.log(Object.entries(obj));\n```',
                    'option_1' => '[["a", 1]]',
                    'option_2' => '[["a"]] ',
                    'option_3' => 'undefined',
                    'option_4' => '[]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  let x = 1;\n  if (true) {\n    let x = 2;\n    console.log(x);\n  }\n  console.log(x);\n};\nfoo();\n```',
                    'option_1' => '2, 1',
                    'option_2' => '1, 2',
                    'option_3' => '2, 2',
                    'option_4' => '1, 1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 5;\nconst y = (x = 10);\nconsole.log(y);\n```',
                    'option_1' => '10',
                    'option_2' => '5',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = 1;\nconst b = { a: 2 };\nconsole.log(a + b.a);\n```',
                    'option_1' => '3',
                    'option_2' => '12',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = { a: 1 };\nconst bar = { a: 1 };\nconsole.log(foo == bar);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = [...a];\nb.push(4);\nconsole.log(a);\n```',
                    'option_1' => '[1, 2, 3]',
                    'option_2' => '[1, 2, 3, 4]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof (function(){}));\n```',
                    'option_1' => 'function',
                    'option_2' => 'object',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(null == undefined);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = 5;\nconst y = x++;\nconsole.log(y);\n```',
                    'option_1' => '5',
                    'option_2' => '6',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = function(x) { return x * 2; };\nconsole.log(foo(2));\n```',
                    'option_1' => '4',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("a" + + "b");\n```',
                    'option_1' => 'aNaN',
                    'option_2' => 'a0',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([2] + [2]);\n```',
                    'option_1' => '22',
                    'option_2' => '[2,2]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == [1]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = Object.assign({}, a);\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = [1, 2, 3];\nconst y = x;\nconsole.log(x === y);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { ...a };\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { x: 1 };\nconsole.log(Object.keys(obj));\n```',
                    'option_1' => '["x"]',
                    'option_2' => '["x", "y"]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 2 };\nconst c = { ...a, ...b };\nconsole.log(c.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1, 2] == [1, 2]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = [1, 2, 3];\nconst y = [1, 2, 3];\nconsole.log(x == y);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log({} + []);\n```',
                    'option_1' => '[object Object]',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a.slice(1);\nconsole.log(b);\n```',
                    'option_1' => '[2, 3]',
                    'option_2' => '[1, 2]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a.splice(1, 1);\nconsole.log(b);\n```',
                    'option_1' => '[2]',
                    'option_2' => '[1, 2]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 2 };\nconst c = { ...a, ...b };\nconsole.log(c.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 2 };\nconst c = Object.assign({}, a, b);\nconsole.log(c.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof [1, 2, 3]);\n```',
                    'option_1' => 'object',
                    'option_2' => 'array',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a.reverse();\nconsole.log(a);\n```',
                    'option_1' => '[3, 2, 1]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = [1, 2, 3];\nconst y = x.concat([4, 5]);\nconsole.log(y);\n```',
                    'option_1' => '[1, 2, 3, 4, 5]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("1" + 1);\n```',
                    'option_1' => '11',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { ...a };\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([] == []);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log({} + []);\n```',
                    'option_1' => '[object Object]',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([] == ![]);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = a;\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == [1]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(Object.is(NaN, NaN));\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 1 };\nconsole.log(Object.is(a, b));\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 1 };\nconsole.log(a.x == b.x);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = Object.create(a);\nconsole.log(b.x);\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '0',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 1 };\nconsole.log(a === b);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = { x: 1 };\nconst bar = foo;\nbar.x = 2;\nconsole.log(foo.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(0 == "0");\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("0" == 0);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(false == 0);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(null == undefined);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $this->essays_javascript =
            [
                [
                    'question' => 'Để khai báo một biến trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let name = "John";[/code]',
                    'blanks' => 'let',
                ],
                [
                    'question' => 'Để định nghĩa một hàm trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]function greet() { return "Hello"; }[/code]',
                    'blanks' => 'function',
                ],
                [
                    'question' => 'Khi bạn muốn khai báo một hằng số trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]const PI = 3.14;[/code]',
                    'blanks' => 'const',
                ],
                [
                    'question' => 'Để kiểm tra điều kiện trong JavaScript, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if (x > 10) { console.log("x is greater than 10"); }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Khi bạn muốn lặp qua một mảng trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để kết hợp hai chuỗi trong JavaScript, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]let fullName = firstName + " " + lastName;[/code]',
                    'blanks' => ' + ',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên trong JavaScript, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let num = parseInt("42");[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Để tạo một đối tượng trong JavaScript, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let person = { name: "Alice", age: 25 };[/code]',
                    'blanks' => 'object literal',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của thuộc tính của một đối tượng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let name = person.name;[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Để kiểm tra xem một đối tượng có chứa thuộc tính hay không, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]if ("name" in person) { console.log("Name exists"); }[/code]',
                    'blanks' => 'in',
                ],
                [
                    'question' => 'Để xử lý lỗi trong JavaScript, bạn có thể sử dụng [blank_1]. Ví dụ: [code]try { throw new Error("Oops!"); } catch (e) { console.log(e.message); }[/code]',
                    'blanks' => 'try...catch',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng mới từ một mảng hiện tại, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newArray = oldArray.slice();[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Để chuyển đổi một số thành chuỗi trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Để kiểm tra kiểu dữ liệu của một biến, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]console.log(typeof name);[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để gọi một hàm mà không quan tâm đến giá trị trả về, bạn có thể sử dụng [blank_1]. Ví dụ: [code]console.log("Hello");[/code]',
                    'blanks' => 'console.log',
                ],
                [
                    'question' => 'Khi bạn muốn thực hiện một hành động sau một khoảng thời gian, bạn có thể sử dụng [blank_1]. Ví dụ: [code]setTimeout(() => { console.log("Hello"); }, 1000);[/code]',
                    'blanks' => 'setTimeout',
                ],
                [
                    'question' => 'Để tạo một mảng mới từ các giá trị đã cho, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let numbers = [1, 2, 3, 4];[/code]',
                    'blanks' => 'array literal',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra điều kiện nhiều lựa chọn, bạn có thể sử dụng [blank_1]. Ví dụ: [code]switch (day) { case "Monday": console.log("Start of the week"); break; }[/code]',
                    'blanks' => 'switch',
                ],
                [
                    'question' => 'Để lấy số lượng phần tử trong một mảng, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let length = array.length;[/code]',
                    'blanks' => 'length',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.push(5);[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Để loại bỏ phần tử cuối cùng khỏi mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua các phần tử của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để loại bỏ phần tử đầu tiên khỏi mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào đầu mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.unshift(0);[/code]',
                    'blanks' => 'unshift',
                ],
                [
                    'question' => 'Để lấy một phần của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let subArray = array.slice(1, 3);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Khi bạn cần thay đổi phần tử trong mảng tại một chỉ số cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.splice(2, 1, "newItem");[/code]',
                    'blanks' => 'splice',
                ],
                [
                    'question' => 'Để so sánh hai giá trị trong JavaScript, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]if (a === b) { console.log("Equal"); }[/code]',
                    'blanks' => '===',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]isNaN(value);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để lấy một phần của chuỗi trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let substring = str.substring(0, 5);[/code]',
                    'blanks' => 'substring',
                ],
                [
                    'question' => 'Khi bạn muốn thay thế một phần của chuỗi bằng một giá trị khác, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để tách một chuỗi thành mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let parts = str.split(" ");[/code]',
                    'blanks' => 'split',
                ],
                [
                    'question' => 'Khi bạn cần chuyển một chuỗi thành chữ hoa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let upperStr = str.toUpperCase();[/code]',
                    'blanks' => 'toUpperCase',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một đoạn văn bản cụ thể hay không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]str.includes("text");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng từ đầu và cuối chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để tạo một Promise trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let promise = new Promise((resolve, reject) => { resolve("Done"); });[/code]',
                    'blanks' => 'Promise',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi một Promise hoàn thành, bạn có thể sử dụng [blank_1]. Ví dụ: [code]promise.then(result => console.log(result));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện hành động nếu một Promise bị từ chối, bạn có thể sử dụng [blank_1]. Ví dụ: [code]promise.catch(error => console.log(error));[/code]',
                    'blanks' => 'catch',
                ],
                [
                    'question' => 'Để khởi tạo một đối tượng Date trong JavaScript, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let today = new Date();[/code]',
                    'blanks' => 'Date',
                ],
                [
                    'question' => 'Khi bạn muốn lấy ngày của tháng từ một đối tượng Date, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let day = today.getDate();[/code]',
                    'blanks' => 'getDate',
                ],
                [
                    'question' => 'Để lấy tháng từ đối tượng Date, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let month = today.getMonth();[/code]',
                    'blanks' => 'getMonth',
                ],
                [
                    'question' => 'Để tính toán thời gian hiện tại từ một đối tượng Date, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let time = today.getTime();[/code]',
                    'blanks' => 'getTime',
                ],
                [
                    'question' => 'Để định dạng một chuỗi ngày giờ trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let formattedDate = today.toLocaleDateString();[/code]',
                    'blanks' => 'toLocaleDateString',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng từ một số giá trị, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let numbers = Array(5).fill(0);[/code]',
                    'blanks' => 'Array.fill',
                ],
                [
                    'question' => 'Để tìm chỉ số của phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = array.indexOf("value");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một biến toàn cục trong một hàm, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]console.log(globalVar);[/code]',
                    'blanks' => 'global',
                ],
                [
                    'question' => 'Để xác định kiểu của một đối tượng trong JavaScript, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]console.log(typeof obj);[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng Array với các giá trị cụ thể, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let colors = new Array("red", "green", "blue");[/code]',
                    'blanks' => 'Array constructor',
                ],
                [
                    'question' => 'Để gán giá trị cho thuộc tính của một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]obj.property = "value";[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Để gọi một phương thức của đối tượng trong JavaScript, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]obj.method();[/code]',
                    'blanks' => 'method call',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng giá trị mặc định trong hàm, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function greet(name = "Guest") { return "Hello, " + name; }[/code]',
                    'blanks' => 'default parameters',
                ],
                [
                    'question' => 'Để tạo một hàm có thể chấp nhận số lượng đối số không xác định, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }[/code]',
                    'blanks' => 'rest parameters',
                ],
                [
                    'question' => 'Để khai báo một hàm mũi tên trong JavaScript, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const add = (a, b) => a + b;[/code]',
                    'blanks' => 'arrow function',
                ],
                [
                    'question' => 'Khi bạn muốn định nghĩa một hàm async trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]async function fetchData() { let response = await fetch("api/data"); }[/code]',
                    'blanks' => 'async',
                ],
                [
                    'question' => 'Để chờ một Promise trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]let result = await promise;[/code]',
                    'blanks' => 'await',
                ],
                [
                    'question' => 'Để tạo một hàm callback trong JavaScript, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function processCallback(callback) { callback(); }[/code]',
                    'blanks' => 'callback',
                ],
                [
                    'question' => 'Khi bạn muốn gọi một hàm sau một khoảng thời gian nhất định, bạn có thể sử dụng [blank_1]. Ví dụ: [code]setInterval(() => { console.log("Repeat"); }, 1000);[/code]',
                    'blanks' => 'setInterval',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng Date không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]console.log(date instanceof Date);[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn muốn chuyển một đối tượng thành JSON, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let json = JSON.stringify(obj);[/code]',
                    'blanks' => 'JSON.stringify',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi JSON thành đối tượng JavaScript, bạn sử dụng [blank_1]. Ví dụ: [code]let obj = JSON.parse(json);[/code]',
                    'blanks' => 'JSON.parse',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một tham số trong URL, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let params = new URLSearchParams(window.location.search); let id = params.get("id");[/code]',
                    'blanks' => 'URLSearchParams',
                ],
                [
                    'question' => 'Để kiểm tra một đối tượng có phải là mảng hay không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Array.isArray(arr);[/code]',
                    'blanks' => 'Array.isArray',
                ],
                [
                    'question' => 'Để xử lý các lỗi xảy ra trong ứng dụng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]try { /* code */ } catch (error) { /* handle error */ }[/code]',
                    'blanks' => 'try...catch',
                ],
                [
                    'question' => 'Để sử dụng một giá trị từ một Promise, bạn có thể sử dụng [blank_1]. Ví dụ: [code]promise.then(value => console.log(value));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động khi trang được tải xong, bạn có thể sử dụng sự kiện [blank_1]. Ví dụ: [code]window.onload = () => { console.log("Page loaded"); };[/code]',
                    'blanks' => 'onload',
                ],
                [
                    'question' => 'Để lấy giá trị của một thuộc tính CSS của một phần tử, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let color = window.getComputedStyle(element).color;[/code]',
                    'blanks' => 'getComputedStyle',
                ],
                [
                    'question' => 'Khi bạn cần lấy thông tin về phần tử DOM, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let nodeName = element.nodeName;[/code]',
                    'blanks' => 'nodeName',
                ],
                [
                    'question' => 'Để thêm một lớp CSS vào một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.classList.add("newClass");[/code]',
                    'blanks' => 'classList.add',
                ],
                [
                    'question' => 'Để loại bỏ một lớp CSS khỏi một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.classList.remove("oldClass");[/code]',
                    'blanks' => 'classList.remove',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi các thuộc tính CSS của phần tử thành một chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let cssText = element.style.cssText;[/code]',
                    'blanks' => 'cssText',
                ],
                [
                    'question' => 'Để thay đổi giá trị của thuộc tính CSS, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]element.style.backgroundColor = "blue";[/code]',
                    'blanks' => 'style.property',
                ],
                [
                    'question' => 'Khi bạn muốn thay đổi kích thước của phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]element.style.width = "100px";[/code]',
                    'blanks' => 'width',
                ],
                [
                    'question' => 'Để ẩn một phần tử trong JavaScript, bạn có thể thiết lập thuộc tính [blank_1]. Ví dụ: [code]element.style.display = "none";[/code]',
                    'blanks' => 'display',
                ],
                [
                    'question' => 'Khi bạn cần lấy thuộc tính của một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let attribute = element.getAttribute("id");[/code]',
                    'blanks' => 'getAttribute',
                ],
                [
                    'question' => 'Để đặt giá trị cho thuộc tính của một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.setAttribute("data-value", "123");[/code]',
                    'blanks' => 'setAttribute',
                ],
                [
                    'question' => 'Để lấy nội dung HTML của một phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let htmlContent = element.innerHTML;[/code]',
                    'blanks' => 'innerHTML',
                ],
                [
                    'question' => 'Để thay đổi nội dung văn bản của một phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]element.textContent = "New text";[/code]',
                    'blanks' => 'textContent',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ một phần tử khỏi DOM, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.remove();[/code]',
                    'blanks' => 'remove',
                ],
                [
                    'question' => 'Để thêm một phần tử con vào phần tử hiện tại, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]parentElement.appendChild(childElement);[/code]',
                    'blanks' => 'appendChild',
                ],
                [
                    'question' => 'Khi bạn muốn tạo một phần tử mới trong DOM, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newElement = document.createElement("div");[/code]',
                    'blanks' => 'createElement',
                ],
                [
                    'question' => 'Để thay đổi thuộc tính của phần tử trong DOM, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]element.style.color = "red";[/code]',
                    'blanks' => 'element.style.property',
                ],
                [
                    'question' => 'Để thêm một sự kiện vào phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.addEventListener("click", function() { console.log("Clicked"); });[/code]',
                    'blanks' => 'addEventListener',
                ],
                [
                    'question' => 'Khi bạn muốn lấy giá trị của một ô nhập liệu, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let value = inputElement.value;[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để thiết lập giá trị cho ô nhập liệu, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]inputElement.value = "new value";[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một ô nhập liệu có được chọn hay không, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let isChecked = checkboxElement.checked;[/code]',
                    'blanks' => 'checked',
                ],
                [
                    'question' => 'Để xử lý sự kiện khi nhấn phím trong ô nhập liệu, bạn có thể sử dụng sự kiện [blank_1]. Ví dụ: [code]inputElement.addEventListener("keydown", function(event) { console.log(event.key); });[/code]',
                    'blanks' => 'keydown',
                ],
                [
                    'question' => 'Để tạo một Promise và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng mới từ một lớp trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]let obj = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để tạo một mảng với các giá trị từ 1 đến 5, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let numbers = [1, 2, 3, 4, 5];[/code]',
                    'blanks' => 'array literal',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua một chuỗi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]for (let char of str) { console.log(char); }[/code]',
                    'blanks' => 'for...of',
                ],
                [
                    'question' => 'Để khai báo một biến với phạm vi khối trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]if (true) { let blockVar = 1; }[/code]',
                    'blanks' => 'let',
                ],
                [
                    'question' => 'Để kiểm tra xem một giá trị có phải là NaN hay không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]isNaN(value);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để lấy giá trị của tham số truy vấn trong URL, bạn có thể sử dụng đối tượng [blank_1]. Ví dụ: [code]let query = new URLSearchParams(window.location.search); let id = query.get("id");[/code]',
                    'blanks' => 'URLSearchParams',
                ],
                [
                    'question' => 'Để chuyển đổi một số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Khi bạn muốn xác định một giá trị trong một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = array.indexOf("value");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Để thêm một phần tử vào cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.push("newItem");[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Khi bạn muốn loại bỏ một phần tử từ cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Để lặp qua các phần tử của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của thuộc tính từ một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj["property"];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng đầu và cuối của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là số hay không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]Number.isFinite(value);[/code]',
                    'blanks' => 'Number.isFinite',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một thuộc tính CSS của phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let color = getComputedStyle(element).color;[/code]',
                    'blanks' => 'getComputedStyle',
                ],
                [
                    'question' => 'Để kiểm tra xem một giá trị có phải là đối tượng hay không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]typeof value === "object";[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để làm tròn một số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let roundedNum = Math.round(num);[/code]',
                    'blanks' => 'Math.round',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra kiểu dữ liệu của một biến, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]typeof variable;[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Để thêm một phần tử vào mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.push(item);[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ phần tử đầu tiên của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Để tìm kiếm một phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng mới với các phần tử đã được ánh xạ từ mảng gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let mappedArray = array.map(item => item * 2);[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để sắp xếp các phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.sort();[/code]',
                    'blanks' => 'sort',
                ],
                [
                    'question' => 'Để thực hiện một hành động cho mỗi phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để loại bỏ phần tử khỏi cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần tìm phần tử trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let foundItem = array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để kiểm tra nếu một mảng có chứa một giá trị, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = array.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Để chuyển đổi một mảng thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = array.join(", ");[/code]',
                    'blanks' => 'join',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động cho mỗi phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để chuyển đổi số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Khi bạn cần tìm phần tử đầu tiên trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let firstItem = array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để lấy phần tử đầu tiên của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let firstItem = array[0];[/code]',
                    'blanks' => 'index 0',
                ],
                [
                    'question' => 'Khi bạn cần xóa phần tử đầu tiên của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Để nối hai mảng thành một, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combinedArray = array1.concat(array2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Khi bạn cần lấy độ dài của mảng, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let length = array.length;[/code]',
                    'blanks' => 'length',
                ],
                [
                    'question' => 'Để tạo một mảng mới chỉ chứa các phần tử thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let filteredArray = array.filter(item => item > 2);[/code]',
                    'blanks' => 'filter',
                ],
                [
                    'question' => 'Để lấy phần tử cuối cùng của mảng, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let lastItem = array[array.length - 1];[/code]',
                    'blanks' => 'index -1',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ tất cả các phần tử khỏi mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.length = 0;[/code]',
                    'blanks' => 'length = 0',
                ],
                [
                    'question' => 'Để lấy một đoạn con của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let substring = str.substring(0, 5);[/code]',
                    'blanks' => 'substring',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua các ký tự của một chuỗi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]for (let char of str) { console.log(char); }[/code]',
                    'blanks' => 'for...of',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một giá trị cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần lấy chỉ số của một ký tự trong chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = str.indexOf("char");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Để thay đổi tất cả các ký tự của chuỗi thành chữ hoa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let upperStr = str.toUpperCase();[/code]',
                    'blanks' => 'toUpperCase',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi chuỗi thành chữ thường, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let lowerStr = str.toLowerCase();[/code]',
                    'blanks' => 'toLowerCase',
                ],
                [
                    'question' => 'Để cắt một chuỗi từ chỉ số bắt đầu đến chỉ số kết thúc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let slicedStr = str.slice(0, 5);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let isNumber = !isNaN(str);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để so sánh hai chuỗi trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let isEqual = str1.localeCompare(str2);[/code]',
                    'blanks' => 'localeCompare',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let isNumber = !isNaN(str);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành chữ hoa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let upperStr = str.toUpperCase();[/code]',
                    'blanks' => 'toUpperCase',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để tìm chỉ số của phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = array.indexOf("value");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Khi bạn cần tìm một phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let foundItem = array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Để chuyển đổi một số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có chứa một giá trị cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Để lấy độ dài của chuỗi, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let length = str.length;[/code]',
                    'blanks' => 'length',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng đầu và cuối chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let isNumber = !isNaN(str);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Khi bạn cần so sánh hai chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let isEqual = str1.localeCompare(str2);[/code]',
                    'blanks' => 'localeCompare',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần lấy một đoạn con của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let substring = str.substring(0, 5);[/code]',
                    'blanks' => 'substring',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một giá trị cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Để loại bỏ khoảng trắng đầu và cuối của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để kiểm tra nếu một đối tượng có một thuộc tính cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]if (obj.hasOwnProperty("property")) { /* ... */ }[/code]',
                    'blanks' => 'hasOwnProperty',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng một hàm trong JavaScript mà không cần khai báo biến trước, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function greet() { console.log("Hello"); }[/code]',
                    'blanks' => 'function declaration',
                ],
                [
                    'question' => 'Để kiểm tra nếu một đối tượng là một instance của một lớp, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]obj instanceof MyClass[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn cần lấy các giá trị của các thuộc tính trong một đối tượng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Object.values(obj)[/code]',
                    'blanks' => 'Object.values',
                ],
                [
                    'question' => 'Để chờ cho một Promise hoàn thành và lấy kết quả, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]async function fetchData() { let data = await fetch("url"); }[/code]',
                    'blanks' => 'await',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng mới từ một lớp, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để tạo một hàm có thể nhận số lượng tham số biến đổi, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function myFunction(...args) { /* ... */ }[/code]',
                    'blanks' => 'rest parameter',
                ],
                [
                    'question' => 'Để xử lý lỗi trong JavaScript, bạn có thể sử dụng khối [blank_1]. Ví dụ: [code]try { /* ... */ } catch (error) { /* ... */ }[/code]',
                    'blanks' => 'try-catch',
                ],
                [
                    'question' => 'Khi bạn cần làm việc với một đối tượng và muốn sao chép tất cả thuộc tính của nó, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let newObj = { ...oldObj };[/code]',
                    'blanks' => 'spread operator',
                ],
                [
                    'question' => 'Để thực hiện một hành động cho mỗi phần tử trong một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để lấy một phần tử của mảng từ cuối, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let last = arr.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần tìm kiếm phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let found = arr.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để chuyển đổi một mảng thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = arr.join(", ");[/code]',
                    'blanks' => 'join',
                ],
                [
                    'question' => 'Khi bạn cần làm tròn một số, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let rounded = Math.round(num);[/code]',
                    'blanks' => 'Math.round',
                ],
                [
                    'question' => 'Để loại bỏ phần tử cuối cùng của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Để thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một thuộc tính từ một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj["property"];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Khi bạn cần gán một giá trị mặc định cho tham số hàm, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function myFunction(param = "default") { /* ... */ }[/code]',
                    'blanks' => 'default parameter',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]typeof variable === "object";[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng đầu và cuối của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để tìm tất cả các phần tử trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let filtered = arr.filter(item => item > 2);[/code]',
                    'blanks' => 'filter',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào đầu mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.unshift(item);[/code]',
                    'blanks' => 'unshift',
                ],
                [
                    'question' => 'Để tạo một hàm tạm thời mà không cần đặt tên, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let add = (a, b) => a + b;[/code]',
                    'blanks' => 'arrow function',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng từ một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để tạo một mảng mới từ mảng gốc với các phần tử đã được ánh xạ, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let mappedArray = arr.map(item => item * 2);[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một đối tượng có phải là một mảng không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Array.isArray(obj);[/code]',
                    'blanks' => 'Array.isArray',
                ],
                [
                    'question' => 'Để lấy phần tử đầu tiên trong mảng, bạn có thể sử dụng chỉ số [blank_1]. Ví dụ: [code]let first = arr[0];[/code]',
                    'blanks' => 'index 0',
                ],
                [
                    'question' => 'Khi bạn cần tìm tất cả các phần tử trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let filtered = arr.filter(item => item > 2);[/code]',
                    'blanks' => 'filter',
                ],
                [
                    'question' => 'Để sắp xếp các phần tử trong mảng theo thứ tự tăng dần, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.sort((a, b) => a - b);[/code]',
                    'blanks' => 'sort',
                ],
                [
                    'question' => 'Khi bạn cần xóa phần tử đầu tiên trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có bắt đầu bằng một chuỗi con cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let startsWith = str.startsWith("prefix");[/code]',
                    'blanks' => 'startsWith',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một giá trị có phải là một số hay không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Number.isFinite(value);[/code]',
                    'blanks' => 'Number.isFinite',
                ],
                [
                    'question' => 'Để thay thế tất cả các sự xuất hiện của một chuỗi trong chuỗi gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replaceAll("old", "new");[/code]',
                    'blanks' => 'replaceAll',
                ],
                [
                    'question' => 'Để tính tổng các giá trị trong một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let sum = arr.reduce((acc, curr) => acc + curr, 0);[/code]',
                    'blanks' => 'reduce',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Để kiểm tra nếu một đối tượng có một thuộc tính cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]if (obj.hasOwnProperty("property")) { /* ... */ }[/code]',
                    'blanks' => 'hasOwnProperty',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua các phần tử của mảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]for (let item of arr) { console.log(item); }[/code]',
                    'blanks' => 'for...of',
                ],
                [
                    'question' => 'Để lấy phần tử cuối cùng của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let last = arr[arr.length - 1];[/code]',
                    'blanks' => 'index -1',
                ],
                [
                    'question' => 'Để lấy giá trị của thuộc tính trong đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj.property;[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để loại bỏ phần tử cuối cùng của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.push(item);[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần nối các chuỗi với nhau, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combined = str1.concat(str2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Để kiểm tra nếu một giá trị có phải là NaN không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let isNotANumber = Number.isNaN(value);[/code]',
                    'blanks' => 'Number.isNaN',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có kết thúc bằng một chuỗi con cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let endsWith = str.endsWith("suffix");[/code]',
                    'blanks' => 'endsWith',
                ],
                [
                    'question' => 'Để định nghĩa một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]class MyClass { constructor() { this.value = 42; } }[/code]',
                    'blanks' => 'class',
                ],
                [
                    'question' => 'Khi bạn cần xử lý lỗi trong một Promise, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.catch(error => console.error(error));[/code]',
                    'blanks' => 'catch',
                ],
                [
                    'question' => 'Để khai báo một hàm async trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]async function fetchData() { return "data"; }[/code]',
                    'blanks' => 'async',
                ],
                [
                    'question' => 'Để kiểm tra xem một giá trị có phải là một đối tượng không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]typeof value === "object" && value !== null;[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi Promise hoàn thành và kết quả đã có, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.then(result => console.log(result));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một hàm với giá trị mặc định cho tham số, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function greet(name = "World") { console.log("Hello, " + name); }[/code]',
                    'blanks' => 'default parameter',
                ],
                [
                    'question' => 'Để chuyển đổi một mảng thành một đối tượng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let obj = Object.fromEntries(entries);[/code]',
                    'blanks' => 'Object.fromEntries',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng các thuộc tính hoặc phương thức của một đối tượng cha trong lớp con, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]super.method();[/code]',
                    'blanks' => 'super',
                ],
                [
                    'question' => 'Để tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).finally(() => console.log("Completed"));[/code]',
                    'blanks' => 'finally',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là một số nguyên không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Number.isInteger(value);[/code]',
                    'blanks' => 'Number.isInteger',
                ],
                [
                    'question' => 'Để thêm thuộc tính vào một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]obj["newProp"] = "value";[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Khi bạn cần ánh xạ các phần tử của một mảng thành các giá trị mới, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let squared = arr.map(x => x * x);[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để xác định nếu một giá trị là một đối tượng rỗng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Object.keys(obj).length === 0;[/code]',
                    'blanks' => 'Object.keys',
                ],
                [
                    'question' => 'Khi bạn cần truyền tham số vào hàm mà không biết số lượng tham số trước, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }[/code]',
                    'blanks' => 'rest parameter',
                ],
                [
                    'question' => 'Để gán giá trị mặc định cho một thuộc tính khi nó không có giá trị, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let { a = 1, b = 2 } = obj;[/code]',
                    'blanks' => 'destructuring',
                ],
                [
                    'question' => 'Để lặp qua các thuộc tính của đối tượng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]for (let key in obj) { console.log(key, obj[key]); }[/code]',
                    'blanks' => 'for...in',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng mới từ một mảng gốc bằng cách lấy một phần của nó, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let slice = arr.slice(1, 3);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Để sử dụng một hàm chỉ có thể thực thi một lần trong một chuỗi các thao tác, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let once = _.once(func);[/code]',
                    'blanks' => '_.once (Lodash)',
                ],
                [
                    'question' => 'Để chuyển đổi đối tượng thành một mảng các cặp key-value, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let entries = Object.entries(obj);[/code]',
                    'blanks' => 'Object.entries',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là một function không, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]typeof value === "function";[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để hoán đổi giá trị của hai biến, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let [a, b] = [b, a];[/code]',
                    'blanks' => 'array destructuring',
                ],
                [
                    'question' => 'Khi bạn cần tạo một iterator cho một đối tượng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let iterator = arr[Symbol.iterator]();[/code]',
                    'blanks' => 'Symbol.iterator',
                ],
                [
                    'question' => 'Để xác định xem một đối tượng có phải là instance của một lớp không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]obj instanceof MyClass[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn cần thay thế tất cả sự xuất hiện của một chuỗi con trong chuỗi gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace(/old/g, "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để chuyển đổi một đối tượng thành chuỗi JSON, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let jsonStr = JSON.stringify(obj);[/code]',
                    'blanks' => 'JSON.stringify',
                ],
                [
                    'question' => 'Khi bạn cần lấy phần tử ngẫu nhiên từ mảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let random = arr[Math.floor(Math.random() * arr.length)];[/code]',
                    'blanks' => 'Math.random',
                ],
                [
                    'question' => 'Để đợi một Promise hoàn thành và sau đó tiếp tục xử lý, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.finally(() => console.log("Done"));[/code]',
                    'blanks' => 'finally',
                ],
                [
                    'question' => 'Khi bạn cần lấy các phần tử đầu tiên của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let firstItems = arr.slice(0, 3);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Để loại bỏ một phần tử từ một mảng tại vị trí cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.splice(index, 1);[/code]',
                    'blanks' => 'splice',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng từ các cặp key-value, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let obj = Object.fromEntries(entries);[/code]',
                    'blanks' => 'Object.fromEntries',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi thành một chuỗi duy nhất, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combined = str1.concat(str2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Để kiểm tra nếu một chuỗi có chứa một chuỗi con cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("sub");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị thuộc tính từ một đối tượng với cú pháp tính toán, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj[key];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để tạo một Promise và thực hiện hành động khi Promise được giải quyết, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("value"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là NaN không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Number.isNaN(value);[/code]',
                    'blanks' => 'Number.isNaN',
                ],
                [
                    'question' => 'Để kiểm tra xem một đối tượng có chứa thuộc tính cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]obj.hasOwnProperty("property");[/code]',
                    'blanks' => 'hasOwnProperty',
                ],
                [
                    'question' => 'Để biến đổi các phần tử trong mảng thành một mảng mới, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let uppercased = arr.map(str => str.toUpperCase());[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của thuộc tính trong đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj.property;[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có kết thúc bằng một chuỗi con không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let endsWith = str.endsWith("suffix");[/code]',
                    'blanks' => 'endsWith',
                ],
                [
                    'question' => 'Để tạo một đối tượng mới từ một đối tượng gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newObj = Object.create(proto);[/code]',
                    'blanks' => 'Object.create',
                ],
                [
                    'question' => 'Khi bạn cần kết hợp nhiều mảng thành một mảng duy nhất, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combined = arr1.concat(arr2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Để kiểm tra nếu một chuỗi có chứa một chuỗi con cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("sub");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần làm việc với các phần tử trong mảng và thực hiện một hành động cho mỗi phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để tạo một hàm với một số lượng tham số không xác định, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }[/code]',
                    'blanks' => 'rest parameter',
                ],
                [
                    'question' => 'Để thay đổi giá trị của một thuộc tính trong đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]obj.property = "newValue";[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động sau khi Promise đã hoàn thành, bất kể kết quả là thành công hay lỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.finally(() => console.log("Completed"));[/code]',
                    'blanks' => 'finally',
                ],
                [
                    'question' => 'Để kiểm tra xem một đối tượng có phải là một instance của một lớp không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]obj instanceof MyClass[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả các thuộc tính của đối tượng dưới dạng mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let keys = Object.keys(obj);[/code]',
                    'blanks' => 'Object.keys',
                ],
                [
                    'question' => 'Để lấy tất cả các giá trị của đối tượng dưới dạng mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let values = Object.values(obj);[/code]',
                    'blanks' => 'Object.values',
                ],
                [
                    'question' => 'Khi bạn cần xóa thuộc tính từ một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]delete obj.property;[/code]',
                    'blanks' => 'delete',
                ],
                [
                    'question' => 'Để lấy giá trị của thuộc tính từ đối tượng với cú pháp tính toán, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let value = obj[key];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để xác định nếu một đối tượng có một phương thức cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]if (typeof obj.method === "function") { /* ... */ }[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ các cặp key-value, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let obj = Object.fromEntries(entries);[/code]',
                    'blanks' => 'Object.fromEntries',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng thuộc tính của đối tượng cha trong lớp con, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]super.method();[/code]',
                    'blanks' => 'super',
                ],
            ];
    }
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        //
    }
}
