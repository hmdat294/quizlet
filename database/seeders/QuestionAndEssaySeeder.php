<?php

namespace Database\Seeders;

use App\Models\Question;
use App\Models\Essay;
use App\Models\Quiz;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class QuestionAndEssaySeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {

        $questions_html =
            [
                [
                    'question' => 'Từ HTML là từ viết tắt của từ nào?',
                    'option_1' => 'Hyperlinks and Text Markup Language',
                    'option_2' => 'Home Tool Markup Language',
                    'option_3' => 'Hyper Text Markup Language',
                    'option_4' => 'Tất cả đều sai',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo đoạn văn bản?',
                    'option_1' => '<p>',
                    'option_2' => '<a>',
                    'option_3' => '<div>',
                    'option_4' => '<span>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo liên kết?',
                    'option_1' => '<link>',
                    'option_2' => '<a>',
                    'option_3' => '<href>',
                    'option_4' => '<url>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ nào được sử dụng để chèn hình ảnh vào HTML?',
                    'option_1' => '<img>',
                    'option_2' => '<picture>',
                    'option_3' => '<src>',
                    'option_4' => '<figure>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo tiêu đề cấp 1?',
                    'option_1' => '<head>',
                    'option_2' => '<header>',
                    'option_3' => '<h1>',
                    'option_4' => '<title>',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào được dùng để đặt tên cho một thẻ HTML?',
                    'option_1' => 'class',
                    'option_2' => 'id',
                    'option_3' => 'name',
                    'option_4' => 'tag',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo danh sách không có thứ tự?',
                    'option_1' => '<ol>',
                    'option_2' => '<ul>',
                    'option_3' => '<li>',
                    'option_4' => '<dl>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo danh sách có thứ tự?',
                    'option_1' => '<ol>',
                    'option_2' => '<ul>',
                    'option_3' => '<li>',
                    'option_4' => '<dl>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một ô trong bảng?',
                    'option_1' => '<cell>',
                    'option_2' => '<td>',
                    'option_3' => '<tr>',
                    'option_4' => '<table>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một hàng trong bảng?',
                    'option_1' => '<tr>',
                    'option_2' => '<td>',
                    'option_3' => '<table>',
                    'option_4' => '<row>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để định nghĩa URL của hình ảnh trong thẻ <img>?',
                    'option_1' => 'src',
                    'option_2' => 'href',
                    'option_3' => 'url',
                    'option_4' => 'link',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo form?',
                    'option_1' => '<form>',
                    'option_2' => '<input>',
                    'option_3' => '<button>',
                    'option_4' => '<label>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào được dùng để định nghĩa đường dẫn của liên kết?',
                    'option_1' => 'src',
                    'option_2' => 'href',
                    'option_3' => 'url',
                    'option_4' => 'link',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một đoạn trích dẫn dài?',
                    'option_1' => '<blockquote>',
                    'option_2' => '<quote>',
                    'option_3' => '<cite>',
                    'option_4' => '<q>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để nhấn mạnh văn bản?',
                    'option_1' => '<strong>',
                    'option_2' => '<em>',
                    'option_3' => '<i>',
                    'option_4' => '<b>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một checkbox trong form?',
                    'option_1' => '<input type="checkbox">',
                    'option_2' => '<input type="radio">',
                    'option_3' => '<input type="text">',
                    'option_4' => '<input type="button">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một nút bấm?',
                    'option_1' => '<button>',
                    'option_2' => '<input>',
                    'option_3' => '<form>',
                    'option_4' => '<label>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một trường nhập văn bản trong form?',
                    'option_1' => '<input type="text">',
                    'option_2' => '<input type="password">',
                    'option_3' => '<input type="submit">',
                    'option_4' => '<input type="checkbox">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một đoạn trích dẫn ngắn?',
                    'option_1' => '<quote>',
                    'option_2' => '<q>',
                    'option_3' => '<cite>',
                    'option_4' => '<blockquote>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để định nghĩa phần đầu của tài liệu?',
                    'option_1' => '<head>',
                    'option_2' => '<header>',
                    'option_3' => '<h1>',
                    'option_4' => '<title>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để định nghĩa phần nội dung chính của tài liệu?',
                    'option_1' => '<main>',
                    'option_2' => '<body>',
                    'option_3' => '<content>',
                    'option_4' => '<section>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một danh sách định nghĩa?',
                    'option_1' => '<dl>',
                    'option_2' => '<ol>',
                    'option_3' => '<ul>',
                    'option_4' => '<li>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một mục trong danh sách định nghĩa?',
                    'option_1' => '<dt>',
                    'option_2' => '<dd>',
                    'option_3' => '<li>',
                    'option_4' => '<dl>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một mục định nghĩa trong danh sách định nghĩa?',
                    'option_1' => '<dl>',
                    'option_2' => '<dd>',
                    'option_3' => '<dt>',
                    'option_4' => '<li>',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng chứa div?',
                    'option_1' => '<div>',
                    'option_2' => '<span>',
                    'option_3' => '<section>',
                    'option_4' => '<article>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một đoạn ngắn inline?',
                    'option_1' => '<span>',
                    'option_2' => '<div>',
                    'option_3' => '<section>',
                    'option_4' => '<article>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để xác định chiều rộng của một thẻ HTML?',
                    'option_1' => 'height',
                    'option_2' => 'width',
                    'option_3' => 'size',
                    'option_4' => 'length',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để xác định chiều cao của một thẻ HTML?',
                    'option_1' => 'width',
                    'option_2' => 'height',
                    'option_3' => 'size',
                    'option_4' => 'length',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một liên kết điều hướng?',
                    'option_1' => '<a>',
                    'option_2' => '<link>',
                    'option_3' => '<nav>',
                    'option_4' => '<ul>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một bảng?',
                    'option_1' => '<table>',
                    'option_2' => '<tr>',
                    'option_3' => '<td>',
                    'option_4' => '<th>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để xác định nguồn gốc của một hình ảnh?',
                    'option_1' => 'href',
                    'option_2' => 'src',
                    'option_3' => 'alt',
                    'option_4' => 'link',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để định nghĩa văn bản thay thế cho một hình ảnh?',
                    'option_1' => 'src',
                    'option_2' => 'alt',
                    'option_3' => 'href',
                    'option_4' => 'title',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một danh sách định nghĩa?',
                    'option_1' => '<dl>',
                    'option_2' => '<ol>',
                    'option_3' => '<ul>',
                    'option_4' => '<li>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo phần chân của trang?',
                    'option_1' => '<footer>',
                    'option_2' => '<foot>',
                    'option_3' => '<bottom>',
                    'option_4' => '<end>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo phần điều hướng của trang?',
                    'option_1' => '<nav>',
                    'option_2' => '<navigate>',
                    'option_3' => '<menu>',
                    'option_4' => '<list>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo phần thân của tài liệu?',
                    'option_1' => '<body>',
                    'option_2' => '<main>',
                    'option_3' => '<content>',
                    'option_4' => '<section>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo phần đầu của tài liệu?',
                    'option_1' => '<head>',
                    'option_2' => '<header>',
                    'option_3' => '<h1>',
                    'option_4' => '<title>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để xác định màu nền của một thẻ HTML?',
                    'option_1' => 'color',
                    'option_2' => 'background-color',
                    'option_3' => 'bgcolor',
                    'option_4' => 'style',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một đoạn văn?',
                    'option_1' => '<p>',
                    'option_2' => '<div>',
                    'option_3' => '<span>',
                    'option_4' => '<section>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để nhúng một tài liệu HTML vào một tài liệu HTML khác?',
                    'option_1' => '<iframe>',
                    'option_2' => '<frame>',
                    'option_3' => '<embed>',
                    'option_4' => '<object>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định metadata cho một tài liệu?',
                    'option_1' => '<meta>',
                    'option_2' => '<link>',
                    'option_3' => '<script>',
                    'option_4' => '<style>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để nhúng video vào trang web?',
                    'option_1' => '<video>',
                    'option_2' => '<media>',
                    'option_3' => '<embed>',
                    'option_4' => '<object>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để nhúng âm thanh vào trang web?',
                    'option_1' => '<audio>',
                    'option_2' => '<sound>',
                    'option_3' => '<embed>',
                    'option_4' => '<object>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định một tập hợp các chỉ dẫn?',
                    'option_1' => '<datalist>',
                    'option_2' => '<select>',
                    'option_3' => '<input>',
                    'option_4' => '<option>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <form> để gửi dữ liệu theo phương thức POST?',
                    'option_1' => 'method="send"',
                    'option_2' => 'method="post"',
                    'option_3' => 'type="post"',
                    'option_4' => 'send="post"',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <form> để xác định URL đích nhận dữ liệu?',
                    'option_1' => 'action',
                    'option_2' => 'method',
                    'option_3' => 'target',
                    'option_4' => 'enctype',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để định nghĩa các thông tin thêm về một phần tử khi người dùng di chuột qua?',
                    'option_1' => 'title',
                    'option_2' => 'tooltip',
                    'option_3' => 'hover',
                    'option_4' => 'popup',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng chọn nhiều dòng?',
                    'option_1' => '<textarea>',
                    'option_2' => '<input type="textarea">',
                    'option_3' => '<input type="text">',
                    'option_4' => '<select>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <input> để tạo một trường nhập liệu ẩn?',
                    'option_1' => 'type="hidden"',
                    'option_2' => 'type="invisible"',
                    'option_3' => 'hidden="true"',
                    'option_4' => 'visible="false"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để nhúng một tệp SVG vào tài liệu HTML?',
                    'option_1' => '<svg>',
                    'option_2' => '<img>',
                    'option_3' => '<object>',
                    'option_4' => '<embed>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một thực đơn ngữ cảnh khi nhấp chuột phải?',
                    'option_1' => '<contextmenu>',
                    'option_2' => '<menu>',
                    'option_3' => '<rightclick>',
                    'option_4' => '<dropdown>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để nhúng một tài liệu PDF vào trang web?',
                    'option_1' => '<embed>',
                    'option_2' => '<object>',
                    'option_3' => '<iframe>',
                    'option_4' => '<pdf>',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <input> để chấp nhận nhiều tệp?',
                    'option_1' => 'multiple',
                    'option_2' => 'files',
                    'option_3' => 'multifile',
                    'option_4' => 'many',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng nhập liệu màu sắc?',
                    'option_1' => '<input type="color">',
                    'option_2' => '<input type="palette">',
                    'option_3' => '<input type="rgb">',
                    'option_4' => '<input type="hue">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng nhập liệu ngày tháng?',
                    'option_1' => '<input type="date">',
                    'option_2' => '<input type="datetime">',
                    'option_3' => '<input type="calendar">',
                    'option_4' => '<input type="time">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng nhập liệu số?',
                    'option_1' => '<input type="number">',
                    'option_2' => '<input type="numeric">',
                    'option_3' => '<input type="value">',
                    'option_4' => '<input type="digit">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng nhập liệu phạm vi?',
                    'option_1' => '<input type="range">',
                    'option_2' => '<input type="slider">',
                    'option_3' => '<input type="scale">',
                    'option_4' => '<input type="bar">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng nhập liệu email?',
                    'option_1' => '<input type="email">',
                    'option_2' => '<input type="mail">',
                    'option_3' => '<input type="address">',
                    'option_4' => '<input type="contact">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <form> để mã hóa dữ liệu khi gửi?',
                    'option_1' => 'enctype',
                    'option_2' => 'encoding',
                    'option_3' => 'encrypt',
                    'option_4' => 'codetype',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <img> để xác định văn bản thay thế khi hình ảnh không tải được?',
                    'option_1' => 'alt',
                    'option_2' => 'title',
                    'option_3' => 'src',
                    'option_4' => 'fallback',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định một kết quả đo lường (ví dụ: nhiệt độ, tốc độ, v.v.)?',
                    'option_1' => '<meter>',
                    'option_2' => '<gauge>',
                    'option_3' => '<scale>',
                    'option_4' => '<measure>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <form> để ngăn chặn việc gửi tự động khi người dùng nhấn Enter?',
                    'option_1' => 'novalidate',
                    'option_2' => 'onsubmit',
                    'option_3' => 'action',
                    'option_4' => 'method',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định thông tin chi tiết mà người dùng có thể xem hoặc ẩn?',
                    'option_1' => '<details>',
                    'option_2' => '<summary>',
                    'option_3' => '<info>',
                    'option_4' => '<tooltip>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định tiêu đề cho phần tử <details>?',
                    'option_1' => '<summary>',
                    'option_2' => '<details>',
                    'option_3' => '<title>',
                    'option_4' => '<caption>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định kết quả đo lường (ví dụ: thanh tiến trình)?',
                    'option_1' => '<progress>',
                    'option_2' => '<meter>',
                    'option_3' => '<range>',
                    'option_4' => '<gauge>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để nhúng nội dung bên ngoài như video hoặc flash vào trang web?',
                    'option_1' => '<embed>',
                    'option_2' => '<object>',
                    'option_3' => '<iframe>',
                    'option_4' => '<media>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <form> để xác định loại mã hóa dữ liệu khi gửi qua phương thức POST?',
                    'option_1' => 'enctype',
                    'option_2' => 'encoding',
                    'option_3' => 'method',
                    'option_4' => 'action',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để xác định một phần tử điều khiển mà người dùng có thể tương tác?',
                    'option_1' => '<input>',
                    'option_2' => '<form>',
                    'option_3' => '<button>',
                    'option_4' => '<label>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <form> để xác định URL nơi dữ liệu sẽ được gửi?',
                    'option_1' => 'action',
                    'option_2' => 'method',
                    'option_3' => 'enctype',
                    'option_4' => 'target',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một vùng chọn ngày và giờ?',
                    'option_1' => '<input type="datetime-local">',
                    'option_2' => '<input type="date">',
                    'option_3' => '<input type="time">',
                    'option_4' => '<input type="datetime">',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <img> để xác định tệp hình ảnh mà phải hiển thị khi hình ảnh không tải được?',
                    'option_1' => 'alt',
                    'option_2' => 'src',
                    'option_3' => 'onerror',
                    'option_4' => 'fallback',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau đây có chức năng gì?<br><code>&lt;input type="text" name="username" required pattern="[A-Za-z0-9]{5,10}"&gt;</code>',
                    'option_1' => 'Yêu cầu người dùng nhập tên đăng nhập từ 5 đến 10 ký tự chữ cái hoặc số.',
                    'option_2' => 'Yêu cầu người dùng nhập tên đăng nhập ít nhất 5 ký tự và nhiều nhất 10 ký tự bất kỳ.',
                    'option_3' => 'Yêu cầu người dùng nhập tên đăng nhập chỉ gồm các ký tự chữ cái hoặc số.',
                    'option_4' => 'Yêu cầu người dùng nhập tên đăng nhập từ 5 đến 10 ký tự chữ cái hoặc số, và không bắt buộc.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;link rel="preload" href="style.css" as="style"&gt;</code>',
                    'option_1' => 'Tải trước tệp style.css để cải thiện tốc độ tải trang.',
                    'option_2' => 'Chỉ định rằng style.css là tệp CSS chính của trang.',
                    'option_3' => 'Chỉ định rằng style.css sẽ được tải sau khi trang hoàn tất tải.',
                    'option_4' => 'Không có tác dụng gì.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để tạo một mẫu biểu mẫu định nghĩa?',
                    'option_1' => '<template>',
                    'option_2' => '<form>',
                    'option_3' => '<pattern>',
                    'option_4' => '<fieldset>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau sẽ hiển thị gì?<br><code>&lt;style&gt;div { display: none; }&lt;/style&gt;&lt;div&gt;Hello&lt;/div&gt;</code>',
                    'option_1' => 'Không hiển thị gì cả.',
                    'option_2' => 'Hiển thị chữ "Hello".',
                    'option_3' => 'Hiển thị chữ "div".',
                    'option_4' => 'Hiển thị chữ "Hello" trong thẻ div.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <a> để mở liên kết trong một cửa sổ mới hoặc tab mới?',
                    'option_1' => 'target="_blank"',
                    'option_2' => 'target="_new"',
                    'option_3' => 'window="new"',
                    'option_4' => 'rel="noopener"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Công dụng của thuộc tính <code>contenteditable</code> trong thẻ HTML là gì?',
                    'option_1' => 'Cho phép nội dung của phần tử có thể chỉnh sửa.',
                    'option_2' => 'Chỉ định nội dung của phần tử có thể được sao chép.',
                    'option_3' => 'Chỉ định nội dung của phần tử không thể chỉnh sửa.',
                    'option_4' => 'Cho phép nội dung của phần tử có thể được xem.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có tác dụng gì?<br><code>&lt;!DOCTYPE html&gt;</code>',
                    'option_1' => 'Xác định tài liệu là tài liệu HTML5.',
                    'option_2' => 'Xác định tài liệu là tài liệu HTML4.',
                    'option_3' => 'Không có tác dụng gì.',
                    'option_4' => 'Xác định tài liệu là tài liệu XML.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính <code>srcset</code> của thẻ <code>&lt;img&gt;</code> có chức năng gì?',
                    'option_1' => 'Chỉ định danh sách các tệp hình ảnh có độ phân giải khác nhau để trình duyệt có thể chọn tùy theo kích thước màn hình.',
                    'option_2' => 'Chỉ định tệp hình ảnh thay thế khi tệp hình ảnh chính không tải được.',
                    'option_3' => 'Chỉ định danh sách các tệp hình ảnh để tải đồng thời.',
                    'option_4' => 'Chỉ định tệp video liên quan đến tệp hình ảnh.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;div style="position: absolute; left: 50%; top: 50%;"&gt;&lt;/div&gt;</code>',
                    'option_1' => 'Đặt phần tử div ở giữa trang.',
                    'option_2' => 'Đặt phần tử div ở góc trên bên trái trang.',
                    'option_3' => 'Đặt phần tử div ở góc dưới bên phải trang.',
                    'option_4' => 'Không có tác dụng gì.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để định nghĩa một vùng có thể kéo và thả?',
                    'option_1' => '<drag>',
                    'option_2' => '<draggable>',
                    'option_3' => '<drop>',
                    'option_4' => '<div draggable="true">',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào của thẻ <video> để chỉ định tệp video sẽ tự động phát khi trang được tải?',
                    'option_1' => 'autoplay',
                    'option_2' => 'controls',
                    'option_3' => 'loop',
                    'option_4' => 'muted',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để xác định một tập hợp các tùy chọn có thể được lựa chọn trong một hộp lựa chọn?',
                    'option_1' => '<optgroup>',
                    'option_2' => '<option>',
                    'option_3' => '<select>',
                    'option_4' => '<datalist>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;meta charset="UTF-8"&gt;</code>',
                    'option_1' => 'Đặt bộ ký tự của tài liệu là UTF-8.',
                    'option_2' => 'Đặt ngôn ngữ của tài liệu là UTF-8.',
                    'option_3' => 'Không có tác dụng gì.',
                    'option_4' => 'Đặt định dạng của tài liệu là UTF-8.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào được sử dụng để xác định một chú thích cho bảng?',
                    'option_1' => '<caption>',
                    'option_2' => '<summary>',
                    'option_3' => '<legend>',
                    'option_4' => '<title>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có tác dụng gì?<br><code>&lt;div contenteditable="true"&gt;&lt;/div&gt;</code>',
                    'option_1' => 'Cho phép nội dung của thẻ div có thể chỉnh sửa.',
                    'option_2' => 'Cho phép nội dung của thẻ div có thể sao chép.',
                    'option_3' => 'Không có tác dụng gì.',
                    'option_4' => 'Cho phép nội dung của thẻ div không thể chỉnh sửa.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính <code>defer</code> của thẻ <script> có chức năng gì?',
                    'option_1' => 'Chỉ định rằng kịch bản sẽ được thực thi sau khi tài liệu đã được phân tích cú pháp hoàn toàn.',
                    'option_2' => 'Chỉ định rằng kịch bản sẽ được thực thi ngay khi nó được tải.',
                    'option_3' => 'Chỉ định rằng kịch bản sẽ được tải không đồng bộ.',
                    'option_4' => 'Chỉ định rằng kịch bản sẽ được thực thi trước khi tài liệu được phân tích cú pháp.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</code>',
                    'option_1' => 'Đặt tỷ lệ ban đầu của trang để phù hợp với kích thước thiết bị.',
                    'option_2' => 'Đặt tỷ lệ ban đầu của trang để phù hợp với kích thước cửa sổ trình duyệt.',
                    'option_3' => 'Đặt bộ ký tự của trang là UTF-8.',
                    'option_4' => 'Không có tác dụng gì.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có tác dụng gì?<br><code>&lt;iframe src="page.html" width="600" height="400"&gt;&lt;/iframe&gt;</code>',
                    'option_1' => 'Nhúng tệp page.html vào trong một khung có chiều rộng 600 và chiều cao 400.',
                    'option_2' => 'Nhúng tệp page.html vào trong một cửa sổ trình duyệt mới có chiều rộng 600 và chiều cao 400.',
                    'option_3' => 'Nhúng tệp page.html vào trong một khung có chiều rộng và chiều cao mặc định.',
                    'option_4' => 'Nhúng tệp page.html vào trong một thẻ div có chiều rộng 600 và chiều cao 400.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính <code>integrity</code> của thẻ <script> có chức năng gì?',
                    'option_1' => 'Đảm bảo rằng tệp kịch bản không bị thay đổi bằng cách kiểm tra giá trị băm của nó.',
                    'option_2' => 'Chỉ định rằng tệp kịch bản sẽ được tải không đồng bộ.',
                    'option_3' => 'Chỉ định rằng tệp kịch bản sẽ được thực thi sau khi tài liệu đã được phân tích cú pháp hoàn toàn.',
                    'option_4' => 'Chỉ định rằng tệp kịch bản sẽ được thực thi ngay khi nó được tải.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;style&gt; p { color: red; } &lt;/style&gt;&lt;p&gt;Hello&lt;/p&gt;</code>',
                    'option_1' => 'Hiển thị chữ "Hello" với màu đỏ.',
                    'option_2' => 'Hiển thị chữ "Hello" với màu đen.',
                    'option_3' => 'Hiển thị chữ "Hello" với màu mặc định.',
                    'option_4' => 'Không có tác dụng gì.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để xác định một thẻ bài viết độc lập?',
                    'option_1' => '<article>',
                    'option_2' => '<section>',
                    'option_3' => '<aside>',
                    'option_4' => '<header>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có tác dụng gì?<br><code>&lt;span style="display: block;"&gt;Hello&lt;/span&gt;</code>',
                    'option_1' => 'Hiển thị chữ "Hello" trên một dòng riêng biệt.',
                    'option_2' => 'Hiển thị chữ "Hello" trên cùng một dòng với các phần tử khác.',
                    'option_3' => 'Không hiển thị chữ "Hello".',
                    'option_4' => 'Hiển thị chữ "Hello" với màu mặc định.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính <code>rel</code> của thẻ <link> có chức năng gì?',
                    'option_1' => 'Chỉ định mối quan hệ giữa tài liệu hiện tại và tài liệu được liên kết.',
                    'option_2' => 'Chỉ định tệp liên kết sẽ được tải không đồng bộ.',
                    'option_3' => 'Chỉ định tệp liên kết sẽ được thực thi sau khi tài liệu đã được phân tích cú pháp hoàn toàn.',
                    'option_4' => 'Chỉ định tệp liên kết sẽ được thực thi ngay khi nó được tải.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có tác dụng gì?<br><code>&lt;nav&gt;&lt;a href="index.html"&gt;Home&lt;/a&gt;&lt;/nav&gt;</code>',
                    'option_1' => 'Tạo một liên kết "Home" bên trong một thẻ điều hướng.',
                    'option_2' => 'Tạo một liên kết "Home" bên trong một thẻ div.',
                    'option_3' => 'Tạo một liên kết "Home" bên trong một thẻ header.',
                    'option_4' => 'Tạo một liên kết "Home" bên trong một thẻ footer.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính <code>crossorigin</code> của thẻ <script> có chức năng gì?',
                    'option_1' => 'Chỉ định cách xử lý các yêu cầu nguồn gốc chéo cho tệp kịch bản.',
                    'option_2' => 'Chỉ định tệp kịch bản sẽ được tải không đồng bộ.',
                    'option_3' => 'Chỉ định tệp kịch bản sẽ được thực thi sau khi tài liệu đã được phân tích cú pháp hoàn toàn.',
                    'option_4' => 'Chỉ định tệp kịch bản sẽ được thực thi ngay khi nó được tải.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;footer&gt;Footer content&lt;/footer&gt;</code>',
                    'option_1' => 'Tạo một phần tử footer chứa nội dung "Footer content".',
                    'option_2' => 'Tạo một phần tử header chứa nội dung "Footer content".',
                    'option_3' => 'Tạo một phần tử div chứa nội dung "Footer content".',
                    'option_4' => 'Tạo một phần tử aside chứa nội dung "Footer content".',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để định nghĩa một phần tử chứa thông tin phụ thuộc vào ngữ cảnh?',
                    'option_1' => '<aside>',
                    'option_2' => '<section>',
                    'option_3' => '<footer>',
                    'option_4' => '<header>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau có chức năng gì?<br><code>&lt;style&gt; .hidden { display: none; } &lt;/style&gt;&lt;div class="hidden"&gt;Hidden content&lt;/div&gt;</code>',
                    'option_1' => 'Ẩn nội dung "Hidden content".',
                    'option_2' => 'Hiển thị nội dung "Hidden content".',
                    'option_3' => 'Hiển thị nội dung "Hidden content" với màu đỏ.',
                    'option_4' => 'Không có tác dụng gì.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thẻ HTML nào dùng để xác định một thẻ điều hướng?',
                    'option_1' => '<nav>',
                    'option_2' => '<header>',
                    'option_3' => '<footer>',
                    'option_4' => '<section>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính <code>type</code> của thẻ <button> có chức năng gì?',
                    'option_1' => 'Chỉ định kiểu của nút (button, submit, reset).',
                    'option_2' => 'Chỉ định kiểu của nút (button, checkbox, radio).',
                    'option_3' => 'Chỉ định kiểu của nút (button, link, image).',
                    'option_4' => 'Chỉ định kiểu của nút (button, text, password).',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $questions_css =
            [
                [
                    'question' => 'CSS là viết tắt của?',
                    'option_1' => 'Creative Style Sheets',
                    'option_2' => 'Computer Style Sheets',
                    'option_3' => 'Cascading Style Sheets',
                    'option_4' => 'Colorful Style Sheets',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi màu nền của một phần tử?',
                    'option_1' => 'color',
                    'option_2' => 'background-color',
                    'option_3' => 'border-color',
                    'option_4' => 'text-color',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kích thước chữ?',
                    'option_1' => 'font-size',
                    'option_2' => 'text-size',
                    'option_3' => 'font-style',
                    'option_4' => 'text-style',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn giữa văn bản?',
                    'option_1' => 'text-align',
                    'option_2' => 'text-center',
                    'option_3' => 'align-text',
                    'option_4' => 'center-text',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thay đổi màu chữ?',
                    'option_1' => 'color: red;',
                    'option_2' => 'text-color: red;',
                    'option_3' => 'font-color: red;',
                    'option_4' => 'background-color: red;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thêm lề cho phần tử?',
                    'option_1' => 'margin',
                    'option_2' => 'padding',
                    'option_3' => 'border',
                    'option_4' => 'spacing',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo đường viền?',
                    'option_1' => 'border: 1px solid black;',
                    'option_2' => 'border-style: solid;',
                    'option_3' => 'border-color: black;',
                    'option_4' => 'border-width: 1px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu chữ?',
                    'option_1' => 'font-family',
                    'option_2' => 'font-type',
                    'option_3' => 'text-family',
                    'option_4' => 'text-type',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để điều chỉnh khoảng cách giữa các dòng?',
                    'option_1' => 'line-height',
                    'option_2' => 'line-spacing',
                    'option_3' => 'text-spacing',
                    'option_4' => 'letter-spacing',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để ẩn phần tử?',
                    'option_1' => 'display: none;',
                    'option_2' => 'visibility: hidden;',
                    'option_3' => 'opacity: 0;',
                    'option_4' => 'hidden: true;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt độ rộng của phần tử?',
                    'option_1' => 'width: 100px;',
                    'option_2' => 'height: 100px;',
                    'option_3' => 'size: 100px;',
                    'option_4' => 'length: 100px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo hiệu ứng bóng đổ cho văn bản?',
                    'option_1' => 'text-shadow',
                    'option_2' => 'box-shadow',
                    'option_3' => 'shadow',
                    'option_4' => 'text-effect',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu hiển thị của phần tử?',
                    'option_1' => 'display',
                    'option_2' => 'visibility',
                    'option_3' => 'position',
                    'option_4' => 'float',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để đặt khoảng cách giữa phần tử với viền của nó?',
                    'option_1' => 'padding',
                    'option_2' => 'margin',
                    'option_3' => 'border',
                    'option_4' => 'spacing',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng bo góc cho phần tử?',
                    'option_1' => 'border-radius: 10px;',
                    'option_2' => 'border: radius 10px;',
                    'option_3' => 'corner-radius: 10px;',
                    'option_4' => 'radius: 10px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kích thước của phần tử hình ảnh?',
                    'option_1' => 'width và height',
                    'option_2' => 'size',
                    'option_3' => 'image-size',
                    'option_4' => 'img-size',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để đặt vị trí của phần tử?',
                    'option_1' => 'position',
                    'option_2' => 'location',
                    'option_3' => 'align',
                    'option_4' => 'place',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo gradient nền?',
                    'option_1' => 'background: linear-gradient(to right, red, yellow);',
                    'option_2' => 'background: gradient(red, yellow);',
                    'option_3' => 'background: color-gradient(red, yellow);',
                    'option_4' => 'background: linear-color(red, yellow);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu chữ thành đậm?',
                    'option_1' => 'font-weight',
                    'option_2' => 'font-style',
                    'option_3' => 'font-type',
                    'option_4' => 'font-size',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt lề cho phần tử?',
                    'option_1' => 'margin: 10px;',
                    'option_2' => 'padding: 10px;',
                    'option_3' => 'border: 10px;',
                    'option_4' => 'spacing: 10px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh phần tử theo chiều ngang?',
                    'option_1' => 'text-align',
                    'option_2' => 'align',
                    'option_3' => 'float',
                    'option_4' => 'justify',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thay đổi màu nền của phần tử?',
                    'option_1' => 'background-color: blue;',
                    'option_2' => 'color-background: blue;',
                    'option_3' => 'background: blue;',
                    'option_4' => 'bg-color: blue;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo khoảng cách giữa các phần tử?',
                    'option_1' => 'margin',
                    'option_2' => 'padding',
                    'option_3' => 'border',
                    'option_4' => 'gap',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu đường viền?',
                    'option_1' => 'border-style',
                    'option_2' => 'border-type',
                    'option_3' => 'border-color',
                    'option_4' => 'border-width',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo lề bên trái cho phần tử?',
                    'option_1' => 'margin-left: 20px;',
                    'option_2' => 'padding-left: 20px;',
                    'option_3' => 'border-left: 20px;',
                    'option_4' => 'left-margin: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo khoảng cách giữa các ký tự?',
                    'option_1' => 'letter-spacing',
                    'option_2' => 'word-spacing',
                    'option_3' => 'text-spacing',
                    'option_4' => 'line-spacing',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thay đổi màu nền cho một phần tử?',
                    'option_1' => 'background-color: green;',
                    'option_2' => 'bg-color: green;',
                    'option_3' => 'color-bg: green;',
                    'option_4' => 'background: green;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi màu của đường viền?',
                    'option_1' => 'border-color',
                    'option_2' => 'border-style',
                    'option_3' => 'border-width',
                    'option_4' => 'border',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh phần tử theo chiều dọc?',
                    'option_1' => 'vertical-align',
                    'option_2' => 'align',
                    'option_3' => 'float',
                    'option_4' => 'text-align',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thay đổi độ mờ của phần tử?',
                    'option_1' => 'opacity: 0.5;',
                    'option_2' => 'visibility: 50%;',
                    'option_3' => 'color: rgba(0, 0, 0, 0.5);',
                    'option_4' => 'background: transparent;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi độ rộng của đường viền?',
                    'option_1' => 'border-width',
                    'option_2' => 'border-size',
                    'option_3' => 'border-thickness',
                    'option_4' => 'border-depth',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một lớp phủ cho phần tử?',
                    'option_1' => 'box-shadow: 2px 2px 5px grey;',
                    'option_2' => 'shadow: 2px 2px 5px grey;',
                    'option_3' => 'border-shadow: 2px 2px 5px grey;',
                    'option_4' => 'text-shadow: 2px 2px 5px grey;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh phần tử theo chiều ngang trong Flexbox?',
                    'option_1' => 'justify-content',
                    'option_2' => 'align-items',
                    'option_3' => 'align-content',
                    'option_4' => 'align-self',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử thành khối?',
                    'option_1' => 'display: block;',
                    'option_2' => 'display: inline;',
                    'option_3' => 'display: flex;',
                    'option_4' => 'display: grid;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh phần tử theo chiều dọc trong Flexbox?',
                    'option_1' => 'align-items',
                    'option_2' => 'justify-content',
                    'option_3' => 'align-content',
                    'option_4' => 'align-self',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi độ dày của chữ?',
                    'option_1' => 'font-weight',
                    'option_2' => 'font-style',
                    'option_3' => 'font-size',
                    'option_4' => 'text-weight',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng kiểu chữ cho phần tử?',
                    'option_1' => 'font-family: Arial, sans-serif;',
                    'option_2' => 'font: Arial, sans-serif;',
                    'option_3' => 'text-font: Arial, sans-serif;',
                    'option_4' => 'font-type: Arial, sans-serif;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu đường viền?',
                    'option_1' => 'border-style',
                    'option_2' => 'border-type',
                    'option_3' => 'border-color',
                    'option_4' => 'border-width',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử inline?',
                    'option_1' => 'display: inline;',
                    'option_2' => 'display: block;',
                    'option_3' => 'display: flex;',
                    'option_4' => 'display: grid;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo không gian giữa phần tử với phần tử khác?',
                    'option_1' => 'margin',
                    'option_2' => 'padding',
                    'option_3' => 'border',
                    'option_4' => 'space',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt viền cho phần tử?',
                    'option_1' => 'border: 2px solid black;',
                    'option_2' => 'border-color: black;',
                    'option_3' => 'border-width: 2px;',
                    'option_4' => 'border-style: solid;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để đặt kiểu viền cho phần tử?',
                    'option_1' => 'border-style',
                    'option_2' => 'border-type',
                    'option_3' => 'border-color',
                    'option_4' => 'border-width',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử flex container?',
                    'option_1' => 'display: flex;',
                    'option_2' => 'display: block;',
                    'option_3' => 'display: inline;',
                    'option_4' => 'display: grid;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh nội dung trong phần tử flex?',
                    'option_1' => 'justify-content',
                    'option_2' => 'align-items',
                    'option_3' => 'align-content',
                    'option_4' => 'align-self',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt màu nền cho phần tử?',
                    'option_1' => 'background-color: red;',
                    'option_2' => 'color-background: red;',
                    'option_3' => 'bg-color: red;',
                    'option_4' => 'background: red;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi chiều cao của phần tử?',
                    'option_1' => 'height',
                    'option_2' => 'width',
                    'option_3' => 'size',
                    'option_4' => 'length',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một lớp overlay trên phần tử?',
                    'option_1' => 'box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);',
                    'option_2' => 'text-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);',
                    'option_3' => 'background-color: rgba(0, 0, 0, 0.1);',
                    'option_4' => 'border-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi font chữ thành nghiêng?',
                    'option_1' => 'font-style',
                    'option_2' => 'font-weight',
                    'option_3' => 'font-family',
                    'option_4' => 'font-size',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để ẩn phần tử?',
                    'option_1' => 'display: none;',
                    'option_2' => 'visibility: hidden;',
                    'option_3' => 'opacity: 0;',
                    'option_4' => 'hidden: true;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để điều chỉnh độ dày của đường viền?',
                    'option_1' => 'border-width',
                    'option_2' => 'border-style',
                    'option_3' => 'border-color',
                    'option_4' => 'border-size',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt kiểu viền cho phần tử?',
                    'option_1' => 'border-style: dashed;',
                    'option_2' => 'border: dashed;',
                    'option_3' => 'border-color: dashed;',
                    'option_4' => 'border-width: dashed;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để đặt kích thước của phông chữ?',
                    'option_1' => 'font-size',
                    'option_2' => 'font-weight',
                    'option_3' => 'font-style',
                    'option_4' => 'text-size',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng bo góc cho phần tử?',
                    'option_1' => 'border-radius: 15px;',
                    'option_2' => 'border: radius 15px;',
                    'option_3' => 'corner-radius: 15px;',
                    'option_4' => 'radius: 15px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo hiệu ứng bóng đổ cho phần tử?',
                    'option_1' => 'box-shadow',
                    'option_2' => 'text-shadow',
                    'option_3' => 'shadow',
                    'option_4' => 'border-shadow',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt kích thước chiều cao của phần tử?',
                    'option_1' => 'height: 100px;',
                    'option_2' => 'size: 100px;',
                    'option_3' => 'width: 100px;',
                    'option_4' => 'length: 100px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi màu nền của phần tử?',
                    'option_1' => 'background-color',
                    'option_2' => 'color-background',
                    'option_3' => 'bg-color',
                    'option_4' => 'background',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử inline-block?',
                    'option_1' => 'display: inline-block;',
                    'option_2' => 'display: block;',
                    'option_3' => 'display: inline;',
                    'option_4' => 'display: flex;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo khoảng cách giữa các phần tử trong Flexbox?',
                    'option_1' => 'gap',
                    'option_2' => 'space',
                    'option_3' => 'margin',
                    'option_4' => 'padding',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt thuộc tính padding cho phần tử?',
                    'option_1' => 'padding: 10px;',
                    'option_2' => 'margin: 10px;',
                    'option_3' => 'border: 10px;',
                    'option_4' => 'spacing: 10px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi chiều rộng của phần tử?',
                    'option_1' => 'width',
                    'option_2' => 'height',
                    'option_3' => 'size',
                    'option_4' => 'length',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng margin-top cho phần tử?',
                    'option_1' => 'margin-top: 20px;',
                    'option_2' => 'padding-top: 20px;',
                    'option_3' => 'border-top: 20px;',
                    'option_4' => 'top-margin: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu viền cho phần tử?',
                    'option_1' => 'border-style',
                    'option_2' => 'border-color',
                    'option_3' => 'border-width',
                    'option_4' => 'border-type',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với lớp flexbox?',
                    'option_1' => 'display: flex;',
                    'option_2' => 'display: grid;',
                    'option_3' => 'display: block;',
                    'option_4' => 'display: inline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh các phần tử bên trong container flex?',
                    'option_1' => 'align-items',
                    'option_2' => 'justify-content',
                    'option_3' => 'align-content',
                    'option_4' => 'align-self',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt màu sắc cho văn bản?',
                    'option_1' => 'color: blue;',
                    'option_2' => 'background: blue;',
                    'option_3' => 'text-color: blue;',
                    'option_4' => 'font-color: blue;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu chữ thành đậm?',
                    'option_1' => 'font-weight',
                    'option_2' => 'font-style',
                    'option_3' => 'font-family',
                    'option_4' => 'text-weight',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo khoảng cách giữa các hàng văn bản?',
                    'option_1' => 'line-height: 1.5;',
                    'option_2' => 'text-height: 1.5;',
                    'option_3' => 'font-height: 1.5;',
                    'option_4' => 'spacing: 1.5;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kích thước của phần tử?',
                    'option_1' => 'width và height',
                    'option_2' => 'size',
                    'option_3' => 'dimensions',
                    'option_4' => 'scale',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng thuộc tính CSS Grid cho một phần tử?',
                    'option_1' => 'display: grid;',
                    'option_2' => 'display: flex;',
                    'option_3' => 'display: inline-grid;',
                    'option_4' => 'display: block;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để xác định số hàng của grid container?',
                    'option_1' => 'grid-template-rows',
                    'option_2' => 'grid-template-columns',
                    'option_3' => 'grid-template',
                    'option_4' => 'grid-rows',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử sticky với CSS?',
                    'option_1' => 'position: sticky;',
                    'option_2' => 'position: fixed;',
                    'option_3' => 'position: absolute;',
                    'option_4' => 'position: relative;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo một biến CSS?',
                    'option_1' => '--variable-name',
                    'option_2' => 'var(--variable-name)',
                    'option_3' => 'css-variable-name',
                    'option_4' => 'custom-property',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng hiệu ứng hover cho phần tử?',
                    'option_1' => 'selector:hover { /* styles */ }',
                    'option_2' => 'selector:focus { /* styles */ }',
                    'option_3' => 'selector:active { /* styles */ }',
                    'option_4' => 'selector:visited { /* styles */ }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo hiệu ứng chuyển tiếp giữa các trạng thái?',
                    'option_1' => 'transition',
                    'option_2' => 'animation',
                    'option_3' => 'transform',
                    'option_4' => 'filter',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một animation trong CSS?',
                    'option_1' => '@keyframes animation-name { /* styles */ }',
                    'option_2' => '@animation keyframes { /* styles */ }',
                    'option_3' => '@animation-name { /* styles */ }',
                    'option_4' => '@keyframes { /* styles */ }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để đặt thời gian chuyển tiếp cho một hiệu ứng?',
                    'option_1' => 'transition-duration',
                    'option_2' => 'animation-duration',
                    'option_3' => 'transition-time',
                    'option_4' => 'animation-time',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt các đường lưới trong CSS Grid?',
                    'option_1' => 'grid-template-areas',
                    'option_2' => 'grid-template-lines',
                    'option_3' => 'grid-areas',
                    'option_4' => 'grid-lines',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh phần tử theo chiều dọc trong CSS Grid?',
                    'option_1' => 'align-items',
                    'option_2' => 'justify-items',
                    'option_3' => 'align-content',
                    'option_4' => 'justify-content',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt vị trí của một phần tử trong CSS Grid?',
                    'option_1' => 'grid-column: 1 / 3; grid-row: 2 / 4;',
                    'option_2' => 'column: 1 / 3; row: 2 / 4;',
                    'option_3' => 'grid-area: 1 / 2 / 3 / 4;',
                    'option_4' => 'area: 1 / 2 / 3 / 4;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để điều chỉnh độ dày của chữ trong CSS?',
                    'option_1' => 'font-weight',
                    'option_2' => 'font-style',
                    'option_3' => 'font-size',
                    'option_4' => 'font-family',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng một hình nền cho phần tử?',
                    'option_1' => 'background-image: url("image.jpg");',
                    'option_2' => 'background-url: "image.jpg";',
                    'option_3' => 'image-background: url("image.jpg");',
                    'option_4' => 'bg-image: url("image.jpg");',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo một gradient nền trong CSS?',
                    'option_1' => 'background: linear-gradient(to right, red, blue);',
                    'option_2' => 'background: gradient(to right, red, blue);',
                    'option_3' => 'background-color: gradient(to right, red, blue);',
                    'option_4' => 'background-image: gradient(to right, red, blue);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử flex item với chiều rộng bằng 50%?',
                    'option_1' => 'flex: 0 0 50%;',
                    'option_2' => 'flex-basis: 50%;',
                    'option_3' => 'width: 50%;',
                    'option_4' => 'flex-grow: 50%;',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi vị trí của các phần tử trong Flexbox?',
                    'option_1' => 'align-items',
                    'option_2' => 'justify-content',
                    'option_3' => 'align-content',
                    'option_4' => 'align-self',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng chuyển động với CSS Animation?',
                    'option_1' => 'animation: move 2s linear infinite;',
                    'option_2' => 'transition: move 2s linear infinite;',
                    'option_3' => 'transform: move 2s linear infinite;',
                    'option_4' => 'effect: move 2s linear infinite;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kích thước của hình ảnh?',
                    'option_1' => 'width và height',
                    'option_2' => 'size',
                    'option_3' => 'scale',
                    'option_4' => 'resize',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt hiệu ứng text-shadow cho văn bản?',
                    'option_1' => 'text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'shadow-text: 2px 2px 4px rgba(0, 0, 0, 0.5);',
                    'option_3' => 'text-shadow-color: rgba(0, 0, 0, 0.5);',
                    'option_4' => 'shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo khoảng cách giữa các phần tử trong Flexbox?',
                    'option_1' => 'gap',
                    'option_2' => 'margin',
                    'option_3' => 'padding',
                    'option_4' => 'space-between',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng một bộ lọc màu cho hình ảnh?',
                    'option_1' => 'filter: grayscale(100%);',
                    'option_2' => 'image-filter: grayscale(100%);',
                    'option_3' => 'filter-color: grayscale(100%);',
                    'option_4' => 'color-filter: grayscale(100%);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để đặt viền cho phần tử?',
                    'option_1' => 'border',
                    'option_2' => 'outline',
                    'option_3' => 'border-style',
                    'option_4' => 'border-width',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một hiệu ứng gradient màu từ xanh đến đỏ?',
                    'option_1' => 'background: linear-gradient(to right, blue, red);',
                    'option_2' => 'background: gradient(blue, red);',
                    'option_3' => 'background-color: gradient(blue, red);',
                    'option_4' => 'background-image: gradient(blue, red);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo khoảng cách giữa nội dung và viền phần tử?',
                    'option_1' => 'padding',
                    'option_2' => 'margin',
                    'option_3' => 'border',
                    'option_4' => 'gap',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng hiệu ứng fade-in trong CSS?',
                    'option_1' => 'animation: fadeIn 2s ease-in;',
                    'option_2' => 'transition: fadeIn 2s ease-in;',
                    'option_3' => 'effect: fadeIn 2s ease-in;',
                    'option_4' => 'filter: fadeIn 2s ease-in;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi màu nền của phần tử?',
                    'option_1' => 'background-color',
                    'option_2' => 'color',
                    'option_3' => 'border-color',
                    'option_4' => 'background-image',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một hiệu ứng biến đổi với CSS?',
                    'option_1' => 'transform: rotate(45deg);',
                    'option_2' => 'effect: rotate(45deg);',
                    'option_3' => 'transition: rotate(45deg);',
                    'option_4' => 'animation: rotate(45deg);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để căn chỉnh các phần tử theo chiều ngang trong Flexbox?',
                    'option_1' => 'justify-content',
                    'option_2' => 'align-items',
                    'option_3' => 'align-content',
                    'option_4' => 'align-self',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng box-shadow cho một phần tử?',
                    'option_1' => 'box-shadow: 10px 10px 20px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'shadow-box: 10px 10px 20px rgba(0, 0, 0, 0.5);',
                    'option_3' => 'shadow: 10px 10px 20px rgba(0, 0, 0, 0.5);',
                    'option_4' => 'border-shadow: 10px 10px 20px rgba(0, 0, 0, 0.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để định dạng văn bản thành in đậm và nghiêng?',
                    'option_1' => 'font-weight: bold; font-style: italic;',
                    'option_2' => 'text-weight: bold; text-style: italic;',
                    'option_3' => 'font-size: bold; font-style: italic;',
                    'option_4' => 'font-bold: true; font-italic: true;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi cách hiển thị của phần tử?',
                    'option_1' => 'display',
                    'option_2' => 'visibility',
                    'option_3' => 'opacity',
                    'option_4' => 'position',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng một biến CSS trong một thuộc tính?',
                    'option_1' => 'property: var(--variable-name);',
                    'option_2' => 'property: --variable-name;',
                    'option_3' => 'property: css(--variable-name);',
                    'option_4' => 'property: custom(--variable-name);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để đặt một độ rộng tối đa cho phần tử?',
                    'option_1' => 'max-width: 100%;',
                    'option_2' => 'width-max: 100%;',
                    'option_3' => 'max-size: 100%;',
                    'option_4' => 'width: 100%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo một layout với nhiều cột?',
                    'option_1' => 'column-count',
                    'option_2' => 'columns',
                    'option_3' => 'layout-columns',
                    'option_4' => 'multi-column',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng các thuộc tính flexbox cho container?',
                    'option_1' => 'display: flex; flex-direction: row;',
                    'option_2' => 'display: grid; grid-template-columns: 1fr;',
                    'option_3' => 'display: inline-block; vertical-align: middle;',
                    'option_4' => 'display: block; float: left;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để thay đổi kiểu chữ trong CSS?',
                    'option_1' => 'font-family',
                    'option_2' => 'font-style',
                    'option_3' => 'font-weight',
                    'option_4' => 'font-size',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một thuộc tính flex grow cho phần tử?',
                    'option_1' => 'flex-grow: 1;',
                    'option_2' => 'flex-expand: 1;',
                    'option_3' => 'flex-increase: 1;',
                    'option_4' => 'grow: 1;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng hiệu ứng blur cho hình ảnh?',
                    'option_1' => 'filter: blur(5px);',
                    'option_2' => 'image-filter: blur(5px);',
                    'option_3' => 'blur: 5px;',
                    'option_4' => 'effect: blur(5px);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với các góc bo tròn?',
                    'option_1' => 'border-radius: 10px;',
                    'option_2' => 'corner-radius: 10px;',
                    'option_3' => 'border-round: 10px;',
                    'option_4' => 'radius: 10px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng một hiệu ứng hover với độ mờ?',
                    'option_1' => 'opacity: 0.5;',
                    'option_2' => 'visibility: 0.5;',
                    'option_3' => 'filter: opacity(0.5);',
                    'option_4' => 'display: opacity(0.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một gradient nền từ màu xanh lá cây đến màu vàng?',
                    'option_1' => 'background: linear-gradient(to right, green, yellow);',
                    'option_2' => 'background: gradient(green, yellow);',
                    'option_3' => 'background-color: gradient(green, yellow);',
                    'option_4' => 'background-image: gradient(green, yellow);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo khoảng cách giữa các hàng trong Grid?',
                    'option_1' => 'grid-row-gap',
                    'option_2' => 'grid-gap',
                    'option_3' => 'row-gap',
                    'option_4' => 'gap',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một layout với nhiều cột trong Flexbox?',
                    'option_1' => 'display: flex; flex-direction: column;',
                    'option_2' => 'display: block; float: left;',
                    'option_3' => 'display: grid; grid-template-columns: 1fr;',
                    'option_4' => 'display: inline; vertical-align: middle;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với viền dày 2px và màu đỏ?',
                    'option_1' => 'border: 2px solid red;',
                    'option_2' => 'border-width: 2px; border-color: red;',
                    'option_3' => 'border-style: solid; border-thickness: 2px; border-color: red;',
                    'option_4' => 'outline: 2px solid red;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng một hiệu ứng biến đổi với CSS?',
                    'option_1' => 'transform: scale(1.5);',
                    'option_2' => 'effect: scale(1.5);',
                    'option_3' => 'transition: scale(1.5);',
                    'option_4' => 'animation: scale(1.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thay đổi cách hiển thị của phần tử thành inline-block?',
                    'option_1' => 'display: inline-block;',
                    'option_2' => 'display: block-inline;',
                    'option_3' => 'display: block;',
                    'option_4' => 'display: inline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Thuộc tính nào dùng để tạo hiệu ứng chuyển động cho phần tử?',
                    'option_1' => 'animation',
                    'option_2' => 'transition',
                    'option_3' => 'transform',
                    'option_4' => 'filter',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một hiệu ứng chuyển động chậm hơn?',
                    'option_1' => 'animation-duration: 5s;',
                    'option_2' => 'transition-duration: 5s;',
                    'option_3' => 'animation-speed: 5s;',
                    'option_4' => 'transition-speed: 5s;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng các hiệu ứng hover cho phần tử?',
                    'option_1' => 'selector:hover { /* styles */ }',
                    'option_2' => 'selector:focus { /* styles */ }',
                    'option_3' => 'selector:active { /* styles */ }',
                    'option_4' => 'selector:visited { /* styles */ }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo các cột với số lượng cột tùy chỉnh?',
                    'option_1' => 'column-count: 3;',
                    'option_2' => 'columns: 3;',
                    'option_3' => 'column-width: 3;',
                    'option_4' => 'multi-column: 3;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng thuộc tính flex-direction cho phần tử?',
                    'option_1' => 'flex-direction: row;',
                    'option_2' => 'flex-flow: row;',
                    'option_3' => 'direction: row;',
                    'option_4' => 'flex: row;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một layout với các phần tử tự động cân chỉnh theo kích thước?',
                    'option_1' => 'display: flex; flex-wrap: wrap;',
                    'option_2' => 'display: block; float: left;',
                    'option_3' => 'display: grid; grid-template-columns: auto;',
                    'option_4' => 'display: inline; vertical-align: top;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng một hiệu ứng slide-in cho phần tử?',
                    'option_1' => 'animation: slideIn 2s ease-in;',
                    'option_2' => 'transition: slideIn 2s ease-in;',
                    'option_3' => 'effect: slideIn 2s ease-in;',
                    'option_4' => 'filter: slideIn 2s ease-in;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một border-radius cho tất cả các góc của phần tử?',
                    'option_1' => 'border-radius: 10px;',
                    'option_2' => 'corner-radius: 10px;',
                    'option_3' => 'radius: 10px;',
                    'option_4' => 'border-round: 10px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thiết lập một gradient nền từ màu xanh dương sang màu tím theo chiều dọc?',
                    'option_1' => 'background: linear-gradient(to bottom, blue, purple);',
                    'option_2' => 'background: gradient(vertical, blue, purple);',
                    'option_3' => 'background-image: gradient(to bottom, blue, purple);',
                    'option_4' => 'background-color: gradient(blue, purple);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng `@media` query để áp dụng style chỉ cho màn hình có chiều rộng tối đa 600px?',
                    'option_1' => '@media only screen and (max-width: 600px) { /* styles */ }',
                    'option_2' => '@media screen (max-width: 600px) { /* styles */ }',
                    'option_3' => '@media (min-width: 600px) { /* styles */ }',
                    'option_4' => '@media only screen and (min-width: 600px) { /* styles */ }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với bố cục 3 cột đều nhau sử dụng CSS Grid?',
                    'option_1' => 'display: grid; grid-template-columns: 1fr 1fr 1fr;',
                    'option_2' => 'display: flex; flex-direction: row; flex-basis: 33%;',
                    'option_3' => 'display: block; column-count: 3;',
                    'option_4' => 'display: grid; columns: 3;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng hover thay đổi màu nền từ màu xanh dương sang màu đỏ?',
                    'option_1' => '.element:hover { background-color: red; }',
                    'option_2' => '.element:hover { color: red; }',
                    'option_3' => '.element:hover { background: red; }',
                    'option_4' => '.element:hover { border-color: red; }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng Flexbox cho phần tử chứa các phần tử con theo chiều dọc và căn giữa theo chiều ngang?',
                    'option_1' => 'display: flex; flex-direction: column; align-items: center;',
                    'option_2' => 'display: flex; flex-direction: row; justify-content: center;',
                    'option_3' => 'display: flex; flex-wrap: wrap; align-content: center;',
                    'option_4' => 'display: block; text-align: center;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với viền bo tròn chỉ cho góc trên bên trái?',
                    'option_1' => 'border-top-left-radius: 10px;',
                    'option_2' => 'border-radius: 10px 0 0 0;',
                    'option_3' => 'border-radius: 10px 0 0;',
                    'option_4' => 'corner-radius: 10px 0 0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng shadow với bóng mờ 5px ở bên trái và 10px ở bên dưới phần tử?',
                    'option_1' => 'box-shadow: -5px 10px 15px rgba(0, 0, 0, 0.3);',
                    'option_2' => 'box-shadow: 5px 10px 15px rgba(0, 0, 0, 0.3);',
                    'option_3' => 'shadow: -5px 10px rgba(0, 0, 0, 0.3);',
                    'option_4' => 'filter: drop-shadow(-5px 10px 15px rgba(0, 0, 0, 0.3));',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng CSS Grid với các hàng có khoảng cách giữa các hàng là 20px?',
                    'option_1' => 'display: grid; grid-row-gap: 20px;',
                    'option_2' => 'display: grid; row-gap: 20px;',
                    'option_3' => 'display: grid; gap: 20px;',
                    'option_4' => 'display: grid; grid-gap: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với các cột flex-grow không đồng đều?',
                    'option_1' => '.item1 { flex-grow: 1; } .item2 { flex-grow: 2; }',
                    'option_2' => '.item { flex-expand: 1; }',
                    'option_3' => '.item { flex-grow: auto; }',
                    'option_4' => '.item { flex: 1; flex: 2; }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng chuyển động cho phần tử sử dụng keyframes?',
                    'option_1' => '@keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }',
                    'option_2' => '@keyframes move { from { left: -100%; } to { left: 0%; } }',
                    'option_3' => '@animation slideIn { 0% { transform: translateX(-100%); } 100% { transform: translateX(0); } }',
                    'option_4' => '@animation keyframes slideIn { 0% { transform: translateX(-100%); } 100% { transform: translateX(0); } }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng biến CSS trong thuộc tính?',
                    'option_1' => 'color: var(--main-color);',
                    'option_2' => 'color: --main-color;',
                    'option_3' => 'color: css(--main-color);',
                    'option_4' => 'color: custom(--main-color);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử có hiệu ứng blur với độ mờ 10px?',
                    'option_1' => 'filter: blur(10px);',
                    'option_2' => 'effect: blur(10px);',
                    'option_3' => 'blur: 10px;',
                    'option_4' => 'opacity: blur(10px);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thay đổi kiểu chữ của một phần tử thành serif?',
                    'option_1' => 'font-family: serif;',
                    'option_2' => 'font-style: serif;',
                    'option_3' => 'font-weight: serif;',
                    'option_4' => 'font-type: serif;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng một border dày 5px và màu xanh cho phần tử?',
                    'option_1' => 'border: 5px solid blue;',
                    'option_2' => 'border-width: 5px; border-color: blue;',
                    'option_3' => 'border-style: solid; border-size: 5px; border-color: blue;',
                    'option_4' => 'outline: 5px solid blue;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với chiều rộng tối đa là 100% và chiều cao tự động?',
                    'option_1' => 'width: 100%; height: auto;',
                    'option_2' => 'width: auto; height: 100%;',
                    'option_3' => 'max-width: 100%; height: auto;',
                    'option_4' => 'width: 100%; max-height: auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với lưới chứa 3 hàng và 2 cột với kích thước cố định?',
                    'option_1' => 'display: grid; grid-template-rows: 100px 100px 100px; grid-template-columns: 100px 100px;',
                    'option_2' => 'display: grid; grid-rows: 3; grid-columns: 2;',
                    'option_3' => 'display: flex; flex-direction: row; flex-wrap: wrap;',
                    'option_4' => 'display: block; grid-template-rows: 3; grid-template-columns: 2;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `clip-path` để tạo hình tròn từ phần tử?',
                    'option_1' => 'clip-path: circle(50%);',
                    'option_2' => 'clip-path: ellipse(50% 50%);',
                    'option_3' => 'clip-path: circle(50% 50%);',
                    'option_4' => 'clip-path: polygon(50% 50%, 50% 50%);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng hiệu ứng box-shadow với bóng mờ trong suốt 20px?',
                    'option_1' => 'box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'box-shadow: 0 0 20px rgba(0, 0, 0, 1);',
                    'option_3' => 'shadow: 0 0 20px rgba(0, 0, 0, 0.5);',
                    'option_4' => 'shadow: 0 0 20px rgba(0, 0, 0, 1);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng `transform` để xoay phần tử 45 độ?',
                    'option_1' => 'transform: rotate(45deg);',
                    'option_2' => 'transform: rotate(45);',
                    'option_3' => 'transform: rotate(45px);',
                    'option_4' => 'transform: rotate(45grad);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `overflow` để ẩn các phần tử tràn ra ngoài khu vực chứa?',
                    'option_1' => 'overflow: hidden;',
                    'option_2' => 'overflow: scroll;',
                    'option_3' => 'overflow: visible;',
                    'option_4' => 'overflow: auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng Flexbox và căn giữa các phần tử theo chiều dọc và chiều ngang?',
                    'option_1' => 'display: flex; justify-content: center; align-items: center;',
                    'option_2' => 'display: block; text-align: center; vertical-align: middle;',
                    'option_3' => 'display: flex; align-items: stretch; justify-content: flex-start;',
                    'option_4' => 'display: flex; align-content: center; justify-items: center;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-areas` để định nghĩa một lưới với 3 khu vực?',
                    'option_1' => 'grid-template-areas: "header header header" "sidebar content content" "footer footer footer";',
                    'option_2' => 'grid-template-areas: header header header, sidebar content content, footer footer footer;',
                    'option_3' => 'grid-areas: "header header header" "sidebar content content" "footer footer footer";',
                    'option_4' => 'grid-template: "header header header" "sidebar content content" "footer footer footer";',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để áp dụng hiệu ứng transition với thời gian 0.3 giây cho thuộc tính `background-color`?',
                    'option_1' => 'transition: background-color 0.3s;',
                    'option_2' => 'transition: 0.3s background-color;',
                    'option_3' => 'transition-property: background-color; transition-duration: 0.3s;',
                    'option_4' => 'transition: 0.3s; background-color;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với viền có đường viền dạng dashed?',
                    'option_1' => 'border: 2px dashed black;',
                    'option_2' => 'border-style: dashed; border-width: 2px;',
                    'option_3' => 'border: 2px dotted black;',
                    'option_4' => 'border: 2px solid dashed;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `calc()` để thiết lập chiều rộng là 50% của phần tử cha trừ 20px?',
                    'option_1' => 'width: calc(50% - 20px);',
                    'option_2' => 'width: calc(50% + 20px);',
                    'option_3' => 'width: calc(50px - 20%);',
                    'option_4' => 'width: calc(50% / 20px);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `clip-path` tạo hình tam giác?',
                    'option_1' => 'clip-path: polygon(0 0, 100% 0, 0 100%);',
                    'option_2' => 'clip-path: triangle(0 0, 100% 0, 0 100%);',
                    'option_3' => 'clip-path: shape(0 0, 100% 0, 0 100%);',
                    'option_4' => 'clip-path: path(0 0, 100% 0, 0 100%);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với padding 20px ở tất cả các cạnh và margin 10px chỉ cho cạnh trên?',
                    'option_1' => 'padding: 20px; margin-top: 10px;',
                    'option_2' => 'padding: 20px 0; margin: 10px;',
                    'option_3' => 'padding-top: 20px; margin-top: 10px;',
                    'option_4' => 'padding: 10px; margin: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với các viền bo tròn khác nhau cho từng góc?',
                    'option_1' => 'border-radius: 10px 20px 30px 40px;',
                    'option_2' => 'corner-radius: 10px 20px 30px 40px;',
                    'option_3' => 'radius: 10px 20px 30px 40px;',
                    'option_4' => 'border-radius: 10px 20px 30px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-columns` để tạo lưới với cột tự động với kích thước tối đa là 200px?',
                    'option_1' => 'grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));',
                    'option_2' => 'grid-template-columns: repeat(auto-fit, 200px);',
                    'option_3' => 'grid-template-columns: auto-fill 200px;',
                    'option_4' => 'grid-template-columns: repeat(3, 200px);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-shadow` tạo bóng chữ với độ mờ 2px?',
                    'option_1' => 'text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'text-shadow: 2px 2px rgba(0, 0, 0, 0.5);',
                    'option_3' => 'text-shadow: 2px 2px 4px black;',
                    'option_4' => 'text-shadow: 2px 2px 4px rgba(0, 0, 0, 1);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với opacity 0.5 và không ảnh hưởng đến layout của trang?',
                    'option_1' => 'opacity: 0.5;',
                    'option_2' => 'background-color: rgba(0, 0, 0, 0.5);',
                    'option_3' => 'filter: alpha(opacity=50);',
                    'option_4' => 'visibility: hidden;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `position` tạo phần tử cố định tại góc dưới bên phải của trang?',
                    'option_1' => 'position: fixed; bottom: 0; right: 0;',
                    'option_2' => 'position: absolute; bottom: 0; right: 0;',
                    'option_3' => 'position: relative; bottom: 0; right: 0;',
                    'option_4' => 'position: sticky; bottom: 0; right: 0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với hiệu ứng gradient nền từ xanh lục sang vàng với độ nghiêng 45 độ?',
                    'option_1' => 'background: linear-gradient(45deg, green, yellow);',
                    'option_2' => 'background: radial-gradient(green, yellow);',
                    'option_3' => 'background: linear-gradient(to right, green, yellow);',
                    'option_4' => 'background: gradient(45deg, green, yellow);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transform` tạo hiệu ứng phóng to phần tử 1.5 lần?',
                    'option_1' => 'transform: scale(1.5);',
                    'option_2' => 'transform: enlarge(1.5);',
                    'option_3' => 'transform: zoom(1.5);',
                    'option_4' => 'transform: magnify(1.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-size` tạo cỡ chữ bằng 1.2em?',
                    'option_1' => 'font-size: 1.2em;',
                    'option_2' => 'font-size: 1.2px;',
                    'option_3' => 'font-size: 1.2rem;',
                    'option_4' => 'font-size: 120%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng gradient nền cho phần tử sử dụng thuộc tính `background-image`?',
                    'option_1' => 'background-image: linear-gradient(to right, red, blue);',
                    'option_2' => 'background: gradient(to right, red, blue);',
                    'option_3' => 'background-color: linear-gradient(to right, red, blue);',
                    'option_4' => 'background: linear-gradient(to right, red, blue);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo phần tử với viền bo tròn đồng đều cho tất cả các góc?',
                    'option_1' => 'border-radius: 10px;',
                    'option_2' => 'corner-radius: 10px;',
                    'option_3' => 'border-corner: 10px;',
                    'option_4' => 'border-radius: 10%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-size` để điều chỉnh kích thước hình nền thành cover?',
                    'option_1' => 'background-size: cover;',
                    'option_2' => 'background-size: contain;',
                    'option_3' => 'background-size: auto;',
                    'option_4' => 'background-size: full;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để thiết lập lưới với cột có kích thước tự động và tối thiểu 150px?',
                    'option_1' => 'grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));',
                    'option_2' => 'grid-template-columns: repeat(auto-fill, 150px);',
                    'option_3' => 'grid-template-columns: repeat(3, minmax(150px, 1fr));',
                    'option_4' => 'grid-template-columns: auto 150px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo hiệu ứng hover làm cho phần tử có màu nền từ xanh lục sang xanh dương?',
                    'option_1' => '.element:hover { background-color: blue; }',
                    'option_2' => '.element:hover { background-color: green; }',
                    'option_3' => '.element:hover { background-color: linear-gradient(to right, green, blue); }',
                    'option_4' => '.element:hover { color: blue; }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với dòng chữ có hiệu ứng chữ gạch ngang?',
                    'option_1' => 'text-decoration: line-through;',
                    'option_2' => 'text-decoration: underline;',
                    'option_3' => 'text-decoration: overline;',
                    'option_4' => 'text-decoration: strikethrough;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex` với giá trị để phần tử chiếm không gian còn lại?',
                    'option_1' => 'flex: 1;',
                    'option_2' => 'flex: auto;',
                    'option_3' => 'flex: 0 1 auto;',
                    'option_4' => 'flex: fill;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với nền là một hình ảnh có kích thước cover?',
                    'option_1' => 'background: url(image.jpg) no-repeat center center; background-size: cover;',
                    'option_2' => 'background-image: url(image.jpg); background-size: cover;',
                    'option_3' => 'background: image(url(image.jpg)) cover;',
                    'option_4' => 'background: cover image(url(image.jpg));',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `position` tạo một phần tử cố định ở góc trên bên trái của trang?',
                    'option_1' => 'position: fixed; top: 0; left: 0;',
                    'option_2' => 'position: absolute; top: 0; left: 0;',
                    'option_3' => 'position: relative; top: 0; left: 0;',
                    'option_4' => 'position: static; top: 0; left: 0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với chiều rộng 100% và chiều cao 50px?',
                    'option_1' => 'width: 100%; height: 50px;',
                    'option_2' => 'width: 50%; height: 100px;',
                    'option_3' => 'width: 100%; height: auto;',
                    'option_4' => 'width: auto; height: 50px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `display` tạo một phần tử có kiểu inline-block?',
                    'option_1' => 'display: inline-block;',
                    'option_2' => 'display: block;',
                    'option_3' => 'display: inline;',
                    'option_4' => 'display: block-inline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `overflow` cho phép cuộn nội dung theo chiều ngang?',
                    'option_1' => 'overflow-x: auto;',
                    'option_2' => 'overflow-y: auto;',
                    'option_3' => 'overflow: hidden;',
                    'option_4' => 'overflow: scroll;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với font chữ là Arial và cỡ chữ là 16px?',
                    'option_1' => 'font-family: Arial; font-size: 16px;',
                    'option_2' => 'font-family: Arial, sans-serif; font-size: 16px;',
                    'option_3' => 'font: Arial 16px;',
                    'option_4' => 'font-family: Arial; font-size: 16px; font-weight: normal;',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `animation` tạo hiệu ứng quay vòng trong 2 giây?',
                    'option_1' => 'animation: rotate 2s infinite;',
                    'option_2' => 'animation: rotate 2s;',
                    'option_3' => 'animation: spin 2s infinite;',
                    'option_4' => 'animation: spin 2s;',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với chiều rộng cố định 200px và chiều cao tự động?',
                    'option_1' => 'width: 200px; height: auto;',
                    'option_2' => 'width: auto; height: 200px;',
                    'option_3' => 'width: 200px; height: 200px;',
                    'option_4' => 'width: 100%; height: 200px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với chiều cao cố định 100px và nền là hình ảnh?',
                    'option_1' => 'height: 100px; background-image: url(image.jpg);',
                    'option_2' => 'height: 100px; background: image(url(image.jpg));',
                    'option_3' => 'height: 100px; background-color: url(image.jpg);',
                    'option_4' => 'height: 100px; background: url(image.jpg);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid` để tạo lưới với 2 hàng và 3 cột?',
                    'option_1' => 'display: grid; grid-template-rows: repeat(2, 1fr); grid-template-columns: repeat(3, 1fr);',
                    'option_2' => 'display: grid; grid-template: 2 rows / 3 columns;',
                    'option_3' => 'display: grid; grid-rows: 2; grid-columns: 3;',
                    'option_4' => 'display: grid; rows: 2; columns: 3;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-weight` thiết lập độ dày chữ là bold?',
                    'option_1' => 'font-weight: bold;',
                    'option_2' => 'font-weight: 700;',
                    'option_3' => 'font-weight: strong;',
                    'option_4' => 'font-weight: bolder;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với chiều cao cố định 200px và nền là gradient?',
                    'option_1' => 'height: 200px; background: linear-gradient(to right, red, blue);',
                    'option_2' => 'height: 200px; background-image: linear-gradient(to right, red, blue);',
                    'option_3' => 'height: 200px; background: gradient(to right, red, blue);',
                    'option_4' => 'height: 200px; background-color: linear-gradient(to right, red, blue);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo phần tử với text được căn giữa theo chiều ngang?',
                    'option_1' => 'text-align: center;',
                    'option_2' => 'text-align: middle;',
                    'option_3' => 'text-align: justify;',
                    'option_4' => 'text-align: left;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo phần tử với box-sizing là border-box?',
                    'option_1' => 'box-sizing: border-box;',
                    'option_2' => 'box-sizing: content-box;',
                    'option_3' => 'box-sizing: padding-box;',
                    'option_4' => 'box-sizing: border;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-direction` với giá trị để sắp xếp các phần tử theo chiều dọc?',
                    'option_1' => 'flex-direction: column;',
                    'option_2' => 'flex-direction: row;',
                    'option_3' => 'flex-direction: vertical;',
                    'option_4' => 'flex-direction: stack;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo phần tử với viền có đường viền dạng dotted?',
                    'option_1' => 'border: 2px dotted black;',
                    'option_2' => 'border-style: dotted; border-width: 2px;',
                    'option_3' => 'border: 2px dashed black;',
                    'option_4' => 'border-style: solid; border-width: 2px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-color` với giá trị là mã màu hex?',
                    'option_1' => 'background-color: #ff0000;',
                    'option_2' => 'background-color: rgb(255, 0, 0);',
                    'option_3' => 'background-color: rgba(255, 0, 0, 1);',
                    'option_4' => 'background-color: red;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `margin` thiết lập lề cho tất cả các cạnh?',
                    'option_1' => 'margin: 10px;',
                    'option_2' => 'margin: 10px 20px;',
                    'option_3' => 'margin: 10px 20px 30px;',
                    'option_4' => 'margin: 10px 20px 30px 40px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `display` ẩn phần tử?',
                    'option_1' => 'display: none;',
                    'option_2' => 'visibility: hidden;',
                    'option_3' => 'opacity: 0;',
                    'option_4' => 'position: absolute; visibility: hidden;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `border` tạo đường viền dày 1px và màu đỏ?',
                    'option_1' => 'border: 1px solid red;',
                    'option_2' => 'border: 2px dashed red;',
                    'option_3' => 'border: 1px dotted red;',
                    'option_4' => 'border: 1px double red;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-transform` làm cho tất cả các ký tự thành chữ hoa?',
                    'option_1' => 'text-transform: uppercase;',
                    'option_2' => 'text-transform: capitalize;',
                    'option_3' => 'text-transform: lowercase;',
                    'option_4' => 'text-transform: normal;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo phần tử với màu nền là màu gradient từ xanh sang tím?',
                    'option_1' => 'background: linear-gradient(to right, blue, purple);',
                    'option_2' => 'background: gradient(to right, blue, purple);',
                    'option_3' => 'background-image: linear-gradient(to right, blue, purple);',
                    'option_4' => 'background-color: linear-gradient(to right, blue, purple);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `box-shadow` tạo bóng cho phần tử?',
                    'option_1' => 'box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'box-shadow: 2px 2px 5px black;',
                    'option_3' => 'box-shadow: 2px 2px 5px rgba(0, 0, 0, 1);',
                    'option_4' => 'box-shadow: shadow(2px 2px 5px);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `justify-content` căn chỉnh các phần tử theo chiều ngang trong flexbox?',
                    'option_1' => 'justify-content: center;',
                    'option_2' => 'justify-content: start;',
                    'option_3' => 'justify-content: end;',
                    'option_4' => 'justify-content: space-between;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `align-items` căn chỉnh các phần tử theo chiều dọc trong flexbox?',
                    'option_1' => 'align-items: center;',
                    'option_2' => 'align-items: start;',
                    'option_3' => 'align-items: end;',
                    'option_4' => 'align-items: space-between;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-align` căn giữa nội dung của phần tử?',
                    'option_1' => 'text-align: center;',
                    'option_2' => 'text-align: middle;',
                    'option_3' => 'text-align: justify;',
                    'option_4' => 'text-align: left;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với chiều rộng tự động và chiều cao cố định 300px?',
                    'option_1' => 'width: auto; height: 300px;',
                    'option_2' => 'width: 300px; height: auto;',
                    'option_3' => 'width: auto; height: auto;',
                    'option_4' => 'width: 100%; height: 300px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `list-style-type` với giá trị là dấu chấm?',
                    'option_1' => 'list-style-type: disc;',
                    'option_2' => 'list-style-type: circle;',
                    'option_3' => 'list-style-type: square;',
                    'option_4' => 'list-style-type: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo phần tử với hiển thị flex và căn chỉnh các phần tử theo chiều dọc?',
                    'option_1' => 'display: flex; align-items: center;',
                    'option_2' => 'display: flex; justify-content: center;',
                    'option_3' => 'display: flex; flex-direction: column;',
                    'option_4' => 'display: flex; align-items: baseline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `padding` thiết lập khoảng cách giữa nội dung và viền phần tử?',
                    'option_1' => 'padding: 10px;',
                    'option_2' => 'padding: 10px 20px;',
                    'option_3' => 'padding: 10px 20px 30px;',
                    'option_4' => 'padding: 10px 20px 30px 40px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `border-radius` bo tròn chỉ các góc trên bên trái và dưới bên phải?',
                    'option_1' => 'border-radius: 10px 0 10px 0;',
                    'option_2' => 'border-radius: 10px 10px 0 0;',
                    'option_3' => 'border-radius: 10px 0 10px 10px;',
                    'option_4' => 'border-radius: 10px 0 0 10px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-style` với giá trị để làm cho chữ nghiêng?',
                    'option_1' => 'font-style: italic;',
                    'option_2' => 'font-style: oblique;',
                    'option_3' => 'font-style: normal;',
                    'option_4' => 'font-style: underline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `position` tạo phần tử nằm ở dưới cùng của trang?',
                    'option_1' => 'position: absolute; bottom: 0;',
                    'option_2' => 'position: fixed; bottom: 0;',
                    'option_3' => 'position: relative; bottom: 0;',
                    'option_4' => 'position: static; bottom: 0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để tạo một phần tử với đường viền dày 1px và màu xanh lam?',
                    'option_1' => 'border: 1px solid blue;',
                    'option_2' => 'border: 2px dashed blue;',
                    'option_3' => 'border: 1px dotted blue;',
                    'option_4' => 'border: 1px double blue;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `overflow` ẩn nội dung tràn?',
                    'option_1' => 'overflow: hidden;',
                    'option_2' => 'overflow: auto;',
                    'option_3' => 'overflow: scroll;',
                    'option_4' => 'overflow: visible;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-decoration` gạch chân chữ?',
                    'option_1' => 'text-decoration: underline;',
                    'option_2' => 'text-decoration: line-through;',
                    'option_3' => 'text-decoration: overline;',
                    'option_4' => 'text-decoration: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-align` căn trái nội dung của phần tử?',
                    'option_1' => 'text-align: left;',
                    'option_2' => 'text-align: right;',
                    'option_3' => 'text-align: center;',
                    'option_4' => 'text-align: justify;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `line-height` thiết lập khoảng cách giữa các dòng chữ?',
                    'option_1' => 'line-height: 1.5;',
                    'option_2' => 'line-height: 1.2em;',
                    'option_3' => 'line-height: 150%;',
                    'option_4' => 'line-height: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `display` với giá trị là block?',
                    'option_1' => 'display: block;',
                    'option_2' => 'display: inline;',
                    'option_3' => 'display: flex;',
                    'option_4' => 'display: grid;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `visibility` làm cho phần tử không nhìn thấy nhưng vẫn chiếm không gian?',
                    'option_1' => 'visibility: hidden;',
                    'option_2' => 'visibility: visible;',
                    'option_3' => 'visibility: collapse;',
                    'option_4' => 'visibility: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-wrap` cho phép các phần tử gói lại khi cần?',
                    'option_1' => 'flex-wrap: wrap;',
                    'option_2' => 'flex-wrap: nowrap;',
                    'option_3' => 'flex-wrap: wrap-reverse;',
                    'option_4' => 'flex-wrap: auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-grow` để các phần tử chiếm không gian còn lại?',
                    'option_1' => 'flex-grow: 1;',
                    'option_2' => 'flex-grow: 0;',
                    'option_3' => 'flex-grow: auto;',
                    'option_4' => 'flex-grow: 2;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-shrink` điều chỉnh khả năng co của các phần tử?',
                    'option_1' => 'flex-shrink: 1;',
                    'option_2' => 'flex-shrink: 0;',
                    'option_3' => 'flex-shrink: auto;',
                    'option_4' => 'flex-shrink: 2;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-basis` thiết lập kích thước cơ sở cho các phần tử?',
                    'option_1' => 'flex-basis: 100px;',
                    'option_2' => 'flex-basis: auto;',
                    'option_3' => 'flex-basis: 1fr;',
                    'option_4' => 'flex-basis: 50%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-areas` xác định các vùng trong lưới?',
                    'option_1' => 'grid-template-areas: "header header" "main sidebar" "footer footer";',
                    'option_2' => 'grid-template-areas: header header; main sidebar; footer footer;',
                    'option_3' => 'grid-template-areas: header; main; sidebar; footer;',
                    'option_4' => 'grid-template-areas: "header, header" "main, sidebar" "footer, footer";',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-auto-flow` điều chỉnh cách sắp xếp các phần tử trong lưới?',
                    'option_1' => 'grid-auto-flow: row;',
                    'option_2' => 'grid-auto-flow: column;',
                    'option_3' => 'grid-auto-flow: dense;',
                    'option_4' => 'grid-auto-flow: auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-column` xác định phạm vi của một phần tử trên các cột trong lưới?',
                    'option_1' => 'grid-column: 1 / 3;',
                    'option_2' => 'grid-column: 1 / span 2;',
                    'option_3' => 'grid-column: 1 / 2;',
                    'option_4' => 'grid-column: span 2 / 3;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-row` xác định phạm vi của một phần tử trên các hàng trong lưới?',
                    'option_1' => 'grid-row: 1 / 3;',
                    'option_2' => 'grid-row: 1 / span 2;',
                    'option_3' => 'grid-row: 1 / 2;',
                    'option_4' => 'grid-row: span 2 / 3;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-gap` thiết lập khoảng cách giữa các ô trong lưới?',
                    'option_1' => 'grid-gap: 10px;',
                    'option_2' => 'grid-gap: 10%;',
                    'option_3' => 'grid-gap: 10em;',
                    'option_4' => 'grid-gap: 10px 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-columns` thiết lập số lượng cột trong lưới?',
                    'option_1' => 'grid-template-columns: repeat(3, 1fr);',
                    'option_2' => 'grid-template-columns: 3 columns;',
                    'option_3' => 'grid-template-columns: 1fr 1fr 1fr;',
                    'option_4' => 'grid-template-columns: auto auto auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-rows` thiết lập số lượng hàng trong lưới?',
                    'option_1' => 'grid-template-rows: repeat(3, 1fr);',
                    'option_2' => 'grid-template-rows: 3 rows;',
                    'option_3' => 'grid-template-rows: 1fr 1fr 1fr;',
                    'option_4' => 'grid-template-rows: auto auto auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `place-items` để căn chỉnh các phần tử trong lưới?',
                    'option_1' => 'place-items: center;',
                    'option_2' => 'place-items: start;',
                    'option_3' => 'place-items: end;',
                    'option_4' => 'place-items: stretch;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `place-content` để căn chỉnh các phần tử trong lưới?',
                    'option_1' => 'place-content: center;',
                    'option_2' => 'place-content: start;',
                    'option_3' => 'place-content: end;',
                    'option_4' => 'place-content: stretch;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `place-items` với các giá trị cho hàng và cột trong lưới?',
                    'option_1' => 'place-items: center center;',
                    'option_2' => 'place-items: start start;',
                    'option_3' => 'place-items: end end;',
                    'option_4' => 'place-items: stretch stretch;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `place-content` với các giá trị cho hàng và cột trong lưới?',
                    'option_1' => 'place-content: center center;',
                    'option_2' => 'place-content: start start;',
                    'option_3' => 'place-content: end end;',
                    'option_4' => 'place-content: stretch stretch;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-auto-columns` thiết lập kích thước cho các cột tự động trong lưới?',
                    'option_1' => 'grid-auto-columns: 100px;',
                    'option_2' => 'grid-auto-columns: auto;',
                    'option_3' => 'grid-auto-columns: minmax(100px, auto);',
                    'option_4' => 'grid-auto-columns: 1fr;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-auto-rows` thiết lập kích thước cho các hàng tự động trong lưới?',
                    'option_1' => 'grid-auto-rows: 100px;',
                    'option_2' => 'grid-auto-rows: auto;',
                    'option_3' => 'grid-auto-rows: minmax(100px, auto);',
                    'option_4' => 'grid-auto-rows: 1fr;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template` kết hợp các thuộc tính của lưới?',
                    'option_1' => 'grid-template: grid-template-rows grid-template-columns grid-template-areas;',
                    'option_2' => 'grid-template: grid-template-rows / grid-template-columns / grid-template-areas;',
                    'option_3' => 'grid-template: grid-template-areas / grid-template-rows / grid-template-columns;',
                    'option_4' => 'grid-template: grid-template-areas grid-template-columns grid-template-rows;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-clip` thiết lập cách hiển thị nền của phần tử?',
                    'option_1' => 'background-clip: border-box;',
                    'option_2' => 'background-clip: padding-box;',
                    'option_3' => 'background-clip: content-box;',
                    'option_4' => 'background-clip: text;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-origin` thiết lập vị trí bắt đầu của nền?',
                    'option_1' => 'background-origin: border-box;',
                    'option_2' => 'background-origin: padding-box;',
                    'option_3' => 'background-origin: content-box;',
                    'option_4' => 'background-origin: text;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-size` điều chỉnh kích thước nền của phần tử?',
                    'option_1' => 'background-size: cover;',
                    'option_2' => 'background-size: contain;',
                    'option_3' => 'background-size: 100% 100%;',
                    'option_4' => 'background-size: auto;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-repeat` điều chỉnh cách nền được lặp lại?',
                    'option_1' => 'background-repeat: no-repeat;',
                    'option_2' => 'background-repeat: repeat-x;',
                    'option_3' => 'background-repeat: repeat-y;',
                    'option_4' => 'background-repeat: repeat;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `filter` làm cho phần tử có màu sắc xám?',
                    'option_1' => 'filter: grayscale(100%);',
                    'option_2' => 'filter: grayscale(50%);',
                    'option_3' => 'filter: hue-rotate(90deg);',
                    'option_4' => 'filter: sepia(100%);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `backdrop-filter` làm cho phần tử có hiệu ứng mờ nền?',
                    'option_1' => 'backdrop-filter: blur(5px);',
                    'option_2' => 'backdrop-filter: brightness(50%);',
                    'option_3' => 'backdrop-filter: contrast(150%);',
                    'option_4' => 'backdrop-filter: grayscale(100%);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `clip-path` cắt phần tử thành hình tròn?',
                    'option_1' => 'clip-path: circle(50%);',
                    'option_2' => 'clip-path: ellipse(50%);',
                    'option_3' => 'clip-path: polygon(50% 50%, 100% 100%);',
                    'option_4' => 'clip-path: inset(10%);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `object-fit` điều chỉnh kích thước của hình ảnh để bao phủ phần tử?',
                    'option_1' => 'object-fit: cover;',
                    'option_2' => 'object-fit: contain;',
                    'option_3' => 'object-fit: fill;',
                    'option_4' => 'object-fit: scale-down;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `object-position` điều chỉnh vị trí của hình ảnh trong phần tử?',
                    'option_1' => 'object-position: center center;',
                    'option_2' => 'object-position: top left;',
                    'option_3' => 'object-position: bottom right;',
                    'option_4' => 'object-position: top center;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transform` xoay phần tử 45 độ?',
                    'option_1' => 'transform: rotate(45deg);',
                    'option_2' => 'transform: rotate(90deg);',
                    'option_3' => 'transform: rotate(30deg);',
                    'option_4' => 'transform: rotate(60deg);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transform` phóng to phần tử gấp đôi kích thước của nó?',
                    'option_1' => 'transform: scale(2);',
                    'option_2' => 'transform: scale(1.5);',
                    'option_3' => 'transform: scale(3);',
                    'option_4' => 'transform: scale(0.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transform` di chuyển phần tử 10px về phía bên phải?',
                    'option_1' => 'transform: translateX(10px);',
                    'option_2' => 'transform: translateY(10px);',
                    'option_3' => 'transform: translate(10px, 0);',
                    'option_4' => 'transform: translate(0, 10px);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transform` làm cho phần tử nghiêng 30 độ?',
                    'option_1' => 'transform: skew(30deg);',
                    'option_2' => 'transform: skewX(30deg);',
                    'option_3' => 'transform: skewY(30deg);',
                    'option_4' => 'transform: rotate(30deg);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `animation` thiết lập tên của animation?',
                    'option_1' => 'animation: myAnimation 2s ease-in;',
                    'option_2' => 'animation: 2s ease-in myAnimation;',
                    'option_3' => 'animation: ease-in 2s myAnimation;',
                    'option_4' => 'animation: myAnimation ease-in 2s;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `animation` thiết lập thời gian của animation?',
                    'option_1' => 'animation: 3s ease-in;',
                    'option_2' => 'animation: ease-in 3s;',
                    'option_3' => 'animation: 3s ease-out;',
                    'option_4' => 'animation: ease-out 3s;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `animation` thiết lập kiểu easing của animation?',
                    'option_1' => 'animation: 2s ease-in;',
                    'option_2' => 'animation: ease-in 2s;',
                    'option_3' => 'animation: 2s ease-out;',
                    'option_4' => 'animation: ease-out 2s;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `animation` thiết lập số lần lặp lại của animation?',
                    'option_1' => 'animation: myAnimation 2s infinite;',
                    'option_2' => 'animation: 2s infinite myAnimation;',
                    'option_3' => 'animation: infinite 2s myAnimation;',
                    'option_4' => 'animation: myAnimation infinite 2s;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transition` thiết lập thời gian chuyển tiếp?',
                    'option_1' => 'transition: all 0.3s ease;',
                    'option_2' => 'transition: 0.3s ease all;',
                    'option_3' => 'transition: ease 0.3s all;',
                    'option_4' => 'transition: all ease 0.3s;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transition` thiết lập kiểu easing của chuyển tiếp?',
                    'option_1' => 'transition: all 0.5s ease-in;',
                    'option_2' => 'transition: all ease-in 0.5s;',
                    'option_3' => 'transition: ease-in 0.5s all;',
                    'option_4' => 'transition: all 0.5s ease-out;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transition` thiết lập thuộc tính nào sẽ thay đổi?',
                    'option_1' => 'transition: opacity 0.5s ease;',
                    'option_2' => 'transition: all 0.5s ease;',
                    'option_3' => 'transition: width 0.5s ease;',
                    'option_4' => 'transition: background-color 0.5s ease;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `cursor` thay đổi kiểu con trỏ khi di chuột qua phần tử?',
                    'option_1' => 'cursor: pointer;',
                    'option_2' => 'cursor: crosshair;',
                    'option_3' => 'cursor: help;',
                    'option_4' => 'cursor: wait;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `opacity` thiết lập độ mờ của phần tử?',
                    'option_1' => 'opacity: 0.5;',
                    'option_2' => 'opacity: 0.75;',
                    'option_3' => 'opacity: 1;',
                    'option_4' => 'opacity: 0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `visibility` ẩn phần tử nhưng vẫn giữ khoảng trống?',
                    'option_1' => 'visibility: hidden;',
                    'option_2' => 'visibility: collapse;',
                    'option_3' => 'visibility: visible;',
                    'option_4' => 'visibility: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `z-index` điều chỉnh độ ưu tiên hiển thị của phần tử?',
                    'option_1' => 'z-index: 10;',
                    'option_2' => 'z-index: auto;',
                    'option_3' => 'z-index: 1;',
                    'option_4' => 'z-index: 0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `overflow` cho phép cuộn nội dung khi cần thiết?',
                    'option_1' => 'overflow: scroll;',
                    'option_2' => 'overflow: auto;',
                    'option_3' => 'overflow: hidden;',
                    'option_4' => 'overflow: visible;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `resize` cho phép người dùng thay đổi kích thước phần tử?',
                    'option_1' => 'resize: both;',
                    'option_2' => 'resize: horizontal;',
                    'option_3' => 'resize: vertical;',
                    'option_4' => 'resize: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `box-shadow` thêm bóng đổ cho phần tử?',
                    'option_1' => 'box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);',
                    'option_3' => 'box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.5);',
                    'option_4' => 'box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-shadow` thêm bóng đổ cho văn bản?',
                    'option_1' => 'text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.5);',
                    'option_2' => 'text-shadow: 0 0 3px rgba(0, 0, 0, 0.5);',
                    'option_3' => 'text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);',
                    'option_4' => 'text-shadow: 3px 3px 8px rgba(0, 0, 0, 0.5);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-align` căn giữa văn bản?',
                    'option_1' => 'text-align: center;',
                    'option_2' => 'text-align: left;',
                    'option_3' => 'text-align: right;',
                    'option_4' => 'text-align: justify;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `line-height` thiết lập khoảng cách giữa các dòng văn bản?',
                    'option_1' => 'line-height: 1.5;',
                    'option_2' => 'line-height: 2;',
                    'option_3' => 'line-height: normal;',
                    'option_4' => 'line-height: 1;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `letter-spacing` thiết lập khoảng cách giữa các chữ cái?',
                    'option_1' => 'letter-spacing: 1px;',
                    'option_2' => 'letter-spacing: 2px;',
                    'option_3' => 'letter-spacing: 0.5px;',
                    'option_4' => 'letter-spacing: 3px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `text-transform` chuyển văn bản thành chữ hoa?',
                    'option_1' => 'text-transform: uppercase;',
                    'option_2' => 'text-transform: lowercase;',
                    'option_3' => 'text-transform: capitalize;',
                    'option_4' => 'text-transform: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-weight` thiết lập độ đậm của chữ?',
                    'option_1' => 'font-weight: bold;',
                    'option_2' => 'font-weight: bolder;',
                    'option_3' => 'font-weight: normal;',
                    'option_4' => 'font-weight: lighter;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-style` thiết lập kiểu chữ nghiêng?',
                    'option_1' => 'font-style: italic;',
                    'option_2' => 'font-style: oblique;',
                    'option_3' => 'font-style: normal;',
                    'option_4' => 'font-style: underline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-family` thiết lập font chữ cho văn bản?',
                    'option_1' => 'font-family: Arial, sans-serif;',
                    'option_2' => 'font-family: "Times New Roman", serif;',
                    'option_3' => 'font-family: "Courier New", monospace;',
                    'option_4' => 'font-family: Verdana, sans-serif;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `font-size` thiết lập kích thước chữ?',
                    'option_1' => 'font-size: 16px;',
                    'option_2' => 'font-size: 14px;',
                    'option_3' => 'font-size: 18px;',
                    'option_4' => 'font-size: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `margin` thiết lập lề cho phần tử?',
                    'option_1' => 'margin: 10px;',
                    'option_2' => 'margin: 5px;',
                    'option_3' => 'margin: 15px;',
                    'option_4' => 'margin: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `padding` thiết lập khoảng cách bên trong phần tử?',
                    'option_1' => 'padding: 10px;',
                    'option_2' => 'padding: 5px;',
                    'option_3' => 'padding: 15px;',
                    'option_4' => 'padding: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `border` thiết lập đường viền cho phần tử?',
                    'option_1' => 'border: 1px solid black;',
                    'option_2' => 'border: 2px dashed black;',
                    'option_3' => 'border: 3px dotted black;',
                    'option_4' => 'border: 4px double black;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `display` thay đổi cách phần tử được hiển thị?',
                    'option_1' => 'display: block;',
                    'option_2' => 'display: inline;',
                    'option_3' => 'display: flex;',
                    'option_4' => 'display: grid;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `position` thay đổi cách phần tử được định vị?',
                    'option_1' => 'position: absolute;',
                    'option_2' => 'position: relative;',
                    'option_3' => 'position: fixed;',
                    'option_4' => 'position: sticky;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `float` điều chỉnh cách phần tử nổi?',
                    'option_1' => 'float: left;',
                    'option_2' => 'float: right;',
                    'option_3' => 'float: none;',
                    'option_4' => 'float: inherit;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `clear` điều chỉnh cách phần tử làm rõ nổi?',
                    'option_1' => 'clear: both;',
                    'option_2' => 'clear: left;',
                    'option_3' => 'clear: right;',
                    'option_4' => 'clear: none;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-color` thiết lập màu nền cho phần tử?',
                    'option_1' => 'background-color: #f0f0f0;',
                    'option_2' => 'background-color: #e0e0e0;',
                    'option_3' => 'background-color: #d0d0d0;',
                    'option_4' => 'background-color: #c0c0c0;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-image` thiết lập hình ảnh nền cho phần tử?',
                    'option_1' => 'background-image: url("image.jpg");',
                    'option_2' => 'background-image: url("image.png");',
                    'option_3' => 'background-image: url("image.gif");',
                    'option_4' => 'background-image: url("image.svg");',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-repeat` thiết lập cách lặp lại hình ảnh nền?',
                    'option_1' => 'background-repeat: no-repeat;',
                    'option_2' => 'background-repeat: repeat-x;',
                    'option_3' => 'background-repeat: repeat-y;',
                    'option_4' => 'background-repeat: repeat;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-size` thiết lập kích thước hình ảnh nền?',
                    'option_1' => 'background-size: cover;',
                    'option_2' => 'background-size: contain;',
                    'option_3' => 'background-size: auto;',
                    'option_4' => 'background-size: 100%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `background-position` thiết lập vị trí của hình ảnh nền?',
                    'option_1' => 'background-position: center center;',
                    'option_2' => 'background-position: top left;',
                    'option_3' => 'background-position: bottom right;',
                    'option_4' => 'background-position: top center;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `border-radius` thiết lập góc bo tròn của phần tử?',
                    'option_1' => 'border-radius: 10px;',
                    'option_2' => 'border-radius: 5px;',
                    'option_3' => 'border-radius: 15px;',
                    'option_4' => 'border-radius: 20px;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `box-sizing` thiết lập cách tính kích thước phần tử?',
                    'option_1' => 'box-sizing: border-box;',
                    'option_2' => 'box-sizing: content-box;',
                    'option_3' => 'box-sizing: padding-box;',
                    'option_4' => 'box-sizing: margin-box;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-direction` thiết lập hướng chính của phần tử flex?',
                    'option_1' => 'flex-direction: row;',
                    'option_2' => 'flex-direction: column;',
                    'option_3' => 'flex-direction: row-reverse;',
                    'option_4' => 'flex-direction: column-reverse;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `flex-wrap` thiết lập cách các phần tử flex được bọc?',
                    'option_1' => 'flex-wrap: wrap;',
                    'option_2' => 'flex-wrap: nowrap;',
                    'option_3' => 'flex-wrap: wrap-reverse;',
                    'option_4' => 'flex-wrap: inherit;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `justify-content` căn chỉnh các phần tử flex dọc theo hướng chính?',
                    'option_1' => 'justify-content: center;',
                    'option_2' => 'justify-content: flex-start;',
                    'option_3' => 'justify-content: flex-end;',
                    'option_4' => 'justify-content: space-between;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `align-items` căn chỉnh các phần tử flex dọc theo trục phụ?',
                    'option_1' => 'align-items: center;',
                    'option_2' => 'align-items: flex-start;',
                    'option_3' => 'align-items: flex-end;',
                    'option_4' => 'align-items: stretch;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `align-content` căn chỉnh các hàng của phần tử flex dọc theo trục phụ?',
                    'option_1' => 'align-content: center;',
                    'option_2' => 'align-content: flex-start;',
                    'option_3' => 'align-content: flex-end;',
                    'option_4' => 'align-content: space-between;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `align-self` thiết lập căn chỉnh phần tử flex riêng biệt?',
                    'option_1' => 'align-self: auto;',
                    'option_2' => 'align-self: center;',
                    'option_3' => 'align-self: stretch;',
                    'option_4' => 'align-self: baseline;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-columns` thiết lập số cột trong lưới?',
                    'option_1' => 'grid-template-columns: repeat(3, 1fr);',
                    'option_2' => 'grid-template-columns: 1fr 1fr 1fr;',
                    'option_3' => 'grid-template-columns: auto auto auto;',
                    'option_4' => 'grid-template-columns: 25% 25% 25%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-rows` thiết lập số hàng trong lưới?',
                    'option_1' => 'grid-template-rows: repeat(2, 1fr);',
                    'option_2' => 'grid-template-rows: 1fr 1fr;',
                    'option_3' => 'grid-template-rows: auto auto;',
                    'option_4' => 'grid-template-rows: 50% 50%;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-area` thiết lập vị trí của phần tử trong lưới?',
                    'option_1' => 'grid-area: header;',
                    'option_2' => 'grid-area: 1 / 1 / 2 / 2;',
                    'option_3' => 'grid-area: 1 / 1 / 3 / 3;',
                    'option_4' => 'grid-area: header / sidebar / content;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-template-areas` thiết lập các khu vực của lưới?',
                    'option_1' => 'grid-template-areas: "header header header" "sidebar content content" "footer footer footer";',
                    'option_2' => 'grid-template-areas: "header header header" "sidebar content content" "footer footer footer";',
                    'option_3' => 'grid-template-areas: "header header header" "sidebar content sidebar" "footer footer footer";',
                    'option_4' => 'grid-template-areas: "header header header" "sidebar sidebar content" "footer footer footer";',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-column` thiết lập cột cho phần tử trong lưới?',
                    'option_1' => 'grid-column: 1 / span 2;',
                    'option_2' => 'grid-column: 1 / 3;',
                    'option_3' => 'grid-column: 1 / 2;',
                    'option_4' => 'grid-column: 2 / span 2;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `grid-row` thiết lập hàng cho phần tử trong lưới?',
                    'option_1' => 'grid-row: 1 / span 2;',
                    'option_2' => 'grid-row: 1 / 2;',
                    'option_3' => 'grid-row: 1 / 3;',
                    'option_4' => 'grid-row: 2 / span 2;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `object-fit` điều chỉnh cách hình ảnh khớp với vùng chứa?',
                    'option_1' => 'object-fit: cover;',
                    'option_2' => 'object-fit: contain;',
                    'option_3' => 'object-fit: fill;',
                    'option_4' => 'object-fit: scale-down;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `object-position` thiết lập vị trí của hình ảnh trong vùng chứa?',
                    'option_1' => 'object-position: center center;',
                    'option_2' => 'object-position: top left;',
                    'option_3' => 'object-position: bottom right;',
                    'option_4' => 'object-position: top center;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `overflow` thiết lập cách nội dung bị tràn?',
                    'option_1' => 'overflow: auto;',
                    'option_2' => 'overflow: hidden;',
                    'option_3' => 'overflow: scroll;',
                    'option_4' => 'overflow: visible;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `visibility` thiết lập cách phần tử được hiển thị?',
                    'option_1' => 'visibility: visible;',
                    'option_2' => 'visibility: hidden;',
                    'option_3' => 'visibility: collapse;',
                    'option_4' => 'visibility: inherit;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `opacity` thiết lập độ mờ của phần tử?',
                    'option_1' => 'opacity: 0.5;',
                    'option_2' => 'opacity: 0.75;',
                    'option_3' => 'opacity: 1;',
                    'option_4' => 'opacity: 0.25;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `z-index` thiết lập độ ưu tiên hiển thị của phần tử?',
                    'option_1' => 'z-index: 10;',
                    'option_2' => 'z-index: 5;',
                    'option_3' => 'z-index: 15;',
                    'option_4' => 'z-index: 1;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transform` thực hiện các thao tác trên phần tử?',
                    'option_1' => 'transform: rotate(45deg);',
                    'option_2' => 'transform: scale(1.5);',
                    'option_3' => 'transform: translateX(50px);',
                    'option_4' => 'transform: skewX(20deg);',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `transition` thiết lập hiệu ứng chuyển tiếp cho phần tử?',
                    'option_1' => 'transition: all 0.3s ease;',
                    'option_2' => 'transition: opacity 0.5s linear;',
                    'option_3' => 'transition: transform 0.2s ease-in;',
                    'option_4' => 'transition: color 0.4s ease-out;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để sử dụng thuộc tính `animation` thiết lập hiệu ứng hoạt hình cho phần tử?',
                    'option_1' => 'animation: spin 2s linear infinite;',
                    'option_2' => 'animation: bounce 1s ease-in-out;',
                    'option_3' => 'animation: fade 3s ease;',
                    'option_4' => 'animation: slide 1.5s ease-out;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $questions_javascript =
            [
                [
                    'question' => 'JavaScript là ngôn ngữ xử lý ở:',
                    'option_1' => 'Client',
                    'option_2' => 'Server',
                    'option_3' => 'Server/client',
                    'option_4' => 'Không có dạng nào.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp để khai báo biến trong JavaScript là:',
                    'option_1' => 'var',
                    'option_2' => 'let',
                    'option_3' => 'const',
                    'option_4' => 'Tất cả các phương án trên',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để chú thích một dòng trong JavaScript?',
                    'option_1' => '//',
                    'option_2' => '/*',
                    'option_3' => '#',
                    'option_4' => ';;',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để khai báo một hàm trong JavaScript?',
                    'option_1' => 'function',
                    'option_2' => 'def',
                    'option_3' => 'func',
                    'option_4' => 'method',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'JavaScript có loại dữ liệu nào?',
                    'option_1' => 'String',
                    'option_2' => 'Number',
                    'option_3' => 'Boolean',
                    'option_4' => 'Tất cả các phương án trên',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi sử dụng `console.log()`, điều gì xảy ra?',
                    'option_1' => 'In thông tin ra màn hình console',
                    'option_2' => 'Ghi thông tin vào file',
                    'option_3' => 'Hiển thị thông tin trong alert box',
                    'option_4' => 'Không có gì xảy ra',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào sau đây là đúng để so sánh bằng trong JavaScript?',
                    'option_1' => '==',
                    'option_2' => '===',
                    'option_3' => '!=',
                    'option_4' => 'Tất cả các phương án trên',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào sau đây được dùng để khai báo mảng trong JavaScript?',
                    'option_1' => '[]',
                    'option_2' => '{}',
                    'option_3' => '()',
                    'option_4' => '<>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Hàm nào được gọi khi một sự kiện xảy ra trên trang web?',
                    'option_1' => 'Event handler',
                    'option_2' => 'Event listener',
                    'option_3' => 'Event generator',
                    'option_4' => 'Event creator',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào dùng để kiểm tra điều kiện trong JavaScript?',
                    'option_1' => 'if',
                    'option_2' => 'check',
                    'option_3' => 'condition',
                    'option_4' => 'verify',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào trong JavaScript được sử dụng để khai báo một biến không thay đổi?',
                    'option_1' => 'const',
                    'option_2' => 'let',
                    'option_3' => 'var',
                    'option_4' => 'static',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Toán tử nào dùng để kết nối hai chuỗi trong JavaScript?',
                    'option_1' => '+',
                    'option_2' => '-',
                    'option_3' => '*',
                    'option_4' => '/',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Chức năng của `parseInt()` trong JavaScript là gì?',
                    'option_1' => 'Chuyển đổi chuỗi thành số nguyên',
                    'option_2' => 'Chuyển đổi số thành chuỗi',
                    'option_3' => 'Chuyển đổi số thành số thực',
                    'option_4' => 'Chuyển đổi chuỗi thành số thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào là đúng để gọi một hàm trong JavaScript?',
                    'option_1' => 'functionName()',
                    'option_2' => 'call functionName',
                    'option_3' => 'functionName[]',
                    'option_4' => 'call functionName()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => '`NaN` trong JavaScript có nghĩa là gì?',
                    'option_1' => 'Not a Number',
                    'option_2' => 'New Array Number',
                    'option_3' => 'Null and Number',
                    'option_4' => 'None of the above',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Sự khác biệt giữa `==` và `===` trong JavaScript là gì?',
                    'option_1' => '`==` so sánh giá trị, `===` so sánh giá trị và kiểu dữ liệu',
                    'option_2' => '`==` so sánh giá trị và kiểu dữ liệu, `===` so sánh giá trị',
                    'option_3' => 'Không có sự khác biệt',
                    'option_4' => '`==` dùng cho chuỗi, `===` dùng cho số',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp để khai báo một đối tượng trong JavaScript là gì?',
                    'option_1' => '{}',
                    'option_2' => '[]',
                    'option_3' => '()',
                    'option_4' => '<>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để lặp qua mảng trong JavaScript?',
                    'option_1' => 'for',
                    'option_2' => 'while',
                    'option_3' => 'forEach',
                    'option_4' => 'do while',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Hàm nào được gọi khi một trang web được tải xong?',
                    'option_1' => 'onload',
                    'option_2' => 'onclick',
                    'option_3' => 'onchange',
                    'option_4' => 'onmouseover',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để kiểm tra loại dữ liệu của một biến trong JavaScript, bạn sử dụng hàm nào?',
                    'option_1' => 'typeof',
                    'option_2' => 'instanceof',
                    'option_3' => 'checktype',
                    'option_4' => 'datatype',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để thêm phần tử vào cuối mảng?',
                    'option_1' => 'push()',
                    'option_2' => 'pop()',
                    'option_3' => 'shift()',
                    'option_4' => 'unshift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để tạo một đối tượng mới từ một lớp trong JavaScript, bạn sử dụng từ khóa nào?',
                    'option_1' => 'new',
                    'option_2' => 'create',
                    'option_3' => 'class',
                    'option_4' => 'object',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để loại bỏ phần tử cuối cùng của một mảng?',
                    'option_1' => 'pop()',
                    'option_2' => 'push()',
                    'option_3' => 'shift()',
                    'option_4' => 'unshift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một hàm không có tham số?',
                    'option_1' => 'function myFunction() {}',
                    'option_2' => 'function myFunction[] {}',
                    'option_3' => 'function myFunction() () {}',
                    'option_4' => 'function myFunction {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một biến toàn cục trong JavaScript?',
                    'option_1' => 'var',
                    'option_2' => 'let',
                    'option_3' => 'const',
                    'option_4' => 'global',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để tạo một đối tượng từ lớp trong JavaScript?',
                    'option_1' => 'new ClassName()',
                    'option_2' => 'ClassName.create()',
                    'option_3' => 'ClassName.new()',
                    'option_4' => 'create ClassName()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào dùng để phân cách các phần tử trong mảng?',
                    'option_1' => ',',
                    'option_2' => ';',
                    'option_3' => ':',
                    'option_4' => '|',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kết nối hai chuỗi trong JavaScript?',
                    'option_1' => 'String1 + String2',
                    'option_2' => 'String1 - String2',
                    'option_3' => 'String1 * String2',
                    'option_4' => 'String1 / String2',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào để lấy độ dài của một chuỗi trong JavaScript?',
                    'option_1' => 'length',
                    'option_2' => 'size',
                    'option_3' => 'count',
                    'option_4' => 'lengthOf',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để kết thúc câu lệnh trong JavaScript?',
                    'option_1' => ';',
                    'option_2' => ':',
                    'option_3' => ',',
                    'option_4' => '.',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để khai báo một đối tượng trong JavaScript?',
                    'option_1' => '{}',
                    'option_2' => '[]',
                    'option_3' => '()',
                    'option_4' => '||',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào được sử dụng để khai báo một biến trong JavaScript mà giá trị của nó có thể thay đổi?',
                    'option_1' => 'let',
                    'option_2' => 'const',
                    'option_3' => 'var',
                    'option_4' => 'static',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra điều kiện trong JavaScript?',
                    'option_1' => 'if',
                    'option_2' => 'for',
                    'option_3' => 'while',
                    'option_4' => 'switch',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để loại bỏ phần tử đầu tiên của một mảng?',
                    'option_1' => 'shift()',
                    'option_2' => 'pop()',
                    'option_3' => 'push()',
                    'option_4' => 'unshift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào dùng để định nghĩa một lớp trong JavaScript?',
                    'option_1' => 'class ClassName {}',
                    'option_2' => 'create ClassName {}',
                    'option_3' => 'define ClassName {}',
                    'option_4' => 'new ClassName {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi nào bạn nên sử dụng từ khóa `const` trong JavaScript?',
                    'option_1' => 'Khi giá trị của biến không thay đổi',
                    'option_2' => 'Khi giá trị của biến thay đổi',
                    'option_3' => 'Khi bạn muốn khai báo một hàm',
                    'option_4' => 'Khi bạn muốn khai báo một đối tượng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để thực hiện một vòng lặp từ 1 đến 10 trong JavaScript, cú pháp nào là đúng?',
                    'option_1' => 'for (let i = 1; i <= 10; i++) {}',
                    'option_2' => 'for (let i = 0; i < 10; i++) {}',
                    'option_3' => 'for (let i = 1; i < 10; i++) {}',
                    'option_4' => 'for (let i = 0; i <= 10; i++) {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để thêm phần tử vào đầu mảng?',
                    'option_1' => 'unshift()',
                    'option_2' => 'push()',
                    'option_3' => 'pop()',
                    'option_4' => 'shift()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi nào bạn sử dụng từ khóa `let` trong JavaScript?',
                    'option_1' => 'Khi bạn muốn khai báo một biến có phạm vi khối',
                    'option_2' => 'Khi bạn muốn khai báo một biến toàn cục',
                    'option_3' => 'Khi bạn muốn khai báo một hàm',
                    'option_4' => 'Khi bạn muốn khai báo một lớp',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào trả về chuỗi với chữ hoa đầu tiên trong JavaScript?',
                    'option_1' => 'toUpperCase()',
                    'option_2' => 'capitalize()',
                    'option_3' => 'toCapitalized()',
                    'option_4' => 'toLowerCase()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi bạn muốn so sánh hai đối tượng trong JavaScript, bạn nên dùng toán tử nào?',
                    'option_1' => '===',
                    'option_2' => '==',
                    'option_3' => '<>',
                    'option_4' => '!=',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để tạo một chuỗi trong JavaScript?',
                    'option_1' => '"My String"',
                    'option_2' => '"My String"',
                    'option_3' => 'My String',
                    'option_4' => 'String("My String")',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Sự khác biệt giữa `null` và `undefined` trong JavaScript là gì?',
                    'option_1' => '`null` là giá trị không có, `undefined` là không được định nghĩa',
                    'option_2' => '`null` là không được định nghĩa, `undefined` là giá trị không có',
                    'option_3' => 'Không có sự khác biệt',
                    'option_4' => '`null` và `undefined` là giống nhau',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra xem một giá trị có phải là mảng không?',
                    'option_1' => 'Array.isArray()',
                    'option_2' => 'isArray()',
                    'option_3' => 'checkArray()',
                    'option_4' => 'typeOfArray()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để nối hai mảng trong JavaScript?',
                    'option_1' => 'concat()',
                    'option_2' => 'merge()',
                    'option_3' => 'join()',
                    'option_4' => 'append()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để chọn phần tử HTML theo ID trong JavaScript?',
                    'option_1' => 'document.getElementById()',
                    'option_2' => 'document.querySelector()',
                    'option_3' => 'document.getElementByClass()',
                    'option_4' => 'document.getElement()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để loại bỏ khoảng trắng ở đầu và cuối chuỗi?',
                    'option_1' => 'trim()',
                    'option_2' => 'slice()',
                    'option_3' => 'replace()',
                    'option_4' => 'substring()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để viết chuỗi nhiều dòng trong JavaScript?',
                    'option_1' => '`',
                    'option_2' => '"',
                    'option_3' => '\'',
                    'option_4' => ';',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra xem một giá trị có phải là số không?',
                    'option_1' => 'isNaN()',
                    'option_2' => 'isNumber()',
                    'option_3' => 'checkNumber()',
                    'option_4' => 'typeof',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào được sử dụng để khai báo một biến trong JavaScript mà không thể thay đổi giá trị?',
                    'option_1' => 'const',
                    'option_2' => 'let',
                    'option_3' => 'var',
                    'option_4' => 'immutable',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để lấy giá trị của một thuộc tính trong đối tượng?',
                    'option_1' => 'object.property',
                    'option_2' => 'object.get(property)',
                    'option_3' => 'object.getProperty(property)',
                    'option_4' => 'object[property]',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một lớp trong JavaScript?',
                    'option_1' => 'class MyClass {}',
                    'option_2' => 'class MyClass() {}',
                    'option_3' => 'new MyClass {}',
                    'option_4' => 'MyClass class {}',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào được sử dụng để lấy một phần của chuỗi?',
                    'option_1' => 'substring()',
                    'option_2' => 'slice()',
                    'option_3' => 'splice()',
                    'option_4' => 'sub()',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào được dùng để khai báo một biến toàn cục trong JavaScript?',
                    'option_1' => 'var',
                    'option_2' => 'let',
                    'option_3' => 'const',
                    'option_4' => 'global',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào trong JavaScript được sử dụng để khai báo một hàm?',
                    'option_1' => 'function',
                    'option_2' => 'func',
                    'option_3' => 'method',
                    'option_4' => 'define',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để khai báo một biến trong phạm vi khối trong JavaScript?',
                    'option_1' => 'let',
                    'option_2' => 'var',
                    'option_3' => 'const',
                    'option_4' => 'global',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để thay thế một phần của chuỗi trong JavaScript?',
                    'option_1' => 'replace()',
                    'option_2' => 'sub()',
                    'option_3' => 'slice()',
                    'option_4' => 'split()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Sự khác biệt giữa `==` và `===` trong JavaScript là gì?',
                    'option_1' => '`==` so sánh giá trị, `===` so sánh giá trị và kiểu dữ liệu',
                    'option_2' => '`==` so sánh giá trị và kiểu dữ liệu, `===` so sánh giá trị',
                    'option_3' => '`==` là toán tử so sánh, `===` là toán tử gán',
                    'option_4' => 'Không có sự khác biệt',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để khai báo một hàm trong JavaScript?',
                    'option_1' => 'function',
                    'option_2' => 'def',
                    'option_3' => 'func',
                    'option_4' => 'method',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Để gọi một hàm trong JavaScript, cú pháp nào là đúng?',
                    'option_1' => 'functionName()',
                    'option_2' => 'call functionName',
                    'option_3' => 'functionName[]',
                    'option_4' => 'call functionName()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để xóa tất cả phần tử trong mảng?',
                    'option_1' => 'splice()',
                    'option_2' => 'pop()',
                    'option_3' => 'shift()',
                    'option_4' => 'remove()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Khi nào bạn sử dụng từ khóa `var` trong JavaScript?',
                    'option_1' => 'Khi bạn muốn khai báo biến toàn cục',
                    'option_2' => 'Khi bạn muốn khai báo biến khối',
                    'option_3' => 'Khi bạn muốn khai báo hàm',
                    'option_4' => 'Khi bạn muốn khai báo đối tượng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào dùng để so sánh hai giá trị trong JavaScript?',
                    'option_1' => '==',
                    'option_2' => '=',
                    'option_3' => '===',
                    'option_4' => '<>',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Từ khóa nào trong JavaScript dùng để khai báo một biến không thay đổi?',
                    'option_1' => 'const',
                    'option_2' => 'let',
                    'option_3' => 'var',
                    'option_4' => 'static',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào được sử dụng để kết thúc một câu lệnh trong JavaScript?',
                    'option_1' => ';',
                    'option_2' => '.',
                    'option_3' => ',',
                    'option_4' => ':',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Phương thức nào dùng để lấy phần tử theo tên lớp trong JavaScript?',
                    'option_1' => 'document.getElementsByClassName()',
                    'option_2' => 'document.querySelectorAll()',
                    'option_3' => 'document.getElementById()',
                    'option_4' => 'document.querySelector()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Ký tự nào dùng để khai báo một mảng trong JavaScript?',
                    'option_1' => '[]',
                    'option_2' => '{}',
                    'option_3' => '()',
                    'option_4' => '||',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Cú pháp nào để kiểm tra kiểu dữ liệu của một giá trị trong JavaScript?',
                    'option_1' => 'typeof',
                    'option_2' => 'instanceof',
                    'option_3' => 'isType()',
                    'option_4' => 'typeOf()',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof NaN);\n```',
                    'option_1' => 'number',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'object',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet a = { name: "John" };\nlet b = a;\nb.name = "Doe";\nconsole.log(a.name);\n```',
                    'option_1' => 'Doe',
                    'option_2' => 'John',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == [1]);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([] + []);\n```',
                    'option_1' => '""',
                    'option_2' => '[]',
                    'option_3' => 'null',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nfunction foo() {\n  console.log(arguments.length);\n}\nfoo(1, 2, 3);\n```',
                    'option_1' => '3',
                    'option_2' => '0',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 10;\n(function() {\n  let x = 20;\n  console.log(x);\n})();\nconsole.log(x);\n```',
                    'option_1' => '20, 10',
                    'option_2' => '10, 20',
                    'option_3' => 'undefined, 10',
                    'option_4' => '20, undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconst arr = [obj];\nobj.a = 2;\nconsole.log(arr);\n```',
                    'option_1' => '[{ a: 2 }]',
                    'option_2' => '[{ a: 1 }]',
                    'option_3' => '[]',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof null);\n```',
                    'option_1' => 'object',
                    'option_2' => 'null',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(1 + "1" - 1);\n```',
                    'option_1' => '10',
                    'option_2' => '11',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconst clone = Object.assign({}, obj);\nclone.a = 2;\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(2 * "3");\n```',
                    'option_1' => '6',
                    'option_2' => '23',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = (function() {\n  let x = 10;\n  return function() { return x; };\n})();\nconsole.log(foo());\n```',
                    'option_1' => '10',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => 'NaN',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.length = 2;\nconsole.log(arr);\n```',
                    'option_1' => '[1, 2]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => '[2, 3]',
                    'option_4' => '[]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.push(4);\narr.shift();\nconsole.log(arr);\n```',
                    'option_1' => '[2, 3, 4]',
                    'option_2' => '[1, 2, 3, 4]',
                    'option_3' => '[2, 3]',
                    'option_4' => '[1, 3, 4]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  return {\n    bar: 1\n  };\n};\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.splice(1, 1);\nconsole.log(arr);\n```',
                    'option_1' => '[1, 3]',
                    'option_2' => '[2, 3]',
                    'option_3' => '[1, 2]',
                    'option_4' => '[1, 2, 3]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconst obj2 = { ...obj, b: 2 };\nconsole.log(obj2);\n```',
                    'option_1' => '{ a: 1, b: 2 }',
                    'option_2' => '{ a: 1 }',
                    'option_3' => '{ b: 2 }',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = 1;\nconst b = { a: 2 };\nconsole.log(b.a);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(0.1 + 0.2 === 0.3);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = { bar: 1 };\nObject.defineProperty(foo, "bar", { value: 2, writable: false });\nfoo.bar = 3;\nconsole.log(foo.bar);\n```',
                    'option_1' => '2',
                    'option_2' => '3',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = async () => { return 1; };\nfoo().then(console.log);\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => 'async function',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 1;\n(function() {\n  let x = 2;\n  console.log(x);\n})()\nconsole.log(x);\n```',
                    'option_1' => '2, 1',
                    'option_2' => '1, 2',
                    'option_3' => 'undefined, 1',
                    'option_4' => '2, undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.unshift(0);\nconsole.log(arr);\n```',
                    'option_1' => '[0, 1, 2, 3]',
                    'option_2' => '[1, 2, 3, 0]',
                    'option_3' => '[0, 1, 2]',
                    'option_4' => '[1, 2, 0]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == true);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = [1, 2, 3];\nconsole.log(a == b);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconsole.log(Object.keys(obj));\n```',
                    'option_1' => '["a"]',
                    'option_2' => 'undefined',
                    'option_3' => '["a", 1]',
                    'option_4' => '[]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(0 == []);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 1;\nfunction foo() {\n  x = 2;\n}\nfoo();\nconsole.log(x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("5" - 2);\n```',
                    'option_1' => '3',
                    'option_2' => '52',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(2 ** 3);\n```',
                    'option_1' => '8',
                    'option_2' => '6',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(({} + []) === "0");\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("Hello".charAt(0));\n```',
                    'option_1' => 'H',
                    'option_2' => 'e',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == true);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst fn = (x, y) => x + y;\nconsole.log(fn(1, 2));\n```',
                    'option_1' => '3',
                    'option_2' => 'undefined',
                    'option_3' => '12',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("5" + 5);\n```',
                    'option_1' => '55',
                    'option_2' => '10',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet a = { x: 1 };\nlet b = a;\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr.push(arr[0]);\nconsole.log(arr);\n```',
                    'option_1' => '[1, 2, 3, 1]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => '[2, 3, 1]',
                    'option_4' => '[1, 1, 2, 3]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  let x = 1;\n  return function() { return x; };\n};\nconst bar = foo();\nconsole.log(bar());\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => 'NaN',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = { a: 1 };\nconst y = { b: 2 };\nconst z = { ...x, ...y };\nconsole.log(z);\n```',
                    'option_1' => '{ a: 1, b: 2 }',
                    'option_2' => '{ a: 1 }',
                    'option_3' => '{ b: 2 }',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof []);\n```',
                    'option_1' => 'object',
                    'option_2' => 'array',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = 1;\nconst b = { a: 2 };\nconsole.log(a + b.a);\n```',
                    'option_1' => '3',
                    'option_2' => '12',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst arr = [1, 2, 3];\narr[10] = 10;\nconsole.log(arr.length);\n```',
                    'option_1' => '11',
                    'option_2' => '10',
                    'option_3' => '3',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(1 + "2" + "3");\n```',
                    'option_1' => '123',
                    'option_2' => '6',
                    'option_3' => '15',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(1 + + "1");\n```',
                    'option_1' => '2',
                    'option_2' => '11',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  var x = 1;\n  if (true) {\n    var x = 2;\n    console.log(x);\n  }\n  console.log(x);\n};\nfoo();\n```',
                    'option_1' => '2, 2',
                    'option_2' => '1, 2',
                    'option_3' => '2, 1',
                    'option_4' => 'undefined, 2',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = Object.create({ a: 1 });\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'null',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([2] == [2]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet a = 5;\nlet b = a++ + ++a;\nconsole.log(b);\n```',
                    'option_1' => '12',
                    'option_2' => '11',
                    'option_3' => '10',
                    'option_4' => 'undefined',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  console.log(this);\n};\nfoo();\n```',
                    'option_1' => 'undefined',
                    'option_2' => 'window (global object)',
                    'option_3' => 'null',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log({} + []);\n```',
                    'option_1' => '[object Object]',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a;\nconst c = [...a];\nconsole.log(b === c);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = { a: 1 };\nconst y = { ...x };\nconsole.log(x === y);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\na.length = 0;\nconsole.log(a);\n```',
                    'option_1' => '[]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { ...a };\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("10" / 2);\n```',
                    'option_1' => '5',
                    'option_2' => '102',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == 1);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = [1, 2, 3];\nconsole.log(a === b);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nconsole.log(Object.entries(obj));\n```',
                    'option_1' => '[["a", 1]]',
                    'option_2' => '[["a"]] ',
                    'option_3' => 'undefined',
                    'option_4' => '[]',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => {\n  let x = 1;\n  if (true) {\n    let x = 2;\n    console.log(x);\n  }\n  console.log(x);\n};\nfoo();\n```',
                    'option_1' => '2, 1',
                    'option_2' => '1, 2',
                    'option_3' => '2, 2',
                    'option_4' => '1, 1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nlet x = 5;\nconst y = (x = 10);\nconsole.log(y);\n```',
                    'option_1' => '10',
                    'option_2' => '5',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = 1;\nconst b = { a: 2 };\nconsole.log(a + b.a);\n```',
                    'option_1' => '3',
                    'option_2' => '12',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = { a: 1 };\nconst bar = { a: 1 };\nconsole.log(foo == bar);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = [...a];\nb.push(4);\nconsole.log(a);\n```',
                    'option_1' => '[1, 2, 3]',
                    'option_2' => '[1, 2, 3, 4]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof (function(){}));\n```',
                    'option_1' => 'function',
                    'option_2' => 'object',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(null == undefined);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = 5;\nconst y = x++;\nconsole.log(y);\n```',
                    'option_1' => '5',
                    'option_2' => '6',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = function(x) { return x * 2; };\nconsole.log(foo(2));\n```',
                    'option_1' => '4',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("a" + + "b");\n```',
                    'option_1' => 'aNaN',
                    'option_2' => 'a0',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([2] + [2]);\n```',
                    'option_1' => '22',
                    'option_2' => '[2,2]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == [1]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = Object.assign({}, a);\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = [1, 2, 3];\nconst y = x;\nconsole.log(x === y);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { ...a };\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst obj = { x: 1 };\nconsole.log(Object.keys(obj));\n```',
                    'option_1' => '["x"]',
                    'option_2' => '["x", "y"]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 2 };\nconst c = { ...a, ...b };\nconsole.log(c.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1, 2] == [1, 2]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = [1, 2, 3];\nconst y = [1, 2, 3];\nconsole.log(x == y);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log({} + []);\n```',
                    'option_1' => '[object Object]',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a.slice(1);\nconsole.log(b);\n```',
                    'option_1' => '[2, 3]',
                    'option_2' => '[1, 2]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a.splice(1, 1);\nconsole.log(b);\n```',
                    'option_1' => '[2]',
                    'option_2' => '[1, 2]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 2 };\nconst c = { ...a, ...b };\nconsole.log(c.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 2 };\nconst c = Object.assign({}, a, b);\nconsole.log(c.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(typeof [1, 2, 3]);\n```',
                    'option_1' => 'object',
                    'option_2' => 'array',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = [1, 2, 3];\nconst b = a.reverse();\nconsole.log(a);\n```',
                    'option_1' => '[3, 2, 1]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = () => { return { bar: 1 } };\nconsole.log(foo());\n```',
                    'option_1' => '{ bar: 1 }',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '() => { bar: 1 }',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst x = [1, 2, 3];\nconst y = x.concat([4, 5]);\nconsole.log(y);\n```',
                    'option_1' => '[1, 2, 3, 4, 5]',
                    'option_2' => '[1, 2, 3]',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("1" + 1);\n```',
                    'option_1' => '11',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { ...a };\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([] == []);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log({} + []);\n```',
                    'option_1' => '[object Object]',
                    'option_2' => 'NaN',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([] == ![]);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = a;\nb.x = 2;\nconsole.log(a.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log([1] == [1]);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(Object.is(NaN, NaN));\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 1 };\nconsole.log(Object.is(a, b));\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 1 };\nconsole.log(a.x == b.x);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = Object.create(a);\nconsole.log(b.x);\n```',
                    'option_1' => '1',
                    'option_2' => 'undefined',
                    'option_3' => 'Error',
                    'option_4' => '0',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst a = { x: 1 };\nconst b = { x: 1 };\nconsole.log(a === b);\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconst foo = { x: 1 };\nconst bar = foo;\nbar.x = 2;\nconsole.log(foo.x);\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(0 == "0");\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log("0" == 0);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(false == 0);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```javascript\nconsole.log(null == undefined);\n```',
                    'option_1' => 'true',
                    'option_2' => 'false',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $questions_php =
            [
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\necho 1 + 1;\n?>\n```',
                    'option_1' => '2',
                    'option_2' => '11',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\necho "Hello " . "World";\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'HelloWorld',
                    'option_3' => 'Hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$number = 10;\necho $number;\n?>\n```',
                    'option_1' => '10',
                    'option_2' => 'number',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho $var[1];\n?>\n```',
                    'option_1' => 'H',
                    'option_2' => 'P',
                    'option_3' => 'P',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$colors = array("red", "green", "blue");\necho $colors[1];\n?>\n```',
                    'option_1' => 'green',
                    'option_2' => 'red',
                    'option_3' => 'blue',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$names = array("Alice", "Bob", "Charlie");\necho count($names);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$x = 5;\n$y = 10;\necho $x + $y;\n?>\n```',
                    'option_1' => '15',
                    'option_2' => '510',
                    'option_3' => '5',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello, World!";\necho strlen($var);\n?>\n```',
                    'option_1' => '13',
                    'option_2' => '12',
                    'option_3' => '14',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 5;\necho $var++;\n?>\n```',
                    'option_1' => '5',
                    'option_2' => '6',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$age = 20;\nif ($age > 18) {\n    echo "Adult";\n} else {\n    echo "Minor";\n}\n?>\n```',
                    'option_1' => 'Adult',
                    'option_2' => 'Minor',
                    'option_3' => 'undefined',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$number = 3;\necho $number * 2;\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '5',
                    'option_3' => '8',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$numbers = array(1, 2, 3);\necho $numbers[2];\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "10";\necho $var + 5;\n?>\n```',
                    'option_1' => '15',
                    'option_2' => '105',
                    'option_3' => '10',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$day = "Monday";\necho "Today is " . $day;\n?>\n```',
                    'option_1' => 'Today is Monday',
                    'option_2' => 'Today is Monday',
                    'option_3' => 'Today is',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$x = 10;\n$y = 5;\necho $x / $y;\n?>\n```',
                    'option_1' => '2',
                    'option_2' => '5',
                    'option_3' => '10',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$number = 100;\necho number_format($number, 2);\n?>\n```',
                    'option_1' => '100.00',
                    'option_2' => '100',
                    'option_3' => '100.0',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho $var[1];\n?>\n```',
                    'option_1' => 'e',
                    'option_2' => 'H',
                    'option_3' => 'l',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$sum = 1 + 2 + 3;\necho $sum;\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '5',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$bool = true;\necho $bool ? "Yes" : "No";\n?>\n```',
                    'option_1' => 'Yes',
                    'option_2' => 'No',
                    'option_3' => 'true',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$price = 99.99;\necho round($price);\n?>\n```',
                    'option_1' => '100',
                    'option_2' => '99',
                    'option_3' => '100.00',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$number = 8;\necho $number % 3;\n?>\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => '0',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "World";\necho strtoupper($var);\n?>\n```',
                    'option_1' => 'WORLD',
                    'option_2' => 'world',
                    'option_3' => 'World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 5;\necho $var--;\n?>\n```',
                    'option_1' => '5',
                    'option_2' => '4',
                    'option_3' => '6',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho ucfirst($var);\n?>\n```',
                    'option_1' => 'Hello',
                    'option_2' => 'hello',
                    'option_3' => 'HELLO',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "123abc";\necho is_numeric($var);\n?>\n```',
                    'option_1' => 'false',
                    'option_2' => 'true',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$age = 21;\necho ($age >= 18) ? "Adult" : "Minor";\n?>\n```',
                    'option_1' => 'Adult',
                    'option_2' => 'Minor',
                    'option_3' => '21',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho strlen($var);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '4',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$numbers = array(1, 2, 3);\necho array_sum($numbers);\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '5',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$fruit = "Apple";\necho substr($fruit, 1, 3);\n?>\n```',
                    'option_1' => 'ppl',
                    'option_2' => 'App',
                    'option_3' => 'ple',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = array("one", "two", "three");\necho implode(", ", $var);\n?>\n```',
                    'option_1' => 'one, two, three',
                    'option_2' => 'one,two,three',
                    'option_3' => 'one two three',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "10 apples";\necho (int)$var;\n?>\n```',
                    'option_1' => '10',
                    'option_2' => '0',
                    'option_3' => '10 apples',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho strpos($var, "World");\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '0',
                    'option_3' => '5',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 15;\necho $var % 4;\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '7',
                    'option_3' => '15',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello world";\necho ucwords($var);\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'HELLO WORLD',
                    'option_3' => 'hello world',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho str_repeat($var, 3);\n?>\n```',
                    'option_1' => 'testtesttest',
                    'option_2' => 'testtest',
                    'option_3' => 'testtesttesttest',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho strtolower($var);\n?>\n```',
                    'option_1' => 'php',
                    'option_2' => 'PHP',
                    'option_3' => 'Php',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 100;\necho number_format($var, 2);\n?>\n```',
                    'option_1' => '100.00',
                    'option_2' => '100',
                    'option_3' => '100.0',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 7;\necho $var * 3;\n?>\n```',
                    'option_1' => '21',
                    'option_2' => '7',
                    'option_3' => '30',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho strlen($var);\n?>\n```',
                    'option_1' => '5',
                    'option_2' => '6',
                    'option_3' => '4',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "123";\necho $var * 2;\n?>\n```',
                    'option_1' => '246',
                    'option_2' => '123123',
                    'option_3' => '1232',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 10;\necho $var--;\n?>\n```',
                    'option_1' => '10',
                    'option_2' => '9',
                    'option_3' => '11',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho $var[0];\n?>\n```',
                    'option_1' => 'P',
                    'option_2' => 'H',
                    'option_3' => 'p',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP is fun";\necho str_replace("fun", "awesome", $var);\n?>\n```',
                    'option_1' => 'PHP is awesome',
                    'option_2' => 'PHP is fun',
                    'option_3' => 'PHP is',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "2024";\necho (int)$var;\n?>\n```',
                    'option_1' => '2024',
                    'option_2' => '202',
                    'option_3' => '24',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = array("a" => 1, "b" => 2);\necho $var["a"];\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => 'a',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho ucfirst($var);\n?>\n```',
                    'option_1' => 'Hello',
                    'option_2' => 'HELLO',
                    'option_3' => 'hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "  spaces  ";\necho trim($var);\n?>\n```',
                    'option_1' => 'spaces',
                    'option_2' => '  spaces',
                    'option_3' => 'spaces  ',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello, PHP";\necho explode(", ", $var)[1];\n?>\n```',
                    'option_1' => 'PHP',
                    'option_2' => 'Hello',
                    'option_3' => 'Hello, PHP',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "2024";\necho $var + 1;\n?>\n```',
                    'option_1' => '2025',
                    'option_2' => '2024',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "12.34";\necho round($var);\n?>\n```',
                    'option_1' => '12',
                    'option_2' => '13',
                    'option_3' => '12.34',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho strrev($var);\n?>\n```',
                    'option_1' => 'olleH',
                    'option_2' => 'Hello',
                    'option_3' => 'Helo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "   test   ";\necho strlen($var);\n?>\n```',
                    'option_1' => '10',
                    'option_2' => '7',
                    'option_3' => '6',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 3;\necho $var ** 2;\n?>\n```',
                    'option_1' => '9',
                    'option_2' => '6',
                    'option_3' => '33',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho strlen(trim($var));\n?>\n```',
                    'option_1' => '5',
                    'option_2' => '7',
                    'option_3' => '4',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 5;\necho $var ** 2;\n?>\n```',
                    'option_1' => '25',
                    'option_2' => '10',
                    'option_3' => '20',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "  text  ";\necho strlen(trim($var));\n?>\n```',
                    'option_1' => '4',
                    'option_2' => '7',
                    'option_3' => '6',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "123";\necho (int)$var + 1;\n?>\n```',
                    'option_1' => '124',
                    'option_2' => '123',
                    'option_3' => '12',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "string";\necho substr($var, -3);\n?>\n```',
                    'option_1' => 'ing',
                    'option_2' => 'str',
                    'option_3' => 'ing',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = 3;\necho $var % 2;\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho str_repeat($var, 2);\n?>\n```',
                    'option_1' => 'hellohello',
                    'option_2' => 'hellohellohello',
                    'option_3' => 'hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3, 4, 5];\necho array_sum($var);\n?>\n```',
                    'option_1' => '15',
                    'option_2' => '5',
                    'option_3' => '10',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "2024";\necho $var . 1;\n?>\n```',
                    'option_1' => '20241',
                    'option_2' => '2025',
                    'option_3' => '2024',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho strtoupper($var);\n?>\n```',
                    'option_1' => 'HELLO',
                    'option_2' => 'Hello',
                    'option_3' => 'HELLO',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho count($var);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho strpos($var, "e");\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '0',
                    'option_3' => '2',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = ["a" => 1, "b" => 2];\necho array_key_exists("a", $var);\n?>\n```',
                    'option_1' => '1',
                    'option_2' => 'true',
                    'option_3' => 'false',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho implode("-", $var);\n?>\n```',
                    'option_1' => '1-2-3',
                    'option_2' => '123',
                    'option_3' => '1 2 3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "2024";\necho (float)$var;\n?>\n```',
                    'option_1' => '2024.0',
                    'option_2' => '2024',
                    'option_3' => '2024.00',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho substr($var, 1, 2);\n?>\n```',
                    'option_1' => 'es',
                    'option_2' => 'te',
                    'option_3' => 'test',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho ucwords($var);\n?>\n```',
                    'option_1' => 'Hello',
                    'option_2' => 'HELLO',
                    'option_3' => 'Hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3, 4];\necho array_pop($var);\n?>\n```',
                    'option_1' => '4',
                    'option_2' => '1',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho str_repeat($var, 3);\n?>\n```',
                    'option_1' => 'testtesttest',
                    'option_2' => 'testtest',
                    'option_3' => 'testtesttesttest',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_shift($var);\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '3',
                    'option_3' => '2',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "2024";\necho strrev($var);\n?>\n```',
                    'option_1' => '4202',
                    'option_2' => '2024',
                    'option_3' => '4042',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello, World!";\necho substr($var, 7);\n?>\n```',
                    'option_1' => 'World!',
                    'option_2' => 'Hello, World!',
                    'option_3' => 'World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "42";\necho intval($var);\n?>\n```',
                    'option_1' => '42',
                    'option_2' => '42.0',
                    'option_3' => '4',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho max($var);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '1',
                    'option_3' => '2',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "string";\necho strlen($var);\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '7',
                    'option_3' => '5',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho str_pad($var, 5, "x");\n?>\n```',
                    'option_1' => 'abcxx',
                    'option_2' => 'xxabc',
                    'option_3' => 'abc',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "a,b,c";\necho explode(",", $var)[1];\n?>\n```',
                    'option_1' => 'b',
                    'option_2' => 'a',
                    'option_3' => 'c',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_pop($var);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "php";\necho ucfirst($var);\n?>\n```',
                    'option_1' => 'Php',
                    'option_2' => 'php',
                    'option_3' => 'PHP',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3, 4];\necho array_sum($var);\n?>\n```',
                    'option_1' => '10',
                    'option_2' => '4',
                    'option_3' => '7',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho substr($var, 0, 5);\n?>\n```',
                    'option_1' => 'Hello',
                    'option_2' => 'World',
                    'option_3' => 'Hello World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho str_replace("o", "a", $var);\n?>\n```',
                    'option_1' => 'faa',
                    'option_2' => 'foo',
                    'option_3' => 'fao',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho str_repeat($var, 4);\n?>\n```',
                    'option_1' => 'testtesttesttest',
                    'option_2' => 'testtesttest',
                    'option_3' => 'testtesttesttesttest',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho strlen($var);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '4',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho str_replace("b", "", $var);\n?>\n```',
                    'option_1' => 'ac',
                    'option_2' => 'ab',
                    'option_3' => 'bc',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho str_pad($var, 5, "x");\n?>\n```',
                    'option_1' => 'fooxx',
                    'option_2' => 'xxfoo',
                    'option_3' => 'foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho ucfirst($var);\n?>\n```',
                    'option_1' => 'Foo',
                    'option_2' => 'foo',
                    'option_3' => 'FOO',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho strtoupper($var);\n?>\n```',
                    'option_1' => 'TEST',
                    'option_2' => 'test',
                    'option_3' => 'Test',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho ucwords($var);\n?>\n```',
                    'option_1' => 'Hello',
                    'option_2' => 'HELLO',
                    'option_3' => 'hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho strtolower($var);\n?>\n```',
                    'option_1' => 'php',
                    'option_2' => 'PHP',
                    'option_3' => 'Php',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho str_pad($var, 8, "-");\n?>\n```',
                    'option_1' => 'test----',
                    'option_2' => '-test---',
                    'option_3' => 'test',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello world";\necho ucfirst($var);\n?>\n```',
                    'option_1' => 'Hello world',
                    'option_2' => 'hello world',
                    'option_3' => 'Hello World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_shift($var);\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "a,b,c";\necho implode("|", explode(",", $var));\n?>\n```',
                    'option_1' => 'a|b|c',
                    'option_2' => 'a,b,c',
                    'option_3' => 'a b c',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho strtolower(substr($var, 6));\n?>\n```',
                    'option_1' => 'world',
                    'option_2' => 'World',
                    'option_3' => 'hello world',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho count($var);\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho str_repeat($var, 2);\n?>\n```',
                    'option_1' => 'abcabc',
                    'option_2' => 'abc',
                    'option_3' => 'abcabcabc',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho strrev($var);\n?>\n```',
                    'option_1' => 'cba',
                    'option_2' => 'abc',
                    'option_3' => 'ab',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho strtr($var, "a", "x");\n?>\n```',
                    'option_1' => 'xbc',
                    'option_2' => 'xbc',
                    'option_3' => 'abc',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello world";\necho str_replace("world", "", $var);\n?>\n```',
                    'option_1' => 'hello ',
                    'option_2' => 'hello world',
                    'option_3' => 'world',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abcd";\necho substr($var, 1, 2);\n?>\n```',
                    'option_1' => 'bc',
                    'option_2' => 'abcd',
                    'option_3' => 'ab',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho str_repeat($var, 2);\n?>\n```',
                    'option_1' => 'foofoo',
                    'option_2' => 'foo',
                    'option_3' => 'fofoo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho str_pad($var, 10, "-");\n?>\n```',
                    'option_1' => 'hello-----',
                    'option_2' => '-----hello',
                    'option_3' => 'hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho strtoupper($var);\n?>\n```',
                    'option_1' => 'FOO',
                    'option_2' => 'foo',
                    'option_3' => 'Foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho strtolower($var);\n?>\n```',
                    'option_1' => 'foo',
                    'option_2' => 'FOO',
                    'option_3' => 'Foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "string";\necho strlen($var);\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '7',
                    'option_3' => '5',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho str_replace("World", "PHP", $var);\n?>\n```',
                    'option_1' => 'Hello PHP',
                    'option_2' => 'Hello World',
                    'option_3' => 'Hello PHP World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_sum($var);\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '5',
                    'option_3' => '7',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho str_repeat($var, 2);\n?>\n```',
                    'option_1' => 'testtest',
                    'option_2' => 'test',
                    'option_3' => 'testtesttest',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho strlen($var);\n?>\n```',
                    'option_1' => '4',
                    'option_2' => '5',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\n$var2 = "World";\necho sprintf("%s %s", $var, $var2);\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'Hello',
                    'option_3' => 'World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\n$var2 = [4, 5, 6];\necho implode(",", array_merge($var, $var2));\n?>\n```',
                    'option_1' => '1,2,3,4,5,6',
                    'option_2' => '1,2,3',
                    'option_3' => '4,5,6',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "123abc";\necho preg_replace("/[0-9]/", "", $var);\n?>\n```',
                    'option_1' => 'abc',
                    'option_2' => '123',
                    'option_3' => 'Error',
                    'option_4' => '123abc',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho ucwords(strtolower($var));\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'hello world',
                    'option_3' => 'Hello world',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho trim($var, "t");\n?>\n```',
                    'option_1' => 'es',
                    'option_2' => 'test',
                    'option_3' => 'Error',
                    'option_4' => 'est',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho str_replace("World", "PHP", $var);\n?>\n```',
                    'option_1' => 'Hello PHP',
                    'option_2' => 'Hello World',
                    'option_3' => 'Hello PHP World',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_sum($var);\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '5',
                    'option_3' => '7',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho str_repeat($var, 3);\n?>\n```',
                    'option_1' => 'testtesttest',
                    'option_2' => 'testtest',
                    'option_3' => 'testtesttesttest',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho strtolower($var);\n?>\n```',
                    'option_1' => 'hello',
                    'option_2' => 'Hello',
                    'option_3' => 'HELLO',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "a,b,c";\necho implode("-", explode(",", $var));\n?>\n```',
                    'option_1' => 'a-b-c',
                    'option_2' => 'a,b,c',
                    'option_3' => 'a b c',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "a,b,c";\necho explode(",", $var)[2];\n?>\n```',
                    'option_1' => 'c',
                    'option_2' => 'a',
                    'option_3' => 'b',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_shift($var);\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3, 4];\necho array_pop($var);\n?>\n```',
                    'option_1' => '4',
                    'option_2' => '3',
                    'option_3' => '2',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho str_pad($var, 5, "-");\n?>\n```',
                    'option_1' => 'foo--',
                    'option_2' => '--foo',
                    'option_3' => 'foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho ucfirst($var);\n?>\n```',
                    'option_1' => 'Foo',
                    'option_2' => 'foo',
                    'option_3' => 'FOO',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho strtoupper($var);\n?>\n```',
                    'option_1' => 'FOO',
                    'option_2' => 'foo',
                    'option_3' => 'Foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho substr($var, 6, 5);\n?>\n```',
                    'option_1' => 'World',
                    'option_2' => 'Hello',
                    'option_3' => 'o Wor',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "test";\necho strtr($var, "t", "x");\n?>\n```',
                    'option_1' => 'xex',
                    'option_2' => 'text',
                    'option_3' => 'tete',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho implode("-", array_reverse($var));\n?>\n```',
                    'option_1' => '3-2-1',
                    'option_2' => '1-2-3',
                    'option_3' => '2-3-1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "abc";\necho str_replace("b", "", $var);\n?>\n```',
                    'option_1' => 'ac',
                    'option_2' => 'abc',
                    'option_3' => 'a',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_key_first($var);\n?>\n```',
                    'option_1' => '0',
                    'option_2' => '1',
                    'option_3' => '2',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1 => "a", 3 => "b", 2 => "c"];\necho key(array_values($var));\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '1',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_search(2, $var);\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => '0',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "123";\necho $var + 1;\n?>\n```',
                    'option_1' => '124',
                    'option_2' => '123',
                    'option_3' => 'Error',
                    'option_4' => '1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "true";\necho (bool) $var;\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '0',
                    'option_3' => 'true',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "null";\necho is_null($var);\n?>\n```',
                    'option_1' => '0',
                    'option_2' => '1',
                    'option_3' => 'null',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "5";\necho (int) $var + 1;\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '5',
                    'option_3' => '51',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho $var[0];\n?>\n```',
                    'option_1' => 'f',
                    'option_2' => 'o',
                    'option_3' => 'foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = ["a", "b", "c"];\necho $var[1];\n?>\n```',
                    'option_1' => 'b',
                    'option_2' => 'a',
                    'option_3' => 'c',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho ucfirst(strtoupper($var));\n?>\n```',
                    'option_1' => 'Hello',
                    'option_2' => 'HELLO',
                    'option_3' => 'HELLO',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho strlen(strstr($var, "World"));\n?>\n```',
                    'option_1' => '5',
                    'option_2' => '6',
                    'option_3' => '11',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho substr_replace($var, "World", 0, 5);\n?>\n```',
                    'option_1' => 'World',
                    'option_2' => 'HelloWorld',
                    'option_3' => 'Error',
                    'option_4' => 'Hello',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_product($var);\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '9',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "   foo   ";\necho trim($var);\n?>\n```',
                    'option_1' => 'foo',
                    'option_2' => '   foo   ',
                    'option_3' => 'Error',
                    'option_4' => 'foo ',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "a";\necho ord($var);\n?>\n```',
                    'option_1' => '97',
                    'option_2' => '65',
                    'option_3' => 'Error',
                    'option_4' => 'a',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho md5($var);\n?>\n```',
                    'option_1' => 'acbd18db4cc2f85cedef654fccc4a4d8',
                    'option_2' => 'd41d8cd98f00b204e9800998ecf8427e',
                    'option_3' => 'Error',
                    'option_4' => 'foo',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "a,b,c";\necho count(explode(",", $var));\n?>\n```',
                    'option_1' => '3',
                    'option_2' => '2',
                    'option_3' => '4',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1 => "a", 2 => "b"];\necho array_key_last($var);\n?>\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => 'Error',
                    'option_4' => '0',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho sha1($var);\n?>\n```',
                    'option_1' => 'acbd18db4cc2f85cedef654fccc4a4d8',
                    'option_2' => '9c56a7f6c8c4583e22f1e2edff75fa11',
                    'option_3' => 'Error',
                    'option_4' => 'foo',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_sum(array_map(function($item) { return $item * 2; }, $var));\n?>\n```',
                    'option_1' => '12',
                    'option_2' => '18',
                    'option_3' => '6',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "5";\necho (int) ($var * 2);\n?>\n```',
                    'option_1' => '10',
                    'option_2' => '5',
                    'option_3' => 'Error',
                    'option_4' => '52',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho count(array_filter($var, function($item) { return $item > 1; }));\n?>\n```',
                    'option_1' => '2',
                    'option_2' => '1',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello";\necho str_rot13($var);\n?>\n```',
                    'option_1' => 'Uryyb',
                    'option_2' => 'Hello',
                    'option_3' => 'Error',
                    'option_4' => 'uryyb',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho strpos($var, "o");\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '0',
                    'option_3' => '2',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = ["a" => "foo", "b" => "bar"];\necho array_key_first($var);\n?>\n```',
                    'option_1' => 'a',
                    'option_2' => 'b',
                    'option_3' => 'foo',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3];\necho array_reduce($var, function($carry, $item) { return $carry + $item; });\n?>\n```',
                    'option_1' => '6',
                    'option_2' => '3',
                    'option_3' => '9',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "foo";\necho strtolower(substr($var, 0, 1)) . strtoupper(substr($var, 1));\n?>\n```',
                    'option_1' => 'fOO',
                    'option_2' => 'Foo',
                    'option_3' => 'FOO',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Hello World";\necho implode(" ", explode(" ", $var, -1));\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'HelloWorld',
                    'option_3' => 'Hello',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3, 4];\necho array_pop($var);\necho array_shift($var);\n?>\n```',
                    'option_1' => '43',
                    'option_2' => '34',
                    'option_3' => 'Error',
                    'option_4' => '32',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "example@example.com";\necho substr($var, strrpos($var, "@") + 1);\n?>\n```',
                    'option_1' => 'example.com',
                    'option_2' => 'com',
                    'option_3' => '@example.com',
                    'option_4' => 'Error',
                    'answer' => 2,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = [1, 2, 3, 4];\necho array_slice($var, 1, 2);\n?>\n```',
                    'option_1' => '[2, 3]',
                    'option_2' => '2, 3',
                    'option_3' => '[2, 3, 4]',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho strtolower($var);\n?>\n```',
                    'option_1' => 'php',
                    'option_2' => 'PHP',
                    'option_3' => 'Error',
                    'option_4' => 'phP',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello world";\necho ucwords($var);\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'hello world',
                    'option_3' => 'HELLO WORLD',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello";\necho str_pad($var, 10, "-");\n?>\n```',
                    'option_1' => 'hello-----',
                    'option_2' => 'hello',
                    'option_3' => 'Error',
                    'option_4' => 'hello--',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "12345";\necho str_split($var, 2);\n?>\n```',
                    'option_1' => '[12, 34, 5]',
                    'option_2' => '[12, 34, 56]',
                    'option_3' => '[1, 2, 3, 4, 5]',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "PHP";\necho str_repeat($var, 3);\n?>\n```',
                    'option_1' => 'PHPPHPPHP',
                    'option_2' => 'PHP PHP PHP',
                    'option_3' => 'PHP PHPPHP',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "12345";\necho substr($var, -3);\n?>\n```',
                    'option_1' => '345',
                    'option_2' => '123',
                    'option_3' => '45',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "Test";\necho strrev($var);\n?>\n```',
                    'option_1' => 'tseT',
                    'option_2' => 'Test',
                    'option_3' => 'Error',
                    'option_4' => 'tseT ',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "example";\necho str_word_count($var);\n?>\n```',
                    'option_1' => '1',
                    'option_2' => '2',
                    'option_3' => '3',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "hello world";\necho ucwords($var);\n?>\n```',
                    'option_1' => 'Hello World',
                    'option_2' => 'hello world',
                    'option_3' => 'HELLO WORLD',
                    'option_4' => 'Error',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n<?php\n$var = "   hello   ";\necho strlen(trim($var));\n?>\n```',
                    'option_1' => '5',
                    'option_2' => '7',
                    'option_3' => 'Error',
                    'option_4' => '10',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $questions_angular =
            [
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<h1>{{ title }}</h1>`,\n})\nexport class AppComponent {\n  title = \'Hello World\';\n}\n```',
                    'option_1' => 'Hiển thị "Hello World"',
                    'option_2' => 'Hiển thị "title"',
                    'option_3' => 'Lỗi',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<button (click)="clickMe()">Click Me</button>`,\n})\nexport class AppComponent {\n  clickMe() {\n    alert(\'Clicked!\');\n  }\n}\n```',
                    'option_1' => 'Hiển thị hộp thoại "Clicked!" khi nhấn nút',
                    'option_2' => 'Không có hành động gì',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Click Me"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<div *ngIf="isVisible">Visible</div>`,\n})\nexport class AppComponent {\n  isVisible = true;\n}\n```',
                    'option_1' => 'Hiển thị "Visible"',
                    'option_2' => 'Không hiển thị gì',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "isVisible"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ value | uppercase }}</p>`,\n})\nexport class AppComponent {\n  value = \'hello\';\n}\n```',
                    'option_1' => 'Hiển thị "HELLO"',
                    'option_2' => 'Hiển thị "hello"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<input [(ngModel)]="name"> <p>{{ name }}</p>`,\n})\nexport class AppComponent {\n  name = \'Angular\';\n}\n```',
                    'option_1' => 'Hiển thị ô input và tên đã nhập',
                    'option_2' => 'Hiển thị ô input và "Angular"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<ul><li *ngFor="let item of items">{{ item }}</li></ul>`,\n})\nexport class AppComponent {\n  items = [\'One\', \'Two\', \'Three\'];\n}\n```',
                    'option_1' => 'Hiển thị danh sách các mục',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị danh sách rỗng',
                    'option_4' => 'Hiển thị "One Two Three"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<div [ngStyle]="{color: color}">Styled Text</div>`,\n})\nexport class AppComponent {\n  color = \'red\';\n}\n```',
                    'option_1' => 'Hiển thị văn bản với màu đỏ',
                    'option_2' => 'Hiển thị văn bản với màu mặc định',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Styled Text"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<div [ngClass]="{active: isActive}">Class Binding</div>`,\n  styles: [`.active { color: green; }`]\n})\nexport class AppComponent {\n  isActive = true;\n}\n```',
                    'option_1' => 'Hiển thị văn bản với lớp "active" màu xanh lá cây',
                    'option_2' => 'Hiển thị văn bản với màu mặc định',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị văn bản với lớp "active"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ getMessage() }}</p>`,\n})\nexport class AppComponent {\n  getMessage() {\n    return \'Hello from method\';\n  }\n}\n```',
                    'option_1' => 'Hiển thị "Hello from method"',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị "getMessage()"',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<input [value]="value" (input)="value = $event.target.value">`,\n})\nexport class AppComponent {\n  value = \'Initial\';\n}\n```',
                    'option_1' => 'Hiển thị ô input với giá trị "Initial"',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị ô input không có giá trị',
                    'option_4' => 'Hiển thị "Initial" trong ô input và không thể thay đổi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<button [disabled]="isDisabled">Click</button>`,\n})\nexport class AppComponent {\n  isDisabled = false;\n}\n```',
                    'option_1' => 'Hiển thị nút không bị vô hiệu hóa',
                    'option_2' => 'Hiển thị nút bị vô hiệu hóa',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<h2>{{ title | slice:0:4 }}</h2>`,\n})\nexport class AppComponent {\n  title = \'Angular Rocks\';\n}\n```',
                    'option_1' => 'Hiển thị "Angl"',
                    'option_2' => 'Hiển thị "Angular"',
                    'option_3' => 'Hiển thị "Angular Rock"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 + 1 }}</p>`,\n})\nexport class AppComponent {}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1 + 1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<input #myInput> <button (click)="logValue(myInput.value)">Log Value</button>`,\n})\nexport class AppComponent {\n  logValue(value: string) {\n    console.log(value);\n  }\n}\n```',
                    'option_1' => 'Hiển thị giá trị của ô input trong console khi nhấn nút',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị giá trị của nút trong console',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<div [ngClass]="{highlighted: isHighlighted}">Text</div>`,\n  styles: [`.highlighted { background-color: yellow; }`]\n})\nexport class AppComponent {\n  isHighlighted = true;\n}\n```',
                    'option_1' => 'Hiển thị văn bản với nền màu vàng',
                    'option_2' => 'Hiển thị văn bản với nền màu mặc định',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị văn bản với lớp "highlighted"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ name?.length }}</p>`,\n})\nexport class AppComponent {\n  name?: string;\n}\n```',
                    'option_1' => 'Hiển thị "undefined"',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị "0"',
                    'option_4' => 'Hiển thị "null"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<div *ngFor="let item of items; let i = index">{{ i }}: {{ item }}</div>`,\n})\nexport class AppComponent {\n  items = [\'Item1\', \'Item2\', \'Item3\'];\n}\n```',
                    'option_1' => 'Hiển thị danh sách các mục kèm chỉ số',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị danh sách các mục',
                    'option_4' => 'Hiển thị chỉ số của các mục',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ value ?? "Default" }}</p>`,\n})\nexport class AppComponent {\n  value?: string;\n}\n```',
                    'option_1' => 'Hiển thị "Default"',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị "value"',
                    'option_4' => 'Hiển thị "null"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.join(", ") }}</p>`,\n})\nexport class AppComponent {\n  items = [\'Angular\', \'React\', \'Vue\'];\n}\n```',
                    'option_1' => 'Hiển thị "Angular, React, Vue"',
                    'option_2' => 'Hiển thị "Angular React Vue"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Angular, React"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p [attr.data-name]="name">Name</p>`,\n})\nexport class AppComponent {\n  name = \'Angular\';\n}\n```',
                    'option_1' => 'Hiển thị thẻ p với thuộc tính data-name="Angular"',
                    'option_2' => 'Hiển thị thẻ p với thuộc tính data-name không có giá trị',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị thẻ p với thuộc tính data-name="name"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<button (click)="toggle()">Toggle</button> <p>{{ isToggled ? "On" : "Off" }}</p>`,\n})\nexport class AppComponent {\n  isToggled = false;\n  toggle() {\n    this.isToggled = !this.isToggled;\n  }\n}\n```',
                    'option_1' => 'Hiển thị "On" hoặc "Off" tùy thuộc vào trạng thái',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị "Toggle"',
                    'option_4' => 'Hiển thị "On"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p [ngModel]="name"></p>`,\n})\nexport class AppComponent {\n  name = \'Angular\';\n}\n```',
                    'option_1' => 'Hiển thị giá trị của biến name trong thẻ p',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị "name"',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ data?.length }}</p>`,\n})\nexport class AppComponent {\n  data?: number[] = [1, 2, 3];\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "undefined"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "data"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<input [(ngModel)]="value" placeholder="Enter value">`,\n})\nexport class AppComponent {\n  value = \'Test\';\n}\n```',
                    'option_1' => 'Hiển thị ô input với giá trị "Test"',
                    'option_2' => 'Hiển thị ô input không có giá trị',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị giá trị "Enter value"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<button (click)="increment()">Increment</button> <p>{{ counter }}</p>`,\n})\nexport class AppComponent {\n  counter = 0;\n  increment() {\n    this.counter++;\n  }\n}\n```',
                    'option_1' => 'Hiển thị số tăng dần mỗi khi nhấn nút',
                    'option_2' => 'Hiển thị số không thay đổi',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Increment"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p *ngIf="show">Visible</p>`,\n})\nexport class AppComponent {\n  show = false;\n}\n```',
                    'option_1' => 'Không hiển thị gì',
                    'option_2' => 'Hiển thị "Visible"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "show"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<ul><li *ngFor="let item of items">{{ item }}</li></ul>`,\n})\nexport class AppComponent {\n  items = [];\n}\n```',
                    'option_1' => 'Hiển thị danh sách trống',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị danh sách các mục',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p [style.color]="color">Colored Text</p>`,\n})\nexport class AppComponent {\n  color = \'blue\';\n}\n```',
                    'option_1' => 'Hiển thị văn bản với màu xanh dương',
                    'option_2' => 'Hiển thị văn bản với màu mặc định',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Colored Text"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ text.toUpperCase() }}</p>`,\n})\nexport class AppComponent {\n  text = \'hello\';\n}\n```',
                    'option_1' => 'Hiển thị "HELLO"',
                    'option_2' => 'Hiển thị "hello"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "text"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ getGreeting() }}</p>`,\n})\nexport class AppComponent {\n  getGreeting() {\n    return \'Hello World\';\n  }\n}\n```',
                    'option_1' => 'Hiển thị "Hello World"',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị "getGreeting()"',
                    'option_4' => 'Không có gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ value ?? "Fallback" }}</p>`,\n})\nexport class AppComponent {\n  value = null;\n}\n```',
                    'option_1' => 'Hiển thị "Fallback"',
                    'option_2' => 'Hiển thị "null"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "value"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.length }}</p>`,\n})\nexport class AppComponent {\n  items = [\'One\', \'Two\'];\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "One, Two"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<button (click)="showAlert()">Show Alert</button>`,\n})\nexport class AppComponent {\n  showAlert() {\n    alert(\'Hello!\');\n  }\n}\n```',
                    'option_1' => 'Hiển thị hộp thoại với thông báo "Hello!" khi nhấn nút',
                    'option_2' => 'Hiển thị lỗi',
                    'option_3' => 'Hiển thị hộp thoại với thông báo "Show Alert"',
                    'option_4' => 'Hiển thị "Show Alert"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p [ngStyle]="{fontSize: size + \'px\'}">Resizable Text</p>`,\n})\nexport class AppComponent {\n  size = 20;\n}\n```',
                    'option_1' => 'Hiển thị văn bản với kích thước font 20px',
                    'option_2' => 'Hiển thị văn bản với kích thước font mặc định',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Resizable Text"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ message.split(" ").length }}</p>`,\n})\nexport class AppComponent {\n  message = \'Hello Angular World\';\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "Hello Angular World"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "message"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ title.toLowerCase() }}</p>`,\n})\nexport class AppComponent {\n  title = \'Angular Basics\';\n}\n```',
                    'option_1' => 'Hiển thị "angular basics"',
                    'option_2' => 'Hiển thị "Angular Basics"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "title"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ list.length > 0 ? list[0] : "Empty" }}</p>`,\n})\nexport class AppComponent {\n  list = [\'First\', \'Second\'];\n}\n```',
                    'option_1' => 'Hiển thị "First"',
                    'option_2' => 'Hiển thị "Empty"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "list"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ value || "Fallback" }}</p>`,\n})\nexport class AppComponent {\n  value = \'\';\n}\n```',
                    'option_1' => 'Hiển thị "Fallback"',
                    'option_2' => 'Hiển thị ""',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "value"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.reduce((a, b) => a + b, 0) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "10"',
                    'option_2' => 'Hiển thị "1,2,3,4"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.slice(1, 3) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\', \'d\'];\n}\n```',
                    'option_1' => 'Hiển thị "b,c"',
                    'option_2' => 'Hiển thị "a,b,c,d"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "b,c,d"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.filter(num => num > 2) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "3,4"',
                    'option_2' => 'Hiển thị "1,2,3,4"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.some(num => num > 2) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.every(num => num > 0) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.includes(\'b\') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.length > 2 ? items[2] : items[0] }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "c"',
                    'option_2' => 'Hiển thị "b"',
                    'option_3' => 'Hiển thị "a"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.join(", ") }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "a, b, c"',
                    'option_2' => 'Hiển thị "a b c"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.reduce((a, b) => a - b) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "-8"',
                    'option_2' => 'Hiển thị "-2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.find(num => num > 2) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "4"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.filter(num => num < 2) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.reduce((a, b) => a * b) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "24"',
                    'option_2' => 'Hiển thị "10"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.slice(-2) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\', \'d\'];\n}\n```',
                    'option_1' => 'Hiển thị "c,d"',
                    'option_2' => 'Hiển thị "a,b"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "b,c"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.pop() }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "c"',
                    'option_2' => 'Hiển thị "a"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "b"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.map(num => num * 2) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "2,4,6,8"',
                    'option_2' => 'Hiển thị "1,2,3,4"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ data | json }}</p>`,\n})\nexport class AppComponent {\n  data = { name: \'Angular\', version: 14 };\n}\n```',
                    'option_1' => 'Hiển thị "{ "name": "Angular", "version": 14 }"',
                    'option_2' => 'Hiển thị "Angular, 14"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "data"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ obj.key1 ?? "Default" }}</p>`,\n})\nexport class AppComponent {\n  obj = { key2: \'value\' };\n}\n```',
                    'option_1' => 'Hiển thị "Default"',
                    'option_2' => 'Hiển thị "value"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "obj"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.sort() }}</p>`,\n})\nexport class AppComponent {\n  numbers = [4, 2, 5, 1, 3];\n}\n```',
                    'option_1' => 'Hiển thị "1,2,3,4,5"',
                    'option_2' => 'Hiển thị "4,2,5,1,3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.indexOf(\'apple\') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'banana\', \'apple\', \'orange\'];\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ text.repeat(2) }}</p>`,\n})\nexport class AppComponent {\n  text = \'Angular \';\n}\n```',
                    'option_1' => 'Hiển thị "Angular Angular "',
                    'option_2' => 'Hiển thị "Angular"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "text"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ obj[\'key\'] }}</p>`,\n})\nexport class AppComponent {\n  obj = { key: \'Value\' };\n}\n```',
                    'option_1' => 'Hiển thị "Value"',
                    'option_2' => 'Hiển thị "key"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "obj"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (count > 5 ? count : 5) }}</p>`,\n})\nexport class AppComponent {\n  count = 3;\n}\n```',
                    'option_1' => 'Hiển thị "5"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "count"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ user?.name }}</p>`,\n})\nexport class AppComponent {\n  user = null;\n}\n```',
                    'option_1' => 'Hiển thị ""',
                    'option_2' => 'Hiển thị "null"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "user"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.find(n => n % 2 === 0) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 3, 5, 8, 9];\n}\n```',
                    'option_1' => 'Hiển thị "8"',
                    'option_2' => 'Hiển thị "5"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.filter(i => i.length > 5) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'short\', \'a bit longer\', \'much longer item\'];\n}\n```',
                    'option_1' => 'Hiển thị "a bit longer, much longer item"',
                    'option_2' => 'Hiển thị "short"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.reduce((acc, cur) => acc + cur, \'\') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'A\', \'B\', \'C\'];\n}\n```',
                    'option_1' => 'Hiển thị "ABC"',
                    'option_2' => 'Hiển thị "A,B,C"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ message.split(\' \').length }}</p>`,\n})\nexport class AppComponent {\n  message = \'Hello World!\'\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "message"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.map(n => n * 3).filter(n => n > 5) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3];\n}\n```',
                    'option_1' => 'Hiển thị "6,9"',
                    'option_2' => 'Hiển thị "3,6"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (flag ? \'Yes\' : \'No\') }}</p>`,\n})\nexport class AppComponent {\n  flag = true;\n}\n```',
                    'option_1' => 'Hiển thị "Yes"',
                    'option_2' => 'Hiển thị "No"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "flag"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.join(\' - \') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'one\', \'two\', \'three\'];\n}\n```',
                    'option_1' => 'Hiển thị "one - two - three"',
                    'option_2' => 'Hiển thị "one,two,three"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].concat([3, 4]) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2,3,4"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "concat"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.slice(1, 3) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\', \'d\'];\n}\n```',
                    'option_1' => 'Hiển thị "b,c"',
                    'option_2' => 'Hiển thị "a,b,c"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (3 ** 2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "9"',
                    'option_2' => 'Hiển thị "6"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "3"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.map(item => item.toUpperCase()) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'angular\', \'typescript\'];\n}\n```',
                    'option_1' => 'Hiển thị "ANGULAR,TYPESCRIPT"',
                    'option_2' => 'Hiển thị "angular,typescript"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.includes(\'a\') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.every(n => n > 0) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 2, 3, 4];\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ numbers.some(n => n % 2 === 0) }}</p>`,\n})\nexport class AppComponent {\n  numbers = [1, 3, 5, 7];\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "numbers"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.splice(1, 2) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\', \'d\'];\n}\n```',
                    'option_1' => 'Hiển thị "b,c"',
                    'option_2' => 'Hiển thị "b,c,d"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ {a: 1, b: 2} }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "[object Object]"',
                    'option_2' => 'Hiển thị "{a: 1, b: 2}"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.pop() }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "c"',
                    'option_2' => 'Hiển thị "a"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.reverse() }}</p>`,\n})\nexport class AppComponent {\n  items = [\'one\', \'two\', \'three\'];\n}\n```',
                    'option_1' => 'Hiển thị "three,two,one"',
                    'option_2' => 'Hiển thị "one,two,three"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.slice(-2) }}</p>`,\n})\nexport class AppComponent {\n  items = [\'x\', \'y\', \'z\'];\n}\n```',
                    'option_1' => 'Hiển thị "y,z"',
                    'option_2' => 'Hiển thị "x,y"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.includes(\'z\') ? \'Found\' : \'Not found\' }}</p>`,\n})\nexport class AppComponent {\n  items = [\'x\', \'y\'];\n}\n```',
                    'option_1' => 'Hiển thị "Not found"',
                    'option_2' => 'Hiển thị "Found"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (1 + 2) * 3 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "9"',
                    'option_2' => 'Hiển thị "6"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ true && false }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 5 * 5 == 25 ? \'Correct\' : \'Incorrect\' }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "Correct"',
                    'option_2' => 'Hiển thị "Incorrect"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (4 % 2 === 0) ? \'Even\' : \'Odd\' }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "Even"',
                    'option_2' => 'Hiển thị "Odd"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Math.max(1, 2, 3, 4, 5) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "5"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (new Date().getDay() === 0) ? \'Sunday\' : \'Not Sunday\' }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "Sunday" nếu hôm nay là Chủ nhật, ngược lại "Not Sunday"',
                    'option_2' => 'Hiển thị "Not Sunday" nếu hôm nay là Chủ nhật, ngược lại "Sunday"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Array(3).fill(1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,1,1"',
                    'option_2' => 'Hiển thị "[1,1,1]"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "Array(3).fill(1)"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].reduce((a, b) => a + b) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "6"',
                    'option_2' => 'Hiển thị "1,2,3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "reduce"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].length }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "6"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "length"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (3 * 2) / 6 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (2 ** 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "8"',
                    'option_2' => 'Hiển thị "6"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "2"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.shift() }}</p>`,\n})\nexport class AppComponent {\n  items = [\'x\', \'y\', \'z\'];\n}\n```',
                    'option_1' => 'Hiển thị "x"',
                    'option_2' => 'Hiển thị "z"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (5 + 3) % 4 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "0"',
                    'option_2' => 'Hiển thị "8"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.join(\'\') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "abc"',
                    'option_2' => 'Hiển thị "a,b,c"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].concat([3, 4]).reverse() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "4,3,2,1"',
                    'option_2' => 'Hiển thị "1,2,3,4"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "concat"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ items.indexOf(\'b\') }}</p>`,\n})\nexport class AppComponent {\n  items = [\'a\', \'b\', \'c\'];\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (1 + 2 + 3) / 3 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 10 / (5 - 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "5"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].map(x => x * 2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2,4"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "map"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (10 - 3) % 4 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].reduce((a, b) => a - b) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "-4"',
                    'option_2' => 'Hiển thị "4"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "reduce"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Math.floor(5.7) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "5"',
                    'option_2' => 'Hiển thị "6"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "floor"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Math.ceil(5.7) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "6"',
                    'option_2' => 'Hiển thị "5"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "ceil"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Math.round(5.5) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "6"',
                    'option_2' => 'Hiển thị "5"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "round"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Math.sqrt(16) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "4"',
                    'option_2' => 'Hiển thị "8"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "sqrt"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Math.pow(2, 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "8"',
                    'option_2' => 'Hiển thị "9"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "pow"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 && 0 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "0"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 0 || 1 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 || 0 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ !!1 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ !!0 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ !1 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ !0 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 === 1 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 == 1 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 === \'1\' }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 1 == \'1\' }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "items"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].includes(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "includes"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].indexOf(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "indexOf"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].lastIndexOf(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "lastIndexOf"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].find(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "find"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].filter(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "filter"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].some(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "some"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].every(x => x > 0) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "every"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].map(x => x + 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2,3"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "map"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].reduce((a, b) => a + b) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "reduce"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].sort() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "2,1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "sort"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [2, 1].sort() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "2,1"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "sort"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].reverse() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2,1"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "reverse"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].findIndex(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "findIndex"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].some(x => x < 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "some"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].every(x => x > 0) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "every"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].some(x => x > 0) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "some"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].every(x => x < 2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "every"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].map(x => x + 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2,3"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "map"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ (3 + 2) * 2 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "10"',
                    'option_2' => 'Hiển thị "5"',
                    'option_3' => 'Hiển thị "7"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ 0 / 0 }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "NaN"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị "Infinity"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].concat([3, 4]) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2,3,4"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "3,4"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].slice(1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].splice(1, 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].join("-") }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1-2"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "2-1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].reverse() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2,1"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị lỗi',
                    'option_4' => 'Hiển thị "reverse"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].pop() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].push(3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "1,2,3"',
                    'option_3' => 'Hiển thị "1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].shift() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "2"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].unshift(0) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "1,2,0"',
                    'option_3' => 'Hiển thị "0,1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].fill(0) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "0,0"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ {a:1, b:2}.hasOwnProperty(\'a\') }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Object.keys({a:1, b:2}) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "a,b"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "Object"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Object.values({a:1, b:2}) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "a,b"',
                    'option_3' => 'Hiển thị "Object"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ Object.entries({a:1, b:2}) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "[[\'a\',1],[\'b\',2]]"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "a,b"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ {a:1, b:2}.toString() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "[object Object]"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "a,b"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].find(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].filter(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].map(x => x * 2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2,4"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "1,4"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].reduce((acc, val) => acc + val) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "1,2"',
                    'option_3' => 'Hiển thị "2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].some(x => x === 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].every(x => x > 0) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].filter(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].findIndex(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị "-1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].indexOf(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị "-1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].lastIndexOf(1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "0"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "-1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].includes(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].find(x => x === 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "undefined"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị "2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ {a: 1, b: 2}["a"] }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "a"',
                    'option_3' => 'Hiển thị "b"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].slice(-1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "[3]"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].splice(-1, 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3"',
                    'option_2' => 'Hiển thị "[3]"',
                    'option_3' => 'Hiển thị "1,2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].fill(3, 0, 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "3,2"',
                    'option_2' => 'Hiển thị "1,3"',
                    'option_3' => 'Hiển thị "3,3"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [...new Set([1, 1, 2])].join() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "1,1,2"',
                    'option_3' => 'Hiển thị "2,1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].map(x => x.toString()).reduce((acc, val) => acc + val) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "12"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị "21"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].every(x => x < 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].some(x => x > 2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "false"',
                    'option_2' => 'Hiển thị "true"',
                    'option_3' => 'Hiển thị "2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].find(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].findIndex(x => x === 2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "0"',
                    'option_3' => 'Hiển thị "-1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].findIndex(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "-1"',
                    'option_3' => 'Hiển thị "0"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].flat() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "[1,2]"',
                    'option_3' => 'Hiển thị "2,1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, [2]].flat() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "[1,[2]]"',
                    'option_3' => 'Hiển thị "1, [2]"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, [2]].flat(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "[1,2]"',
                    'option_3' => 'Hiển thị "[1,[2]]"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, [2, [3]]].flat(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2,[3]"',
                    'option_2' => 'Hiển thị "[1,2,3]"',
                    'option_3' => 'Hiển thị "1,2,3"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].find(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].find(x => x === 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "undefined"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị "2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].some(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "2"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].every(x => x < 3) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "true"',
                    'option_2' => 'Hiển thị "false"',
                    'option_3' => 'Hiển thị "1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].map(x => x.toString()).reduce((acc, val) => acc + val) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "12"',
                    'option_2' => 'Hiển thị "3"',
                    'option_3' => 'Hiển thị "21"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].findIndex(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1"',
                    'option_2' => 'Hiển thị "-1"',
                    'option_3' => 'Hiển thị "0"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2].flat() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "[1,2]"',
                    'option_3' => 'Hiển thị "2,1"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, [2]].flat() }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "[1,[2]]"',
                    'option_3' => 'Hiển thị "1, [2]"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, [2]].flat(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2"',
                    'option_2' => 'Hiển thị "[1,2]"',
                    'option_3' => 'Hiển thị "[1,[2]]"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, [2, [3]]].flat(2) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "1,2,[3]"',
                    'option_2' => 'Hiển thị "[1,2,3]"',
                    'option_3' => 'Hiển thị "1,2,3"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```typescript\nimport { Component } from \'@angular/core\';\n@Component({\n  selector: \'app-root\',\n  template: `<p>{{ [1, 2, 3].find(x => x > 1) }}</p>`,\n})\nexport class AppComponent {\n}\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1"',
                    'option_3' => 'Hiển thị "undefined"',
                    'option_4' => 'Hiển thị lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $questions_laravel =
            [
                [
                    'question' => 'Laravel là một framework PHP dùng để xây dựng ứng dụng gì?',
                    'option_1' => 'Web',
                    'option_2' => 'Desktop',
                    'option_3' => 'Mobile',
                    'option_4' => 'Game',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::get(\'/welcome\', function () {\n    return view(\'welcome\');\n});\n```',
                    'option_1' => 'Trả về view "welcome"',
                    'option_2' => 'Trả về thông báo lỗi',
                    'option_3' => 'Trả về trang 404',
                    'option_4' => 'Trả về trang chủ',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nSchema::create(\'users\', function (Blueprint $table) {\n    $table->id();\n    $table->string(\'name\');\n    $table->timestamps();\n});\n```',
                    'option_1' => 'Tạo bảng "users" với các cột id, name và timestamps',
                    'option_2' => 'Tạo bảng "users" với các cột id, name và created_at',
                    'option_3' => 'Tạo bảng "users" với các cột id, name và updated_at',
                    'option_4' => 'Tạo bảng "users" với cột id duy nhất',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel hỗ trợ các loại database nào?',
                    'option_1' => 'MySQL, PostgreSQL, SQLite, SQL Server',
                    'option_2' => 'MongoDB, Redis, Firebase',
                    'option_3' => 'Oracle, SQLite, Redis',
                    'option_4' => 'PostgreSQL, SQLite, Firebase',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Đoạn mã sau dùng để làm gì?\n\n```php\nRoute::resource(\'posts\', PostController::class);\n```',
                    'option_1' => 'Tạo các route resource cho controller PostController',
                    'option_2' => 'Tạo route cho các hành động của PostController',
                    'option_3' => 'Tạo route cho các view của PostController',
                    'option_4' => 'Tạo route cho các model của PostController',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    return User::find($id);\n}\n```',
                    'option_1' => 'Trả về đối tượng User có id tương ứng',
                    'option_2' => 'Trả về thông báo lỗi',
                    'option_3' => 'Trả về danh sách tất cả User',
                    'option_4' => 'Trả về id của User',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::get(\'/user/{id}\', [UserController::class, \'show\']);\n```',
                    'option_1' => 'Tạo route GET với tham số id để gọi phương thức show của UserController',
                    'option_2' => 'Tạo route GET với tham số id để gọi phương thức index của UserController',
                    'option_3' => 'Tạo route POST với tham số id để gọi phương thức show của UserController',
                    'option_4' => 'Tạo route GET mà không có tham số',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $validated = $request->validate([\n        \'name\' => \'required\',\n    ]);\n    // code to store validated data\n}\n```',
                    'option_1' => 'Xác thực dữ liệu yêu cầu và lưu trữ dữ liệu hợp lệ',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không lưu trữ',
                    'option_3' => 'Lưu trữ dữ liệu mà không xác thực',
                    'option_4' => 'Trả về lỗi xác thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng gì để quản lý dependency và autoload?',
                    'option_1' => 'Composer',
                    'option_2' => 'NPM',
                    'option_3' => 'Yarn',
                    'option_4' => 'Bower',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nCache::put(\'key\', \'value\', now()->addMinutes(10));\n```',
                    'option_1' => 'Lưu trữ giá trị "value" với key "key" và thời gian hết hạn là 10 phút',
                    'option_2' => 'Lưu trữ giá trị "value" với key "key" và thời gian hết hạn là 1 giờ',
                    'option_3' => 'Lưu trữ giá trị "key" với key "value" và thời gian hết hạn là 10 phút',
                    'option_4' => 'Xóa cache với key "key"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::latest()->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết mới nhất theo thứ tự giảm dần',
                    'option_2' => 'Lấy danh sách các bài viết cũ nhất theo thứ tự tăng dần',
                    'option_3' => 'Lấy danh sách các bài viết theo thứ tự ngẫu nhiên',
                    'option_4' => 'Lấy một bài viết mới nhất',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function index()\n{\n    return view(\'posts.index\', [\'posts\' => Post::all()]);\n}\n```',
                    'option_1' => 'Trả về view "posts.index" với dữ liệu các bài viết',
                    'option_2' => 'Trả về view "posts.index" mà không có dữ liệu',
                    'option_3' => 'Trả về tất cả các bài viết dưới dạng JSON',
                    'option_4' => 'Trả về danh sách các bài viết dưới dạng mảng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    Post::find($id)->delete();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xóa bài viết với id tương ứng và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xóa bài viết mà không chuyển hướng',
                    'option_3' => 'Chỉ chuyển hướng mà không xóa bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    return User::findOrFail($id);\n}\n```',
                    'option_1' => 'Trả về đối tượng User với id tương ứng hoặc lỗi 404 nếu không tìm thấy',
                    'option_2' => 'Trả về đối tượng User với id tương ứng hoặc null nếu không tìm thấy',
                    'option_3' => 'Trả về danh sách tất cả User',
                    'option_4' => 'Trả về id của User',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$validator = Validator::make($data, [\n    \'email\' => \'required|email\',\n    \'password\' => \'required|min:6\',\n]);\n```',
                    'option_1' => 'Tạo một validator với các quy tắc xác thực email và password',
                    'option_2' => 'Tạo một validator chỉ với quy tắc xác thực email',
                    'option_3' => 'Tạo một validator chỉ với quy tắc xác thực password',
                    'option_4' => 'Trả về lỗi xác thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function edit($id)\n{\n    $post = Post::find($id);\n    return view(\'posts.edit\', compact(\'post\'));\n}\n```',
                    'option_1' => 'Trả về view "posts.edit" với dữ liệu bài viết để chỉnh sửa',
                    'option_2' => 'Trả về view "posts.edit" mà không có dữ liệu bài viết',
                    'option_3' => 'Trả về tất cả các bài viết để chỉnh sửa',
                    'option_4' => 'Trả về dữ liệu bài viết dưới dạng JSON',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nDB::table(\'users\')->where(\'name\', \'John\')->get();\n```',
                    'option_1' => 'Lấy tất cả người dùng có tên là "John"',
                    'option_2' => 'Lấy người dùng đầu tiên có tên là "John"',
                    'option_3' => 'Lấy người dùng có id là "John"',
                    'option_4' => 'Lấy tất cả người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function create()\n{\n    return view(\'posts.create\');\n}\n```',
                    'option_1' => 'Trả về view "posts.create" để tạo bài viết mới',
                    'option_2' => 'Trả về view "posts.index" để xem danh sách bài viết',
                    'option_3' => 'Trả về view "posts.show" để xem chi tiết bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::post(\'/user\', [UserController::class, \'store\']);\n```',
                    'option_1' => 'Tạo route POST để gọi phương thức store của UserController',
                    'option_2' => 'Tạo route GET để gọi phương thức store của UserController',
                    'option_3' => 'Tạo route POST mà không có phương thức',
                    'option_4' => 'Tạo route GET để gọi phương thức index của UserController',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function update(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update($request->all());\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Cập nhật bài viết với id tương ứng và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Cập nhật bài viết và trả về view "posts.index"',
                    'option_3' => 'Chỉ cập nhật bài viết mà không chuyển hướng',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không cập nhật',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    Post::destroy($id);\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xóa bài viết với id tương ứng và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xóa bài viết mà không chuyển hướng',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không xóa bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel cung cấp công cụ gì để thực hiện migration?',
                    'option_1' => 'Artisan',
                    'option_2' => 'Composer',
                    'option_3' => 'NPM',
                    'option_4' => 'Yarn',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::orderBy(\'created_at\', \'desc\')->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết sắp xếp theo ngày tạo giảm dần',
                    'option_2' => 'Lấy danh sách các bài viết sắp xếp theo ngày tạo tăng dần',
                    'option_3' => 'Lấy danh sách các bài viết theo thứ tự ngẫu nhiên',
                    'option_4' => 'Lấy bài viết mới nhất',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng công cụ nào để quản lý session?',
                    'option_1' => 'Session Manager',
                    'option_2' => 'Cache Manager',
                    'option_3' => 'Queue Manager',
                    'option_4' => 'Database Manager',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nAuth::attempt([\'email\' => $email, \'password\' => $password]);\n```',
                    'option_1' => 'Thực hiện xác thực người dùng với email và password',
                    'option_2' => 'Đăng ký người dùng mới',
                    'option_3' => 'Thay đổi mật khẩu người dùng',
                    'option_4' => 'Cập nhật thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show(User $user)\n{\n    return $user->name;\n}\n```',
                    'option_1' => 'Trả về tên của người dùng với đối tượng User được truyền vào',
                    'option_2' => 'Trả về email của người dùng với đối tượng User được truyền vào',
                    'option_3' => 'Trả về danh sách tất cả người dùng',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function profile()\n{\n    return view(\'profile\');\n}\n```',
                    'option_1' => 'Trả về view "profile"',
                    'option_2' => 'Trả về view "home"',
                    'option_3' => 'Trả về một đối tượng',
                    'option_4' => 'Trả về một mảng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel hỗ trợ các loại middleware nào?',
                    'option_1' => 'Authentication, CSRF Protection, Logging',
                    'option_2' => 'Validation, Caching, Routing',
                    'option_3' => 'Session, Database, File Storage',
                    'option_4' => 'Queue, Notification, Email',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nreturn response ()->json([\'message\' => \'Success\'], 200);\n```',
                    'option_1' => 'Trả về phản hồi JSON với thông điệp "Success" và mã trạng thái 200',
                    'option_2' => 'Trả về phản hồi JSON với thông điệp "Error" và mã trạng thái 404',
                    'option_3' => 'Trả về phản hồi HTML với thông điệp "Success" và mã trạng thái 200',
                    'option_4' => 'Trả về phản hồi JSON với thông điệp "Success" và mã trạng thái 500',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function validate(Request $request)\n{\n    $request->validate([\n        \'email\' => \'required|email\',\n    ]);\n    return "Valid";\n}\n```',
                    'option_1' => 'Xác thực dữ liệu email và trả về "Valid" nếu dữ liệu hợp lệ',
                    'option_2' => 'Chỉ xác thực dữ liệu email mà không trả về thông báo',
                    'option_3' => 'Trả về thông báo lỗi nếu dữ liệu không hợp lệ',
                    'option_4' => 'Trả về "Invalid" nếu dữ liệu không hợp lệ',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::where(\'status\', \'published\')->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết có trạng thái "published"',
                    'option_2' => 'Lấy danh sách các bài viết có trạng thái "draft"',
                    'option_3' => 'Lấy danh sách tất cả các bài viết',
                    'option_4' => 'Lấy bài viết với id là "published"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$post = Post::findOrFail($id);\nreturn view(\'posts.show\', compact(\'post\'));\n```',
                    'option_1' => 'Tìm bài viết với id tương ứng hoặc trả về lỗi 404 và trả về view "posts.show" với dữ liệu bài viết',
                    'option_2' => 'Tìm bài viết với id tương ứng và trả về view "posts.show" mà không có dữ liệu bài viết',
                    'option_3' => 'Tìm tất cả bài viết và trả về view "posts.show"',
                    'option_4' => 'Trả về thông báo lỗi nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nDB::table(\'users\')->whereIn(\'role\', [\'admin\', \'editor\'])->get();\n```',
                    'option_1' => 'Lấy tất cả người dùng với vai trò "admin" hoặc "editor"',
                    'option_2' => 'Lấy người dùng với vai trò "admin" hoặc "editor" và sắp xếp theo tên',
                    'option_3' => 'Lấy người dùng với vai trò "admin" và "editor" dưới dạng JSON',
                    'option_4' => 'Lấy tất cả người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $post = new Post();\n    $post->title = $request->title;\n    $post->save();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Tạo bài viết mới với tiêu đề được truyền vào và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ lưu tiêu đề bài viết mà không tạo mới bài viết',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel cung cấp gì để thực hiện validation?',
                    'option_1' => 'Validator',
                    'option_2' => 'Request',
                    'option_3' => 'Middleware',
                    'option_4' => 'Controller',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    Post::findOrFail($id)->delete();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xóa bài viết với id tương ứng hoặc trả về lỗi 404 và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xóa bài viết mà không chuyển hướng',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không xóa bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::get(\'/home\', [HomeController::class, \'index\'])->name(\'home\');\n```',
                    'option_1' => 'Tạo route GET với phương thức index của HomeController và đặt tên route là "home"',
                    'option_2' => 'Tạo route POST với phương thức index của HomeController và đặt tên route là "home"',
                    'option_3' => 'Tạo route GET với phương thức show của HomeController và đặt tên route là "home"',
                    'option_4' => 'Tạo route GET mà không có tên',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc tạo factory cho mô hình không?',
                    'option_1' => 'Có, thông qua Artisan command',
                    'option_2' => 'Không, chỉ hỗ trợ thông qua seeder',
                    'option_3' => 'Có, nhưng cần cài đặt thêm package',
                    'option_4' => 'Không, cần viết mã thủ công',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    $post = Post::find($id);\n    return view(\'posts.show\')->with(\'post\', $post);\n}\n```',
                    'option_1' => 'Trả về view "posts.show" với dữ liệu bài viết',
                    'option_2' => 'Trả về view "posts.index" với dữ liệu bài viết',
                    'option_3' => 'Trả về danh sách tất cả bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::put(\'/posts/{id}\', [PostController::class, \'update\']);\n```',
                    'option_1' => 'Tạo route PUT để gọi phương thức update của PostController',
                    'option_2' => 'Tạo route GET để gọi phương thức update của PostController',
                    'option_3' => 'Tạo route POST để gọi phương thức update của PostController',
                    'option_4' => 'Tạo route PUT mà không có phương thức',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng gì để định nghĩa các route?',
                    'option_1' => 'Route file',
                    'option_2' => 'Controller file',
                    'option_3' => 'Model file',
                    'option_4' => 'Middleware file',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $post = Post::create($request->all());\n    return redirect()->route(\'posts.index\');\n        }\n```',
                    'option_1' => 'Tạo bài viết mới với tất cả các trường dữ liệu từ request và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ lưu các trường dữ liệu từ request mà không tạo bài viết mới',
                    'option_3' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết',
                    'option_4' => 'Trả về thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel hỗ trợ các phương thức nào để làm việc với database?',
                    'option_1' => 'Query Builder, Eloquent ORM, Migrations',
                    'option_2' => 'Query Builder, File Storage, Sessions',
                    'option_3' => 'Migrations, Mail, Notifications',
                    'option_4' => 'Queue, Events, Broadcasting',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function update(Request $request, $id)\n{\n    $post = Post::findOrFail($id);\n    $post->update($request->all());\n    return response()->json($post, 200);\n}\n```',
                    'option_1' => 'Cập nhật bài viết với ID tương ứng và trả về dữ liệu bài viết dưới dạng JSON với mã trạng thái 200',
                    'option_2' => 'Cập nhật bài viết với ID tương ứng và trả về mã trạng thái 200 mà không có dữ liệu bài viết',
                    'option_3' => 'Chỉ cập nhật bài viết mà không trả về JSON',
                    'option_4' => 'Trả về lỗi nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $validatedData = $request->validate([\n        \'title\' => \'required|unique:posts|max:255\',\n    ]);\n    $post = Post::create($validatedData);\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xác thực dữ liệu bài viết và tạo mới bài viết nếu dữ liệu hợp lệ, sau đó chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không tạo bài viết mới',
                    'option_3' => 'Tạo bài viết mới mà không kiểm tra dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không lưu dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function index()\n{\n    $posts = Post::where(\'status\', \'published\')->orderBy(\'created_at\', \'desc\')->paginate(10);\n    return view(\'posts.index\', compact(\'posts\'));\n}\n```',
                    'option_1' => 'Lấy danh sách các bài viết có trạng thái "published", sắp xếp theo ngày tạo mới nhất trước và phân trang với 10 bài viết mỗi trang',
                    'option_2' => 'Lấy tất cả bài viết và sắp xếp theo ngày tạo mới nhất trước',
                    'option_3' => 'Lấy danh sách các bài viết có trạng thái "draft" và phân trang',
                    'option_4' => 'Trả về tất cả bài viết không phân trang',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::resource(\'posts\', PostController::class);\n```',
                    'option_1' => 'Tạo tất cả các route RESTful cho resource "posts" với PostController',
                    'option_2' => 'Tạo route GET cho resource "posts" với PostController',
                    'option_3' => 'Tạo route POST cho resource "posts" với PostController',
                    'option_4' => 'Tạo route PUT cho resource "posts" với PostController',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$users = User::withCount(\'posts\')->having(\'posts_count\', \'>\', 5)->get();\n```',
                    'option_1' => 'Lấy tất cả người dùng có số lượng bài viết lớn hơn 5',
                    'option_2' => 'Lấy tất cả người dùng và đếm số lượng bài viết của họ',
                    'option_3' => 'Lấy tất cả bài viết và đếm số lượng người dùng liên quan',
                    'option_4' => 'Lấy tất cả bài viết có số lượng người dùng lớn hơn 5',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function handle()\n{\n    $user = User::find(1);\n    $user->posts()->create([\'title\' => \'New Post\']);\n}\n```',
                    'option_1' => 'Tạo một bài viết mới với tiêu đề "New Post" cho người dùng có ID 1',
                    'option_2' => 'Tạo một người dùng mới với tiêu đề bài viết "New Post"',
                    'option_3' => 'Cập nhật tiêu đề bài viết của người dùng có ID 1',
                    'option_4' => 'Xóa bài viết của người dùng có ID 1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function search(Request $request)\n{\n    $query = $request->input(\'query\');\n    $posts = Post::where(\'title\', \'like\', "%$query%")->get();\n    return view(\'posts.search\', compact(\'posts\'));\n}\n```',
                    'option_1' => 'Tìm các bài viết có tiêu đề chứa chuỗi tìm kiếm và trả về view "posts.search" với kết quả tìm kiếm',
                    'option_2' => 'Tìm tất cả bài viết và trả về view "posts.search"',
                    'option_3' => 'Tìm bài viết theo ID và trả về view "posts.search"',
                    'option_4' => 'Tìm bài viết theo trạng thái và trả về view "posts.search"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show(Post $post)\n{\n    return view(\'posts.show\', compact(\'post\'));\n}\n```',
                    'option_1' => 'Trả về view "posts.show" với dữ liệu bài viết, sử dụng implicit model binding',
                    'option_2' => 'Trả về view "posts.index" với dữ liệu bài viết',
                    'option_3' => 'Tìm bài viết theo ID và trả về view "posts.show"',
                    'option_4' => 'Trả về thông báo lỗi nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel sử dụng gì để xử lý yêu cầu HTTP từ client?',
                    'option_1' => 'Middleware',
                    'option_2' => 'Route',
                    'option_3' => 'Controller',
                    'option_4' => 'Model',
                    'answer' => 3,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::select(\'title\', DB::raw(\'LENGTH(title) as title_length\'))->get();\n```',
                    'option_1' => 'Lấy danh sách các bài viết với tiêu đề và độ dài tiêu đề',
                    'option_2' => 'Lấy tất cả các bài viết và độ dài tiêu đề mặc định',
                    'option_3' => 'Lấy danh sách các bài viết với tiêu đề và số lượng bài viết',
                    'option_4' => 'Lấy tất cả bài viết với tiêu đề và số lượng từ trường "title"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostsByUser($userId)\n{\n    return Post::where(\'user_id\', $userId)->pluck(\'title\');\n}\n```',
                    'option_1' => 'Lấy danh sách tiêu đề bài viết của người dùng có ID tương ứng',
                    'option_2' => 'Lấy danh sách các bài viết với ID người dùng tương ứng',
                    'option_3' => 'Lấy danh sách người dùng có bài viết',
                    'option_4' => 'Lấy tất cả các bài viết không phân loại',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::withTrashed()->get();\n```',
                    'option_1' => 'Lấy tất cả các bài viết, bao gồm cả những bài viết đã bị xóa mềm (soft deleted)',
                    'option_2' => 'Lấy tất cả các bài viết chưa bị xóa',
                    'option_3' => 'Lấy danh sách bài viết đã bị xóa vĩnh viễn',
                    'option_4' => 'Lấy tất cả các bài viết không bao gồm những bài viết đã bị xóa mềm',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function removePost($id)\n{\n    Post::destroy($id);\n    return redirect()->back();\n}\n```',
                    'option_1' => 'Xóa bài viết với ID tương ứng và chuyển hướng trở lại trang trước đó',
                    'option_2' => 'Xóa tất cả các bài viết và chuyển hướng trở lại trang trước đó',
                    'option_3' => 'Chỉ chuyển hướng trở lại trang trước đó mà không xóa bài viết',
                    'option_4' => 'Xóa bài viết và hiển thị thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePost(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update($request->only([\'title\', \'content\']));\n    return redirect()->route(\'posts.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật bài viết với ID tương ứng và chuyển hướng đến trang chi tiết bài viết',
                    'option_2' => 'Chỉ cập nhật bài viết mà không chuyển hướng',
                    'option_3' => 'Chuyển hướng đến trang chi tiết bài viết mà không cập nhật',
                    'option_4' => 'Cập nhật tất cả các bài viết và chuyển hướng đến trang chi tiết bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ các phương thức nào cho việc xử lý form request?',
                    'option_1' => 'Validation, Authorization, Filtering',
                    'option_2' => 'Validation, Transformation, Storage',
                    'option_3' => 'Authorization, Middleware, Transformation',
                    'option_4' => 'Validation, Authorization, Middleware',
                    'answer' => 4,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPosts($userId)\n{\n    $user = User::find($userId);\n    return $user->posts()->withCount(\'comments\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết của người dùng với số lượng bình luận của mỗi bài viết',
                    'option_2' => 'Lấy tất cả bài viết của người dùng mà không tính số lượng bình luận',
                    'option_3' => 'Lấy tất cả người dùng và số lượng bình luận của họ',
                    'option_4' => 'Lấy tất cả bình luận của người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ gì cho việc gửi email?',
                    'option_1' => 'Mailable Classes, Mail Facade, Notification Channels',
                    'option_2' => 'Mailable Classes, Event Listeners, Queue Jobs',
                    'option_3' => 'Notification Channels, Mail Facade, Database Seeding',
                    'option_4' => 'Queue Jobs, Event Listeners, Database Seeding',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function show($id)\n{\n    $post = Post::findOrFail($id);\n    return response()->json($post, 200);\n}\n```',
                    'option_1' => 'Lấy bài viết với ID tương ứng và trả về dữ liệu bài viết dưới dạng JSON với mã trạng thái 200, nếu không tìm thấy thì trả về lỗi 404',
                    'option_2' => 'Lấy tất cả bài viết và trả về dữ liệu dưới dạng JSON',
                    'option_3' => 'Trả về dữ liệu bài viết không có mã trạng thái',
                    'option_4' => 'Trả về lỗi 404 nếu không tìm thấy bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function update(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update($request->all());\n    return $post;\n}\n```',
                    'option_1' => 'Cập nhật bài viết với ID tương ứng và trả về dữ liệu bài viết đã cập nhật',
                    'option_2' => 'Chỉ cập nhật bài viết mà không trả về dữ liệu',
                    'option_3' => 'Trả về dữ liệu bài viết cũ mà không cập nhật',
                    'option_4' => 'Chuyển hướng về trang khác sau khi cập nhật',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::group([\'middleware\' => [\'auth\']], function () {\n    Route::get(\'/profile\', [ProfileController::class, \'index\']);\n});\n```',
                    'option_1' => 'Tạo nhóm route yêu cầu middleware "auth" cho route "/profile" và liên kết với ProfileController',
                    'option_2' => 'Tạo route "/profile" mà không cần middleware',
                    'option_3' => 'Tạo nhóm route không cần xác thực và liên kết với ProfileController',
                    'option_4' => 'Tạo route "/profile" không yêu cầu xác thực và không có controller',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc xử lý các lỗi HTTP thông qua:',
                    'option_1' => 'Exception Handling',
                    'option_2' => 'Middleware',
                    'option_3' => 'Routing',
                    'option_4' => 'Controllers',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$posts = Post::whereDate(\'created_at\', \'>=\', now()->startOfMonth())->get();\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo từ đầu tháng hiện tại đến nay',
                    'option_2' => 'Lấy tất cả bài viết được tạo từ đầu năm đến nay',
                    'option_3' => 'Lấy tất cả bài viết được tạo trong tuần hiện tại',
                    'option_4' => 'Lấy tất cả bài viết được tạo trong ngày hôm nay',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getActivePosts()\n{\n    return Post::where(\'status\', \'active\')->latest()->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết có trạng thái "active", sắp xếp theo ngày tạo mới nhất trước',
                    'option_2' => 'Lấy tất cả các bài viết có trạng thái "inactive", sắp xếp theo ngày tạo mới nhất trước',
                    'option_3' => 'Lấy tất cả các bài viết với trạng thái mặc định, không sắp xếp',
                    'option_4' => 'Lấy các bài viết mới nhất mà không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\n$post = Post::find(1);\n$post->tags()->sync([1, 2, 3]);\n```',
                    'option_1' => 'Gán các tag với ID 1, 2, 3 cho bài viết có ID 1 và xóa các tag không còn liên kết',
                    'option_2' => 'Gán các tag với ID 1, 2, 3 cho bài viết có ID 1 mà không xóa tag cũ',
                    'option_3' => 'Xóa tất cả các tag của bài viết có ID 1',
                    'option_4' => 'Tạo mới các tag với ID 1, 2, 3 và gán cho bài viết có ID 1',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentPosts($days)\n{\n    return Post::where(\'created_at\', \'>\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo trong số ngày đã cho tính từ hiện tại',
                    'option_2' => 'Lấy tất cả bài viết được tạo trong số ngày đã cho tính từ đầu tháng',
                    'option_3' => 'Lấy tất cả bài viết được tạo từ đầu năm đến hiện tại',
                    'option_4' => 'Lấy tất cả bài viết được tạo trong ngày hôm nay',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function scopePublished($query)\n{\n    return $query->where(\'status\', \'published\');\n}\n```',
                    'option_1' => 'Tạo một scope để lọc các bài viết có trạng thái "published"',
                    'option_2' => 'Tạo một scope để lọc các bài viết có trạng thái "draft"',
                    'option_3' => 'Tạo một scope để sắp xếp bài viết theo ngày tạo',
                    'option_4' => 'Tạo một scope để lấy tất cả các bài viết mà không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPostsCount($userId)\n{\n    return Post::where(\'user_id\', $userId)->count();\n}\n```',
                    'option_1' => 'Đếm số lượng bài viết của người dùng có ID tương ứng',
                    'option_2' => 'Đếm tất cả các bài viết không phân loại người dùng',
                    'option_3' => 'Đếm số lượng người dùng có bài viết',
                    'option_4' => 'Đếm số lượng bài viết và số lượng người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $validatedData = $request->validate([\n        \'title\' => \'required|unique:posts\',\n    ]);\n    Post::create($validatedData);\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Xác thực dữ liệu bài viết và lưu bài viết mới nếu dữ liệu hợp lệ, sau đó chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không lưu bài viết mới',
                    'option_3' => 'Lưu bài viết mới mà không xác thực dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostComments($postId)\n{\n    $post = Post::findOrFail($postId);\n    return $post->comments;\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết có bình luận',
                    'option_3' => 'Lấy tất cả bình luận của tất cả bài viết',
                    'option_4' => 'Lấy tất cả bài viết mà không có bình luận',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function removeUser($id)\n{\n    User::find($id)->delete();\n}\n```',
                    'option_1' => 'Xóa người dùng với ID tương ứng',
                    'option_2' => 'Chỉ tìm người dùng với ID tương ứng mà không xóa',
                    'option_3' => 'Xóa tất cả người dùng mà không phân loại ID',
                    'option_4' => 'Chỉ xóa người dùng mà không cập nhật dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc xác thực người dùng qua:',
                    'option_1' => 'Guards, Providers, Middleware',
                    'option_2' => 'Middleware, Guards, Policies',
                    'option_3' => 'Providers, Policies, Middleware',
                    'option_4' => 'Guards, Middleware, Controllers',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePostTitle($id, $title)\n{\n    $post = Post::find($id);\n    $post->title = $title;\n    $post->save();\n}\n```',
                    'option_1' => 'Cập nhật tiêu đề của bài viết với ID tương ứng và lưu thay đổi',
                    'option_2' => 'Chỉ lưu tiêu đề mới mà không cập nhật bài viết',
                    'option_3' => 'Chỉ cập nhật bài viết mà không thay đổi tiêu đề',
                    'option_4' => 'Cập nhật tiêu đề của tất cả bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPublishedPosts()\n{\n    return Post::published()->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết có trạng thái "published" bằng cách sử dụng scope',
                    'option_2' => 'Lấy tất cả các bài viết có trạng thái mặc định',
                    'option_3' => 'Lấy tất cả bài viết không phân loại trạng thái',
                    'option_4' => 'Lấy tất cả các bài viết có trạng thái "draft"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function scopeRecent($query)\n{\n    return $query->whereDate(\'created_at\', \'>=\', now()->subMonth());\n}\n```',
                    'option_1' => 'Tạo một scope để lọc các bài viết được tạo trong tháng qua',
                    'option_2' => 'Tạo một scope để lọc các bài viết được tạo trong tuần qua',
                    'option_3' => 'Tạo một scope để lọc các bài viết được tạo trong năm qua',
                    'option_4' => 'Tạo một scope để lọc tất cả các bài viết không phân loại thời gian',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePostContent(Request $request, $id)\n{\n    $post = Post::find($id);\n    $post->update([\'content\' => $request->input(\'content\')]);\n    return $post;\n}\n```',
                    'option_1' => 'Cập nhật nội dung của bài viết với ID tương ứng và trả về dữ liệu bài viết đã cập nhật',
                    'option_2' => 'Chỉ cập nhật nội dung của bài viết mà không trả về dữ liệu',
                    'option_3' => 'Trả về nội dung bài viết mà không cập nhật',
                    'option_4' => 'Cập nhật nội dung của tất cả bài viết và trả về dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostById($id)\n{\n    return Post::findOrFail($id);\n}\n```',
                    'option_1' => 'Tìm bài viết với ID tương ứng và trả về, nếu không tìm thấy thì trả về lỗi 404',
                    'option_2' => 'Tìm tất cả bài viết và trả về dữ liệu',
                    'option_3' => 'Tìm bài viết với ID tương ứng mà không kiểm tra lỗi',
                    'option_4' => 'Tìm tất cả bài viết có ID tương ứng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getAllPosts()\n{\n    return Post::all();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết từ cơ sở dữ liệu',
                    'option_2' => 'Lấy bài viết mới nhất',
                    'option_3' => 'Lấy tất cả bài viết được phân loại theo trạng thái',
                    'option_4' => 'Lấy tất cả bài viết với trạng thái "published"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Laravel có hỗ trợ việc sử dụng các API qua:',
                    'option_1' => 'HTTP Client, HTTP Requests, API Resources',
                    'option_2' => 'HTTP Requests, WebSockets, API Resources',
                    'option_3' => 'HTTP Client, WebSockets, Database Transactions',
                    'option_4' => 'Database Transactions, WebSockets, API Resources',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserWithPosts($userId)\n{\n    return User::with(\'posts\')->findOrFail($userId);\n}\n```',
                    'option_1' => 'Lấy người dùng với ID tương ứng và tất cả bài viết của người dùng đó',
                    'option_2' => 'Lấy người dùng với ID tương ứng mà không có bài viết',
                    'option_3' => 'Lấy tất cả người dùng và bài viết của họ',
                    'option_4' => 'Lấy người dùng với ID tương ứng và các bình luận của người dùng đó',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getAllPostsByStatus($status)\n{\n    return Post::where(\'status\', $status)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết với trạng thái tương ứng',
                    'option_2' => 'Lấy tất cả bài viết mà không phân loại trạng thái',
                    'option_3' => 'Lấy tất cả bài viết với trạng thái mặc định',
                    'option_4' => 'Lấy tất cả bài viết và phân loại theo trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPublishedPostsCount()\n{\n    return Post::where(\'status\', \'published\')->count();\n}\n```',
                    'option_1' => 'Đếm số lượng bài viết có trạng thái "published"',
                    'option_2' => 'Đếm tất cả bài viết không phân loại trạng thái',
                    'option_3' => 'Đếm số lượng người dùng có bài viết',
                    'option_4' => 'Đếm số lượng bài viết và số lượng người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostsByDateRange($startDate, $endDate)\n{\n    return Post::whereBetween(\'created_at\', [$startDate, $endDate])->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo trong khoảng thời gian đã cho',
                    'option_2' => 'Lấy tất cả bài viết được tạo từ đầu tháng đến hiện tại',
                    'option_3' => 'Lấy tất cả bài viết được tạo trong tuần hiện tại',
                    'option_4' => 'Lấy tất cả bài viết được tạo trong ngày hôm nay',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nRoute::middleware([\'auth\', \'verified\'])->group(function () {\n    Route::get(\'/dashboard\', [DashboardController::class, \'index\'])->name(\'dashboard\');\n});\n```',
                    'option_1' => 'Chỉ những người dùng đã xác thực và xác minh email mới có thể truy cập vào trang dashboard',
                    'option_2' => 'Tất cả người dùng đều có thể truy cập vào trang dashboard',
                    'option_3' => 'Chỉ những người dùng chưa xác thực mới có thể truy cập vào trang dashboard',
                    'option_4' => 'Người dùng phải xác thực nhưng không cần xác minh email để truy cập vào trang dashboard',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function handle($request, Closure $next)\n{\n    if (!$request->user() || !$request->user()->isAdmin()) {\n        return redirect(\'/home\');\n    }\n    return $next($request);\n}\n```',
                    'option_1' => 'Chỉ những người dùng là admin mới có thể tiếp tục, những người khác sẽ bị chuyển hướng đến trang home',
                    'option_2' => 'Tất cả người dùng đều có thể tiếp tục mà không cần kiểm tra quyền admin',
                    'option_3' => 'Người dùng không phải là admin sẽ được tiếp tục mà không bị chuyển hướng',
                    'option_4' => 'Chỉ những người dùng chưa đăng nhập mới bị chuyển hướng đến trang home',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nuse Illuminate\Support\Facades\DB;\n\nDB::transaction(function () {\n    DB::table(\'users\')->update([\'status\' => \'inactive\']);\n    DB::table(\'posts\')->update([\'status\' => \'archived\']);\n});\n```',
                    'option_1' => 'Cả hai thao tác cập nhật dữ liệu sẽ được thực hiện trong cùng một giao dịch, đảm bảo tính toàn vẹn của dữ liệu',
                    'option_2' => 'Cả hai thao tác cập nhật dữ liệu sẽ được thực hiện độc lập mà không có giao dịch',
                    'option_3' => 'Chỉ thao tác đầu tiên được thực hiện và thao tác thứ hai sẽ bị bỏ qua',
                    'option_4' => 'Giao dịch sẽ không được thực hiện và sẽ gặp lỗi khi chạy mã',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass User extends Authenticatable\n{\n    use Notifiable;\n\n    protected $fillable = [\'name\', \'email\', \'password\'];\n\n    protected $hidden = [\'password\', \'remember_token\'];\n}\n```',
                    'option_1' => 'Các thuộc tính password và remember_token sẽ bị ẩn khi xuất dữ liệu người dùng',
                    'option_2' => 'Các thuộc tính name và email sẽ bị ẩn khi xuất dữ liệu người dùng',
                    'option_3' => 'Các thuộc tính name và email sẽ được làm đầy tự động khi tạo người dùng mới',
                    'option_4' => 'Các thuộc tính password và remember_token sẽ không được lưu vào cơ sở dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass UserController extends Controller\n{\n    public function store(Request $request)\n    {\n        $validatedData = $request->validate([\n            \'name\' => \'required|string|max:255\',\n            \'email\' => \'required|email|unique:users\',\n            \'password\' => \'required|string|min:8|confirmed\',\n        ]);\n        User::create([\n            \'name\' => $validatedData[\'name\'],\n            \'email\' => $validatedData[\'email\'],\n            \'password\' => Hash::make($validatedData[\'password\']),\n        ]);\n        return redirect()->route(\'users.index\');\n    }\n}\n```',
                    'option_1' => 'Xác thực và tạo một người dùng mới, sau đó chuyển hướng về trang danh sách người dùng',
                    'option_2' => 'Chỉ xác thực dữ liệu mà không tạo người dùng mới',
                    'option_3' => 'Tạo người dùng mới mà không xác thực dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách người dùng mà không tạo người dùng mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    protected $fillable = [\'title\', \'content\', \'user_id\'];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n}\n```',
                    'option_1' => 'Mô hình Post có một mối quan hệ "nhiều đến một" với mô hình User',
                    'option_2' => 'Mô hình Post có một mối quan hệ "một đến nhiều" với mô hình User',
                    'option_3' => 'Mô hình Post có một mối quan hệ "nhiều đến nhiều" với mô hình User',
                    'option_4' => 'Mô hình Post không có mối quan hệ với mô hình User',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass OrderController extends Controller\n{\n    public function show($id)\n    {\n        $order = Order::findOrFail($id);\n        return view(\'orders.show\', compact(\'order\')); \n    }\n}\n```',
                    'option_1' => 'Lấy đơn hàng với ID tương ứng và trả về view với dữ liệu đơn hàng',
                    'option_2' => 'Tạo một đơn hàng mới mà không kiểm tra ID',
                    'option_3' => 'Cập nhật thông tin của đơn hàng và trả về view',
                    'option_4' => 'Xóa đơn hàng với ID tương ứng và không trả về view',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass EventServiceProvider extends ServiceProvider\n{\n    public function boot()\n    {\n        Event::listen(\n            UserRegistered::class,\n            [SendWelcomeEmail::class, \'handle\']\n        );\n    }\n}\n```',
                    'option_1' => 'Khi sự kiện UserRegistered xảy ra, lớp SendWelcomeEmail sẽ được gọi để xử lý sự kiện',
                    'option_2' => 'Khi sự kiện UserRegistered xảy ra, lớp SendWelcomeEmail sẽ được khởi tạo nhưng không xử lý',
                    'option_3' => 'Sự kiện UserRegistered sẽ không được xử lý và không có phản hồi',
                    'option_4' => 'Khi sự kiện UserRegistered xảy ra, không có hành động nào được thực hiện',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function showUserPosts($userId)\n{\n    $user = User::with(\'posts\')->find($userId);\n    return $user->posts;\n}\n```',
                    'option_1' => 'Lấy người dùng với ID tương ứng và tất cả bài viết của người dùng đó',
                    'option_2' => 'Lấy tất cả người dùng và bài viết của họ',
                    'option_3' => 'Lấy tất cả bài viết và người dùng của bài viết đó',
                    'option_4' => 'Lấy người dùng với ID tương ứng mà không có bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPopularPosts($limit)\n{\n    return Post::orderBy(\'views\', \'desc\')->take($limit)->get();\n}\n```',
                    'option_1' => 'Lấy các bài viết phổ biến nhất dựa trên số lượt xem, giới hạn số lượng theo biến $limit',
                    'option_2' => 'Lấy tất cả bài viết và sắp xếp theo số lượt xem',
                    'option_3' => 'Lấy các bài viết ít phổ biến nhất dựa trên số lượt xem',
                    'option_4' => 'Lấy các bài viết mới nhất theo số lượt xem',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentComments($days)\n{\n    return Comment::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bình luận được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả bình luận của ngày hiện tại',
                    'option_3' => 'Lấy tất cả bình luận của tuần hiện tại',
                    'option_4' => 'Lấy bình luận gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    protected $casts = [\'created_at\' => \'datetime:d-m-Y\'];\n}\n```',
                    'option_1' => 'Cột created_at sẽ được chuyển đổi thành định dạng ngày-tháng-năm khi truy xuất dữ liệu',
                    'option_2' => 'Cột created_at sẽ được chuyển đổi thành định dạng năm-tháng-ngày khi truy xuất dữ liệu',
                    'option_3' => 'Cột created_at sẽ không được chuyển đổi định dạng khi truy xuất dữ liệu',
                    'option_4' => 'Cột created_at sẽ được lưu dưới dạng định dạng ngày-tháng-năm',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass ApiController extends Controller\n{\n    public function getUser($id)\n    {\n        $user = User::find($id);\n        return response()->json($user);\n    }\n}\n```',
                    'option_1' => 'Trả về dữ liệu người dùng dưới dạng JSON',
                    'option_2' => 'Trả về dữ liệu người dùng dưới dạng XML',
                    'option_3' => 'Trả về mã lỗi nếu người dùng không được tìm thấy',
                    'option_4' => 'Trả về dữ liệu người dùng dưới dạng HTML',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function store(Request $request)\n{\n    $data = $request->only([\'name\', \'email\']);\n    // Xử lý lưu trữ dữ liệu\n}\n```',
                    'option_1' => 'Chỉ lấy các dữ liệu name và email từ request để xử lý lưu trữ',
                    'option_2' => 'Lấy tất cả dữ liệu từ request để xử lý lưu trữ',
                    'option_3' => 'Xóa các dữ liệu name và email khỏi request',
                    'option_4' => 'Kiểm tra xem dữ liệu name và email có tồn tại trong request không',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    public function scopePublished($query)\n    {\n        return $query->where(\'status\', \'published\');\n    }\n}\n```',
                    'option_1' => 'Tạo một phạm vi truy vấn để chỉ lấy các bài viết có trạng thái "published"',
                    'option_2' => 'Tạo một phạm vi truy vấn để chỉ lấy các bài viết có trạng thái "draft"',
                    'option_3' => 'Tạo một phương thức để cập nhật trạng thái bài viết thành "published"',
                    'option_4' => 'Tạo một phương thức để xóa tất cả bài viết có trạng thái "published"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function deletePost($id)\n{\n    $post = Post::findOrFail($id);\n    $post->delete();\n    return response()->json([\'message\' => \'Post deleted\']);\n}\n```',
                    'option_1' => 'Xóa bài viết với ID tương ứng và trả về thông báo JSON xác nhận việc xóa',
                    'option_2' => 'Xóa bài viết với ID tương ứng mà không trả về thông báo',
                    'option_3' => 'Xóa tất cả bài viết mà không kiểm tra ID và không trả về thông báo',
                    'option_4' => 'Trả về thông báo lỗi nếu bài viết không được tìm thấy',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Post extends Model\n{\n    public function scopeActive($query)\n    {\n        return $query->where(\'status\', \'active\');\n    }\n}\n\n$posts = Post::active()->get();\n```',
                    'option_1' => 'Lấy tất cả các bài viết có trạng thái "active"',
                    'option_2' => 'Lấy tất cả bài viết không có trạng thái "active"',
                    'option_3' => 'Lấy tất cả bài viết với trạng thái "inactive"',
                    'option_4' => 'Lấy tất cả bài viết không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updateUser(Request $request, $id)\n{\n    $user = User::findOrFail($id);\n    $user->update($request->all());\n    return redirect()->route(\'users.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật thông tin người dùng với ID tương ứng bằng dữ liệu từ request và chuyển hướng về trang chi tiết người dùng',
                    'option_2' => 'Cập nhật thông tin người dùng mà không kiểm tra ID và không chuyển hướng',
                    'option_3' => 'Cập nhật thông tin người dùng với ID tương ứng bằng dữ liệu từ request nhưng không lưu thay đổi',
                    'option_4' => 'Chuyển hướng về trang chi tiết người dùng mà không cập nhật thông tin',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getCategoryPosts($categoryId)\n{\n    return Post::whereHas(\'category\', function ($query) use ($categoryId) {\n        $query->where(\'id\', $categoryId);\n    })->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết thuộc về danh mục với ID tương ứng',
                    'option_2' => 'Lấy tất cả danh mục với bài viết có ID tương ứng',
                    'option_3' => 'Lấy tất cả bài viết mà không phân loại theo danh mục',
                    'option_4' => 'Lấy tất cả danh mục mà không có bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getActiveUsers()\n{\n    return User::active()->get();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng có trạng thái "active" dựa trên phạm vi truy vấn active',
                    'option_2' => 'Lấy tất cả người dùng không có trạng thái "active"',
                    'option_3' => 'Lấy tất cả người dùng và phân loại theo trạng thái',
                    'option_4' => 'Lấy tất cả người dùng với trạng thái "inactive"',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function destroy($id)\n{\n    $model = Model::find($id);\n    if ($model) {\n        $model->delete();\n    }\n    return response()->json([\'success\' => true]);\n}\n```',
                    'option_1' => 'Xóa mô hình với ID tương ứng nếu tồn tại và trả về thông báo JSON xác nhận thành công',
                    'option_2' => 'Xóa mô hình với ID tương ứng và trả về thông báo lỗi nếu không tồn tại',
                    'option_3' => 'Chỉ kiểm tra sự tồn tại của mô hình và không xóa',
                    'option_4' => 'Xóa tất cả các mô hình mà không kiểm tra ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function validateForm(Request $request)\n{\n    $validated = $request->validate([\n        \'title\' => \'required|string|max:255\',\n        \'description\' => \'nullable|string\',\n    ]);\n    // Xử lý dữ liệu đã xác thực\n}\n```',
                    'option_1' => 'Xác thực dữ liệu yêu cầu và trả về dữ liệu đã xác thực để xử lý',
                    'option_2' => 'Chỉ xác thực dữ liệu yêu cầu mà không xử lý',
                    'option_3' => 'Lưu trữ dữ liệu vào cơ sở dữ liệu mà không xác thực',
                    'option_4' => 'Hiển thị lỗi nếu dữ liệu không xác thực',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function sendWelcomeEmail($user)\n{\n    Mail::to($user->email)->send(new WelcomeEmail($user));\n}\n```',
                    'option_1' => 'Gửi email chào mừng đến người dùng với dữ liệu người dùng',
                    'option_2' => 'Gửi email chào mừng đến tất cả người dùng',
                    'option_3' => 'Gửi email chào mừng mà không có dữ liệu người dùng',
                    'option_4' => 'Chỉ lưu thông tin email mà không gửi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPosts($userId)\n{\n    return User::find($userId)->posts;\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết của tất cả người dùng',
                    'option_3' => 'Lấy người dùng với ID tương ứng mà không có bài viết',
                    'option_4' => 'Lấy tất cả bài viết mà không có thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\nclass Comment extends Model\n{\n    protected $fillable = [\'content\', \'post_id\'];\n}\n```',
                    'option_1' => 'Các thuộc tính content và post_id sẽ có thể được gán giá trị khi tạo hoặc cập nhật bình luận',
                    'option_2' => 'Các thuộc tính content và post_id sẽ không thể được gán giá trị khi tạo hoặc cập nhật bình luận',
                    'option_3' => 'Các thuộc tính content và post_id sẽ được ẩn khi xuất dữ liệu bình luận',
                    'option_4' => 'Các thuộc tính content và post_id sẽ không được lưu vào cơ sở dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getTopPosts($limit)\n{\n    return Post::orderBy(\'views\', \'desc\')->limit($limit)->get();\n}\n```',
                    'option_1' => 'Lấy các bài viết có số lượt xem cao nhất, giới hạn số lượng theo biến $limit',
                    'option_2' => 'Lấy tất cả bài viết và sắp xếp theo số lượt xem',
                    'option_3' => 'Lấy các bài viết có số lượt xem thấp nhất',
                    'option_4' => 'Lấy tất cả bài viết mới nhất theo số lượt xem',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function filterPostsByCategory($categoryId)\n{\n    return Post::where(\'category_id\', $categoryId)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết thuộc về danh mục với ID tương ứng',
                    'option_2' => 'Lấy tất cả danh mục với bài viết có ID tương ứng',
                    'option_3' => 'Lấy tất cả bài viết không phân loại theo danh mục',
                    'option_4' => 'Lấy tất cả danh mục mà không có bài viết',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function showPost($id)\n{\n    return view(\'posts.show\')->with([\'post\' => Post::find($id)]);\n}\n```',
                    'option_1' => 'Trả về view với bài viết có ID tương ứng',
                    'option_2' => 'Chỉ lấy bài viết với ID tương ứng mà không trả về view',
                    'option_3' => 'Trả về view mà không có dữ liệu bài viết',
                    'option_4' => 'Chỉ lấy tất cả bài viết mà không phân loại theo ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserPosts($userId)\n{\n    return User::find($userId)->posts()->where(\'status\', \'published\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết đã xuất bản của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết của người dùng với ID tương ứng mà không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả bài viết đã xuất bản mà không phân loại theo người dùng',
                    'option_4' => 'Lấy tất cả bài viết của người dùng mà không có trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentPosts($days)\n{\n    return Post::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả các bài viết được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả bài viết của ngày hiện tại',
                    'option_3' => 'Lấy tất cả bài viết của tuần hiện tại',
                    'option_4' => 'Lấy bài viết gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getCommentsByPostId($postId)\n{\n    return Comment::where(\'post_id\', $postId)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết với bình luận có ID tương ứng',
                    'option_3' => 'Lấy tất cả bình luận không phân loại theo bài viết',
                    'option_4' => 'Lấy tất cả bài viết và bình luận của chúng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updatePost(Request $request, $id)\n{\n    $post = Post::findOrFail($id);\n    $post->update($request->only([\'title\', \'content\']));\n    return redirect()->route(\'posts.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật thông tin bài viết với ID tương ứng và chuyển hướng về trang chi tiết bài viết',
                    'option_2' => 'Cập nhật thông tin bài viết mà không kiểm tra ID và không chuyển hướng',
                    'option_3' => 'Cập nhật thông tin bài viết với ID tương ứng bằng dữ liệu từ request nhưng không lưu thay đổi',
                    'option_4' => 'Chuyển hướng về trang chi tiết bài viết mà không cập nhật thông tin',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getAllUsers()\n{\n    return User::all();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy người dùng với ID tương ứng',
                    'option_3' => 'Lấy tất cả người dùng mà không phân loại',
                    'option_4' => 'Lấy tất cả người dùng đã được phân loại',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function storePost(Request $request)\n{\n    $post = new Post();\n    $post->title = $request->input(\'title\');\n    $post->content = $request->input(\'content\');\n    $post->save();\n    return redirect()->route(\'posts.index\');\n}\n```',
                    'option_1' => 'Lưu bài viết mới vào cơ sở dữ liệu và chuyển hướng về trang danh sách bài viết',
                    'option_2' => 'Lưu bài viết mới vào cơ sở dữ liệu mà không chuyển hướng',
                    'option_3' => 'Chỉ tạo bài viết mà không lưu vào cơ sở dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bài viết mà không lưu bài viết mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getActivePosts()\n{\n    return Post::where(\'status\', \'active\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết có trạng thái "active"',
                    'option_2' => 'Lấy tất cả bài viết không có trạng thái "active"',
                    'option_3' => 'Lấy tất cả bài viết và phân loại theo trạng thái',
                    'option_4' => 'Lấy tất cả bài viết không phân loại trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentUsers($days)\n{\n    return User::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả người dùng của ngày hiện tại',
                    'option_3' => 'Lấy tất cả người dùng của tuần hiện tại',
                    'option_4' => 'Lấy người dùng gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getCommentById($id)\n{\n    return Comment::find($id);\n}\n```',
                    'option_1' => 'Lấy bình luận với ID tương ứng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy tất cả bình luận mà không phân loại theo ID',
                    'option_3' => 'Lấy tất cả bình luận đã được phân loại',
                    'option_4' => 'Lấy bình luận mà không có ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostById($id)\n{\n    return Post::find($id);\n}\n```',
                    'option_1' => 'Lấy bài viết với ID tương ứng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy tất cả bài viết mà không phân loại theo ID',
                    'option_3' => 'Lấy tất cả bài viết đã được phân loại',
                    'option_4' => 'Lấy bài viết mà không có ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserComments($userId)\n{\n    return User::find($userId)->comments;\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bình luận của tất cả người dùng',
                    'option_3' => 'Lấy người dùng với ID tương ứng mà không có bình luận',
                    'option_4' => 'Lấy tất cả bình luận mà không có thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPostsByStatus($status)\n{\n    return Post::where(\'status\', $status)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bài viết có trạng thái tương ứng',
                    'option_2' => 'Lấy tất cả bài viết không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả trạng thái của bài viết',
                    'option_4' => 'Lấy tất cả bài viết với trạng thái không xác định',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function deleteComment($id)\n{\n    $comment = Comment::find($id);\n    if ($comment) {\n        $comment->delete();\n    }\n    return response()->json([\'success\' => true]);\n}\n```',
                    'option_1' => 'Xóa bình luận với ID tương ứng nếu tồn tại và trả về thông báo JSON xác nhận thành công',
                    'option_2' => 'Xóa bình luận với ID tương ứng và trả về thông báo lỗi nếu không tồn tại',
                    'option_3' => 'Chỉ kiểm tra sự tồn tại của bình luận và không xóa',
                    'option_4' => 'Xóa tất cả các bình luận mà không kiểm tra ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getComments($postId)\n{\n    return Comment::where(\'post_id\', $postId)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bài viết với bình luận có ID tương ứng',
                    'option_3' => 'Lấy tất cả bình luận không phân loại theo bài viết',
                    'option_4' => 'Lấy tất cả bài viết và bình luận của chúng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUsersByStatus($status)\n{\n    return User::where(\'status\', $status)->get();\n}\n```',
                    'option_1' => 'Lấy tất cả người dùng có trạng thái tương ứng',
                    'option_2' => 'Lấy tất cả người dùng không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả trạng thái của người dùng',
                    'option_4' => 'Lấy tất cả người dùng với trạng thái không xác định',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserById($id)\n{\n    return User::find($id);\n}\n```',
                    'option_1' => 'Lấy người dùng với ID tương ứng từ cơ sở dữ liệu',
                    'option_2' => 'Lấy tất cả người dùng mà không phân loại theo ID',
                    'option_3' => 'Lấy tất cả người dùng đã được phân loại',
                    'option_4' => 'Lấy người dùng mà không có ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getPublishedComments($postId)\n{\n    return Comment::where(\'post_id\', $postId)->where(\'status\', \'published\')->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận đã xuất bản của bài viết với ID tương ứng',
                    'option_2' => 'Lấy tất cả bình luận của bài viết với ID tương ứng mà không phân loại theo trạng thái',
                    'option_3' => 'Lấy tất cả bình luận đã xuất bản mà không phân loại theo bài viết',
                    'option_4' => 'Lấy tất cả bình luận của bài viết mà không có trạng thái',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getRecentComments($days)\n{\n    return Comment::whereDate(\'created_at\', \'>=\', now()->subDays($days))->get();\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận được tạo trong số ngày qua theo biến $days',
                    'option_2' => 'Lấy tất cả bình luận của ngày hiện tại',
                    'option_3' => 'Lấy tất cả bình luận của tuần hiện tại',
                    'option_4' => 'Lấy bình luận gần đây nhất và cũ nhất trong số ngày qua',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function updateComment(Request $request, $id)\n{\n    $comment = Comment::findOrFail($id);\n    $comment->update($request->only([\'content\']));\n    return redirect()->route(\'comments.show\', $id);\n}\n```',
                    'option_1' => 'Cập nhật thông tin bình luận với ID tương ứng và chuyển hướng về trang chi tiết bình luận',
                    'option_2' => 'Cập nhật thông tin bình luận mà không kiểm tra ID và không chuyển hướng',
                    'option_3' => 'Cập nhật thông tin bình luận với ID tương ứng bằng dữ liệu từ request nhưng không lưu thay đổi',
                    'option_4' => 'Chuyển hướng về trang chi tiết bình luận mà không cập nhật thông tin',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function storeComment(Request $request)\n{\n    $comment = new Comment();\n    $comment->content = $request->input(\'content\');\n    $comment->save();\n    return redirect()->route(\'comments.index\');\n}\n```',
                    'option_1' => 'Lưu bình luận mới vào cơ sở dữ liệu và chuyển hướng về trang danh sách bình luận',
                    'option_2' => 'Lưu bình luận mới vào cơ sở dữ liệu mà không chuyển hướng',
                    'option_3' => 'Chỉ tạo bình luận mà không lưu vào cơ sở dữ liệu',
                    'option_4' => 'Chuyển hướng về trang danh sách bình luận mà không lưu bình luận mới',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function deleteUser($id)\n{\n    $user = User::find($id);\n    if ($user) {\n        $user->delete();\n    }\n    return response()->json([\'success\' => true]);\n}\n```',
                    'option_1' => 'Xóa người dùng với ID tương ứng nếu tồn tại và trả về thông báo JSON xác nhận thành công',
                    'option_2' => 'Xóa người dùng với ID tương ứng và trả về thông báo lỗi nếu không tồn tại',
                    'option_3' => 'Chỉ kiểm tra sự tồn tại của người dùng và không xóa',
                    'option_4' => 'Xóa tất cả người dùng mà không kiểm tra ID',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```php\npublic function getUserComments($userId)\n{\n    return User::find($userId)->comments;\n}\n```',
                    'option_1' => 'Lấy tất cả bình luận của người dùng với ID tương ứng',
                    'option_2' => 'Lấy tất cả bình luận của tất cả người dùng',
                    'option_3' => 'Lấy người dùng với ID tương ứng mà không có bình luận',
                    'option_4' => 'Lấy tất cả bình luận mà không có thông tin người dùng',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];
        $questions_react =
            [
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction App() {\n  return <h1>Hello World</h1>;\n}\n```',
                    'option_1' => 'Hiển thị "Hello World" trên trang web',
                    'option_2' => 'Hiển thị một lỗi vì không có thẻ đóng',
                    'option_3' => 'Hiển thị một component trống',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Welcome {this.props.name}</h1>;\n  }\n}\n```',
                    'option_1' => 'Hiển thị "Welcome" cộng với giá trị thuộc tính `name`',
                    'option_2' => 'Hiển thị "Welcome" mà không có thuộc tính `name`',
                    'option_3' => 'Gây lỗi vì không có thuộc tính `name`',
                    'option_4' => 'Hiển thị một component trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst element = <button>Click me</button>;\nReactDOM.render(element, document.getElementById(\'root\'));\n```',
                    'option_1' => 'Hiển thị một nút bấm với nội dung "Click me"',
                    'option_2' => 'Hiển thị một thông báo lỗi',
                    'option_3' => 'Không hiển thị gì',
                    'option_4' => 'Hiển thị một button trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction MyComponent() {\n  const [count, setCount] = React.useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n}\n```',
                    'option_1' => 'Hiển thị một nút bấm với số đếm và tăng số đếm khi nhấn nút',
                    'option_2' => 'Hiển thị một nút bấm với số đếm không thay đổi',
                    'option_3' => 'Hiển thị một thông báo lỗi khi nhấn nút',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst element = <div className="container">Hello</div>;\n```',
                    'option_1' => 'Hiển thị một `div` với class là "container" và nội dung "Hello"',
                    'option_2' => 'Hiển thị một `div` mà không có class',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\nconst element = <Greeting name="Alice" />;\n```',
                    'option_1' => 'Hiển thị "Hello, Alice"',
                    'option_2' => 'Hiển thị "Hello, {props.name}"',
                    'option_3' => 'Hiển thị "Hello," mà không có tên',
                    'option_4' => 'Hiển thị một thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst MyComponent = () => <div>My Component</div>;\n```',
                    'option_1' => 'Hiển thị một `div` với nội dung "My Component"',
                    'option_2' => 'Hiển thị một component trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("");\n  return <input value={text} onChange={e => setText(e.target.value)} />;\n};\n```',
                    'option_1' => 'Hiển thị một ô input và cho phép người dùng nhập văn bản',
                    'option_2' => 'Hiển thị một ô input nhưng không cho phép nhập văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction List(props) {\n  return (\n    <ul>\n      {props.items.map(item => <li key={item}>{item}</li>)}\n    </ul>\n  );\n}\n```',
                    'option_1' => 'Hiển thị một danh sách các mục từ `props.items`',
                    'option_2' => 'Hiển thị một danh sách trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction Counter() {\n  const [count, setCount] = React.useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n}\n```',
                    'option_1' => 'Hiển thị một nút bấm với số đếm và tăng số đếm khi nhấn nút',
                    'option_2' => 'Hiển thị một nút bấm với số đếm không thay đổi',
                    'option_3' => 'Hiển thị một thông báo lỗi khi nhấn nút',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction ConditionalRendering({ isLoggedIn }) {\n  return isLoggedIn ? <p>Welcome back!</p> : <p>Please sign up.</p>;\n}\n```',
                    'option_1' => 'Hiển thị "Welcome back!" nếu `isLoggedIn` là true, ngược lại hiển thị "Please sign up."',
                    'option_2' => 'Luôn luôn hiển thị "Welcome back!"',
                    'option_3' => 'Luôn luôn hiển thị "Please sign up."',
                    'option_4' => 'Hiển thị một thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [value, setValue] = React.useState("");\n  return (\n    <input value={value} onChange={e => setValue(e.target.value)} />\n  );\n};\n```',
                    'option_1' => 'Hiển thị một ô input với giá trị có thể thay đổi',
                    'option_2' => 'Hiển thị một ô input nhưng không thay đổi giá trị',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst items = [1, 2, 3];\nconst listItems = items.map(item => <li key={item}>{item}</li>);\n```',
                    'option_1' => 'Tạo một mảng các phần tử `li` với giá trị từ `items`',
                    'option_2' => 'Tạo một mảng các phần tử trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction Toggle() {\n  const [isOn, setIsOn] = React.useState(true);\n  return <button onClick={() => setIsOn(!isOn)}>{isOn ? "On" : "Off"}</button>;\n}\n```',
                    'option_1' => 'Hiển thị một nút bấm với nội dung "On" hoặc "Off" tùy theo trạng thái `isOn`',
                    'option_2' => 'Hiển thị một nút bấm với nội dung cố định "On"',
                    'option_3' => 'Hiển thị một nút bấm với nội dung cố định "Off"',
                    'option_4' => 'Hiển thị một thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst items = ["apple", "banana", "cherry"];\nconst listItems = items.map((item, index) => <li key={index}>{item}</li>);\n```',
                    'option_1' => 'Tạo một mảng các phần tử `li` với giá trị từ `items` và chỉ số làm key',
                    'option_2' => 'Tạo một mảng các phần tử trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction Profile({ user }) {\n  return <div>Name: {user.name}</div>;\n}\n```',
                    'option_1' => 'Hiển thị tên người dùng từ thuộc tính `user`',
                    'option_2' => 'Hiển thị một thông báo lỗi vì không có thuộc tính `name`',
                    'option_3' => 'Hiển thị một component trống',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst MyForm = () => {\n  const [input, setInput] = React.useState("");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(`Submitted: ${input}`);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={input} onChange={(e) => setInput(e.target.value)} />\n      <button type="submit">Submit</button>\n    </form>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một biểu mẫu với ô input và nút bấm gửi, hiển thị cảnh báo với giá trị của ô input khi gửi',
                    'option_2' => 'Hiển thị một biểu mẫu nhưng không thể gửi',
                    'option_3' => 'Hiển thị một thông báo lỗi khi gửi biểu mẫu',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  return <div style={{ color: "red" }}>Styled Text</div>;\n};\n```',
                    'option_1' => 'Hiển thị một `div` với văn bản "Styled Text" có màu đỏ',
                    'option_2' => 'Hiển thị một `div` với văn bản "Styled Text" không có màu',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst List = ({ items }) => (\n  <ul>\n    {items.map((item, index) => (\n      <li key={index}>{item}</li>\n    ))}\n  </ul>\n);\n```',
                    'option_1' => 'Tạo một danh sách các mục từ thuộc tính `items`',
                    'option_2' => 'Tạo một danh sách trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction ClickMe() {\n  const handleClick = () => {\n    alert("Button clicked");\n  };\n  return <button onClick={handleClick}>Click me</button>;\n}\n```',
                    'option_1' => 'Hiển thị một nút bấm và cảnh báo khi nhấn nút',
                    'option_2' => 'Hiển thị một nút bấm mà không có hành động khi nhấn nút',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst Header = ({ title }) => <h1>{title}</h1>;\nconst App = () => <Header title="My Title" />;\n```',
                    'option_1' => 'Hiển thị một tiêu đề với nội dung "My Title"',
                    'option_2' => 'Hiển thị một tiêu đề trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction App() {\n  const [count, setCount] = React.useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n}\n```',
                    'option_1' => 'Hiển thị một nút bấm với số đếm và tăng số đếm khi nhấn nút',
                    'option_2' => 'Hiển thị một nút bấm với số đếm không thay đổi',
                    'option_3' => 'Hiển thị một thông báo lỗi khi nhấn nút',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  return (\n    <div>\n      <button onClick={() => setIsOpen(!isOpen)}>\n        {isOpen ? "Close" : "Open"}\n      </button>\n      {isOpen && <p>The content is visible</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm có nội dung "Open" hoặc "Close" và nội dung "The content is visible" nếu `isOpen` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có nội dung bổ sung',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n```',
                    'option_1' => 'Hiển thị "Welcome back!" nếu `isLoggedIn` là true, ngược lại hiển thị "Please sign up."',
                    'option_2' => 'Luôn luôn hiển thị "Welcome back!"',
                    'option_3' => 'Luôn luôn hiển thị "Please sign up."',
                    'option_4' => 'Hiển thị một thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  return (\n    <div>\n      <h1>Hello</h1>\n      <h2>World</h2>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị "Hello" và "World" trong các thẻ h1 và h2 tương ứng',
                    'option_2' => 'Hiển thị một thông báo lỗi',
                    'option_3' => 'Hiển thị "Hello" nhưng không có "World"',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction ListItem(props) {\n  return <li>{props.value}</li>;\n}\nfunction List(props) {\n  return (\n    <ul>\n      {props.items.map((item, index) => <ListItem key={index} value={item} />)}\n    </ul>\n  );\n}\n```',
                    'option_1' => 'Tạo một danh sách các mục từ thuộc tính `items` và mỗi mục là một phần tử `li`',
                    'option_2' => 'Tạo một danh sách trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction App() {\n  const [show, setShow] = React.useState(true);\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show && <p>This is visible</p>}\n    </div>\n  );\n}\n```',
                    'option_1' => 'Hiển thị một nút bấm và nội dung "This is visible" khi `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có nội dung bổ sung',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("Hello");\n  return <input value={text} onChange={(e) => setText(e.target.value)} />;\n};\n```',
                    'option_1' => 'Hiển thị một ô input với giá trị "Hello" và cho phép người dùng thay đổi giá trị',
                    'option_2' => 'Hiển thị một ô input nhưng không thay đổi giá trị',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction Form() {\n  const [input, setInput] = React.useState("");\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    alert(`Submitted: ${input}`);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input value={input} onChange={(e) => setInput(e.target.value)} />\n      <button type="submit">Submit</button>\n    </form>\n  );\n}\n```',
                    'option_1' => 'Hiển thị một biểu mẫu với ô input và nút bấm gửi, và cảnh báo với giá trị của ô input khi gửi',
                    'option_2' => 'Hiển thị một biểu mẫu nhưng không thể gửi',
                    'option_3' => 'Hiển thị một thông báo lỗi khi gửi biểu mẫu',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst MyComponent = () => {\n  const [isVisible, setIsVisible] = React.useState(true);\n  return (\n    <div>\n      <button onClick={() => setIsVisible(!isVisible)}>Toggle</button>\n      {isVisible && <p>Content is visible</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và nội dung "Content is visible" khi `isVisible` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có nội dung bổ sung',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction App() {\n  return <h1>Hello, React!</h1>;\n}\nconst root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(<App />);\n```',
                    'option_1' => 'Hiển thị "Hello, React!" trên trang web',
                    'option_2' => 'Hiển thị một thông báo lỗi',
                    'option_3' => 'Không hiển thị gì',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst MyComponent = () => <div>{1 + 1}</div>;\n```',
                    'option_1' => 'Hiển thị "2"',
                    'option_2' => 'Hiển thị "1 + 1"',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction User({ name }) {\n  return <h1>Hello, {name}</h1>;\n}\nconst App = () => <User name="Bob" />;\n```',
                    'option_1' => 'Hiển thị "Hello, Bob"',
                    'option_2' => 'Hiển thị "Hello, {name}"',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction App() {\n  return (\n    <div>\n      <p>This is a paragraph</p>\n      <p>This is another paragraph</p>\n    </div>\n  );\n}\n```',
                    'option_1' => 'Hiển thị hai đoạn văn bản trong các thẻ `p`',
                    'option_2' => 'Hiển thị một đoạn văn bản và một thông báo lỗi',
                    'option_3' => 'Hiển thị một đoạn văn bản trống',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm với số đếm và tăng số đếm khi nhấn nút',
                    'option_2' => 'Hiển thị một nút bấm với số đếm không thay đổi',
                    'option_3' => 'Hiển thị một thông báo lỗi khi nhấn nút',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nfunction App() {\n  return (\n    <div>\n      <h1>Welcome</h1>\n      <p>To the React world!</p>\n    </div>\n  );\n}\n```',
                    'option_1' => 'Hiển thị một tiêu đề và một đoạn văn bản',
                    'option_2' => 'Hiển thị một thông báo lỗi',
                    'option_3' => 'Hiển thị một tiêu đề và một đoạn văn bản nhưng không đúng định dạng',
                    'option_4' => 'Không hiển thị gì',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [value, setValue] = React.useState("initial");\n  React.useEffect(() => {\n    setValue("updated");\n  }, []);\n  return <div>{value}</div>;\n};\n```',
                    'option_1' => 'Hiển thị "updated"',
                    'option_2' => 'Hiển thị "initial"',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    fetch("https://api.example.com/data")\n      .then((response) => response.json())\n      .then((result) => setData(result));\n  }, []);\n  return <div>{data ? data.message : "Loading..."}</div>;\n};\n```',
                    'option_1' => 'Hiển thị "Loading..." khi dữ liệu chưa được tải và thông điệp khi dữ liệu đã được tải',
                    'option_2' => 'Hiển thị "Loading..." mãi mãi',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị dữ liệu nếu có lỗi khi tải dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <p>Count: {count}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm để tăng giá trị và hiển thị giá trị hiện tại của biến `count`',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị của `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [isToggled, setIsToggled] = React.useState(false);\n  return (\n    <button onClick={() => setIsToggled(!isToggled)}>\n      {isToggled ? "On" : "Off"}\n    </button>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm với văn bản "On" hoặc "Off" tùy thuộc vào trạng thái `isToggled`',
                    'option_2' => 'Hiển thị một nút bấm với văn bản "On" liên tục',
                    'option_3' => 'Hiển thị một nút bấm với văn bản "Off" liên tục',
                    'option_4' => 'Hiển thị một thông báo lỗi',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst MyComponent = () => {\n  return <div className="container">{[1, 2, 3].map(num => <span key={num}>{num}</span>)}</div>;\n};\n```',
                    'option_1' => 'Hiển thị các số 1, 2, 3 trong các thẻ `span` bên trong một `div` có lớp `container`',
                    'option_2' => 'Hiển thị một `div` trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị số 1, 2, 3 nhưng không nằm trong các thẻ `span`',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [data, setData] = React.useState([]);\n  React.useEffect(() => {\n    const timer = setTimeout(() => setData([1, 2, 3]), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n  return <div>{data.join(", ")}</div>;\n};\n```',
                    'option_1' => 'Hiển thị "1, 2, 3" sau 1 giây',
                    'option_2' => 'Hiển thị một thông báo lỗi',
                    'option_3' => 'Hiển thị dữ liệu trống',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("text");\n  return (\n    <div>\n      <input value={text} onChange={e => setText(e.target.value)} />\n      <p>{text}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một ô input với giá trị "text" và hiển thị giá trị này dưới dạng văn bản trong thẻ `p`',
                    'option_2' => 'Hiển thị một ô input nhưng không thay đổi giá trị văn bản trong thẻ `p`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return <button onClick={increment}>Increment</button>;\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và tăng giá trị `count` khi nút được nhấn',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [show, setShow] = React.useState(true);\n  return (\n    <div>\n      <button onClick={() => setShow(prev => !prev)}>Toggle</button>\n      {show && <p>Visible</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và văn bản "Visible" nếu `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst MyComponent = () => {\n  return <div>{[1, 2, 3].map(num => <span key={num}>{num}</span>)}</div>;\n};\n```',
                    'option_1' => 'Hiển thị các số 1, 2, 3 trong các thẻ `span` bên trong một `div`',
                    'option_2' => 'Hiển thị một `div` trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị số 1, 2, 3 nhưng không nằm trong các thẻ `span`',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <p>{count}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm để tăng giá trị và hiển thị giá trị hiện tại của biến `count`',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị của `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("text");\n  return (\n    <input value={text} onChange={e => setText(e.target.value)} />\n  );\n};\n```',
                    'option_1' => 'Hiển thị một ô input với giá trị "text" và cho phép thay đổi giá trị của nó',
                    'option_2' => 'Hiển thị một ô input nhưng không thay đổi giá trị của nó',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [items, setItems] = React.useState(["item1", "item2"]);\n  return (\n    <ul>\n      {items.map((item, index) => <li key={index}>{item}</li>)}</ul>\n  );\n};\n```',
                    'option_1' => 'Hiển thị danh sách các mục từ mảng `items` trong các thẻ `li` bên trong một thẻ `ul`',
                    'option_2' => 'Hiển thị một `ul` trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị danh sách các mục từ mảng `items` nhưng không trong các thẻ `li`',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [show, setShow] = React.useState(false);\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show && <p>Visible</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và văn bản "Visible" khi `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    fetch("https://api.example.com/data")\n      .then((response) => response.json())\n      .then((result) => setData(result));\n  }, []);\n  return <div>{data ? data.message : "Loading..."}</div>;\n};\n```',
                    'option_1' => 'Hiển thị "Loading..." khi dữ liệu chưa được tải và thông điệp khi dữ liệu đã được tải',
                    'option_2' => 'Hiển thị "Loading..." mãi mãi',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị dữ liệu nếu có lỗi khi tải dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return <button onClick={increment}>Increment</button>;\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và tăng giá trị `count` khi nút được nhấn',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("Hello");\n  return (\n    <div>\n      <button onClick={() => setText("World")}>Change Text</button>\n      <p>{text}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm để thay đổi văn bản từ "Hello" thành "World" và hiển thị giá trị văn bản hiện tại trong thẻ `p`',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị văn bản trong thẻ `p`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [show, setShow] = React.useState(false);\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show && <p>Now you see me</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và văn bản "Now you see me" khi `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [list, setList] = React.useState(["item1", "item2"]);\n  return (\n    <ul>\n      {list.map((item, index) => <li key={index}>{item}</li>)}</ul>\n  );\n};\n```',
                    'option_1' => 'Hiển thị danh sách các mục từ mảng `list` trong các thẻ `li` bên trong một thẻ `ul`',
                    'option_2' => 'Hiển thị một `ul` trống',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị danh sách các mục từ mảng `list` nhưng không trong các thẻ `li`',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("");\n  return (\n    <div>\n      <input type="text" value={text} onChange={e => setText(e.target.value)} />\n      <p>{text}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một ô input và giá trị của ô input sẽ được hiển thị trong thẻ `p`',
                    'option_2' => 'Hiển thị một ô input nhưng không hiển thị giá trị trong thẻ `p`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(c => c + 1)}>Increment</button>\n      <p>{count}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và giá trị `count` sẽ được tăng lên mỗi khi nút được nhấn',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị của `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [value, setValue] = React.useState("");\n  return (\n    <input value={value} onChange={e => setValue(e.target.value)} />\n  );\n};\n```',
                    'option_1' => 'Hiển thị một ô input với giá trị có thể thay đổi',
                    'option_2' => 'Hiển thị một ô input nhưng giá trị không thay đổi',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [show, setShow] = React.useState(true);\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show && <p>Content</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và văn bản "Content" khi `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [data, setData] = React.useState(null);\n  React.useEffect(() => {\n    fetch("https://api.example.com/data")\n      .then((response) => response.json())\n      .then((result) => setData(result));\n  }, []);\n  return <div>{data ? data.message : "Loading..."}</div>;\n};\n```',
                    'option_1' => 'Hiển thị "Loading..." khi dữ liệu chưa được tải và thông điệp khi dữ liệu đã được tải',
                    'option_2' => 'Hiển thị "Loading..." mãi mãi',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị dữ liệu nếu có lỗi khi tải dữ liệu',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  const increment = () => setCount(c => c + 1);\n  return <button onClick={increment}>Increment</button>;\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và tăng giá trị `count` khi nút được nhấn',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [show, setShow] = React.useState(false);\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show && <p>Now you see me</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và văn bản "Now you see me" khi `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("Hello");\n  return (\n    <div>\n      <button onClick={() => setText("World")}>Change Text</button>\n      <p>{text}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm để thay đổi văn bản từ "Hello" thành "World" và hiển thị giá trị văn bản hiện tại trong thẻ `p`',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị văn bản trong thẻ `p`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [count, setCount] = React.useState(0);\n  return (\n    <div>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <p>{count}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm để tăng giá trị và hiển thị giá trị hiện tại của biến `count`',
                    'option_2' => 'Hiển thị một nút bấm nhưng không thay đổi giá trị của `count`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [text, setText] = React.useState("");\n  return (\n    <div>\n      <input type="text" value={text} onChange={e => setText(e.target.value)} />\n      <p>{text}</p>\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một ô input và giá trị của ô input sẽ được hiển thị trong thẻ `p`',
                    'option_2' => 'Hiển thị một ô input nhưng không hiển thị giá trị trong thẻ `p`',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
                [
                    'question' => 'Kết quả của đoạn mã sau là gì?\n\n```jsx\nconst App = () => {\n  const [show, setShow] = React.useState(true);\n  return (\n    <div>\n      <button onClick={() => setShow(!show)}>Toggle</button>\n      {show && <p>Content</p>}\n    </div>\n  );\n};\n```',
                    'option_1' => 'Hiển thị một nút bấm và văn bản "Content" khi `show` là true',
                    'option_2' => 'Hiển thị một nút bấm nhưng không có văn bản',
                    'option_3' => 'Hiển thị một thông báo lỗi',
                    'option_4' => 'Hiển thị một `div` trống',
                    'answer' => 1,
                    'created_at' => now(),
                    'updated_at' => now(),
                ],
            ];



        $essays_html =
            [
                [
                    'question' => 'Thẻ [blank_1] được sử dụng để định nghĩa một tài liệu HTML.',
                    'blanks' => 'html',
                ],
                [
                    'question' => 'Thẻ [blank_1] chứa thông tin meta và các liên kết đến tài nguyên bên ngoài.',
                    'blanks' => 'head',
                ],
                [
                    'question' => 'Thẻ [blank_1] tạo tiêu đề lớn nhất và [blank_2] tạo tiêu đề nhỏ hơn.',
                    'blanks' => 'h1,h2',
                ],
                [
                    'question' => 'Thẻ [blank_1] được sử dụng để tạo liên kết đến trang web khác và thẻ [blank_2] dùng để mở liên kết trong cửa sổ mới.',
                    'blanks' => 'a,target',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa phần nội dung chính của tài liệu HTML.',
                    'blanks' => 'body',
                ],
                [
                    'question' => 'Thẻ [blank_1] được sử dụng để tạo danh sách không có thứ tự và thẻ [blank_2] để tạo mục trong danh sách đó.',
                    'blanks' => 'ul,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] được sử dụng để tạo bảng và thẻ [blank_2] định nghĩa hàng trong bảng.',
                    'blanks' => 'table,tr',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa cột tiêu đề và thẻ [blank_2] dùng để tạo ô dữ liệu trong bảng.',
                    'blanks' => 'th,td',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn hình ảnh và thuộc tính [blank_2] được sử dụng để xác định đường dẫn của hình ảnh.',
                    'blanks' => 'img,src',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa văn bản được bôi đậm và thẻ [blank_2] định nghĩa văn bản được làm nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] chèn một đường phân cách ngang và thẻ [blank_2] tạo một đoạn văn bản.',
                    'blanks' => 'hr,p',
                ],
                [
                    'question' => 'Thẻ [blank_1] được sử dụng để tạo tiêu đề cấp 3 và thẻ [blank_2] để tạo tiêu đề cấp 4.',
                    'blanks' => 'h3,h4',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn âm thanh và thẻ [blank_2] dùng để chèn video.',
                    'blanks' => 'audio,video',
                ],
                [
                    'question' => 'Thẻ [blank_1] tạo một khối văn bản và thẻ [blank_2] tạo một phần tử nội tuyến.',
                    'blanks' => 'div,span',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để thêm mã JavaScript vào trang và thẻ [blank_2] định nghĩa một đoạn mã.',
                    'blanks' => 'script,code',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ gạch chân và thẻ [blank_2] định nghĩa một khối văn bản có kiểu chữ gạch chéo.',
                    'blanks' => 'u,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn một khung iframe vào tài liệu và thẻ [blank_2] định nghĩa khu vực điều hướng.',
                    'blanks' => 'iframe,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một khu vực chân của tài liệu và thẻ [blank_2] định nghĩa phần tiêu đề.',
                    'blanks' => 'footer,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một nhóm phần tử và thẻ [blank_2] dùng để định nghĩa nhóm liên kết.',
                    'blanks' => 'fieldset,legend',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một vùng chọn trong biểu mẫu và thẻ [blank_2] định nghĩa tùy chọn trong vùng chọn.',
                    'blanks' => 'select,option',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một ô nhập liệu văn bản và thẻ [blank_2] dùng để nhập nhiều dòng văn bản.',
                    'blanks' => 'input,textarea',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để liên kết đến tệp CSS và thẻ [blank_2] định nghĩa phần tử cho việc nhập nội dung văn bản.',
                    'blanks' => 'link,textarea',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản có chú thích và thẻ [blank_2] định nghĩa phần văn bản được phân cách.',
                    'blanks' => 'mark,section',
                ],
                [
                    'question' => 'Thẻ [blank_1] tạo một khối văn bản được chèn vào từ một phần tử khác và thẻ [blank_2] dùng để tạo một khu vực chứa các phần tử.',
                    'blanks' => 'pre,main',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một nhóm liên kết điều hướng và thẻ [blank_2] tạo một khu vực cho phần tử.',
                    'blanks' => 'nav,section',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các phần tử văn bản và thẻ [blank_2] dùng để tạo một vùng chọn trong biểu mẫu.',
                    'blanks' => 'div,select',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một nhóm các mục trong danh sách không có thứ tự và thẻ [blank_2] dùng để định nghĩa một nhóm các phần tử văn bản.',
                    'blanks' => 'ul,div',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản gạch chân và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ mạnh.',
                    'blanks' => 'u,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử văn bản không có kiểu chữ và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ nghiêng.',
                    'blanks' => 'p,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực văn bản có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa phần chân của tài liệu.',
                    'blanks' => 's,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa phần đầu trang của tài liệu và thẻ [blank_2] dùng để tạo một khu vực cho phần tử chính.',
                    'blanks' => 'header,main',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản được chèn vào từ một phần tử khác và thẻ [blank_2] dùng để tạo một danh sách không có thứ tự.',
                    'blanks' => 'pre,ul',
                ],
                [
                    'question' => 'Thẻ [blank_1] tạo một phần tử điều hướng và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ gạch chân.',
                    'blanks' => 'nav,u',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các phần tử HTML và thẻ [blank_2] dùng để định nghĩa một nhóm liên kết điều hướng.',
                    'blanks' => 'div,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có chú thích và thẻ [blank_2] dùng để định nghĩa một nhóm các mục trong danh sách.',
                    'blanks' => 'mark,ul',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử văn bản gạch chéo và thẻ [blank_2] định nghĩa phần tử nhập nội dung văn bản.',
                    'blanks' => 's,textarea',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản được bôi đậm và thẻ [blank_2] dùng để định nghĩa phần tử đầu trang của tài liệu.',
                    'blanks' => 'strong,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử văn bản không có kiểu chữ và thẻ [blank_2] dùng để tạo một phần tử điều hướng.',
                    'blanks' => 'p,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ nghiêng và thẻ [blank_2] dùng để tạo một vùng chọn trong biểu mẫu.',
                    'blanks' => 'em,select',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử có chú thích và thẻ [blank_2] tạo một khu vực chứa các phần tử.',
                    'blanks' => 'mark,section',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một khối văn bản có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử văn bản có kiểu chữ gạch chân và thẻ [blank_2] tạo một khu vực điều hướng.',
                    'blanks' => 'u,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực văn bản có kiểu chữ gạch chéo và thẻ [blank_2] dùng để tạo một phần tử đầu trang.',
                    'blanks' => 's,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một khối văn bản có kiểu chữ mạnh và thẻ [blank_2] tạo một khu vực chứa các phần tử.',
                    'blanks' => 'strong,section',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một khu vực cho phần tử chính và thẻ [blank_2] định nghĩa phần tử có chú thích.',
                    'blanks' => 'main,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản có kiểu chữ gạch chân và thẻ [blank_2] dùng để định nghĩa phần tử chân của tài liệu.',
                    'blanks' => 'u,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử văn bản có kiểu chữ nghiêng và thẻ [blank_2] tạo một danh sách không có thứ tự.',
                    'blanks' => 'em,ul',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ gạch chéo và thẻ [blank_2] dùng để tạo một phần tử đầu trang.',
                    'blanks' => 's,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để định nghĩa một phần tử có chú thích.',
                    'blanks' => 'strong,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử đầu trang của tài liệu và thẻ [blank_2] dùng để định nghĩa phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một khu vực chứa các phần tử và thẻ [blank_2] dùng để tạo một danh sách có thứ tự.',
                    'blanks' => 'section,ol',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản có kiểu chữ gạch chân và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ gạch chéo.',
                    'blanks' => 'u,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử văn bản có kiểu chữ mạnh và thẻ [blank_2] tạo một khối văn bản có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử có chú thích và thẻ [blank_2] tạo một phần tử đầu trang.',
                    'blanks' => 'mark,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực điều hướng và thẻ [blank_2] dùng để định nghĩa phần tử chân của tài liệu.',
                    'blanks' => 'nav,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một danh sách không có thứ tự và thẻ [blank_2] định nghĩa một nhóm các phần tử văn bản.',
                    'blanks' => 'ul,div',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực điều hướng và thẻ [blank_2] dùng để tạo một danh sách có thứ tự.',
                    'blanks' => 'nav,ol',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử có kiểu chữ gạch chân và thẻ [blank_2] dùng để định nghĩa một phần tử đầu trang của tài liệu.',
                    'blanks' => 'u,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử có kiểu chữ nghiêng và thẻ [blank_2] dùng để định nghĩa phần tử có kiểu chữ mạnh.',
                    'blanks' => 'em,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các mục trong danh sách không có thứ tự và thẻ [blank_2] dùng để tạo phần tử văn bản có kiểu chữ gạch chéo.',
                    'blanks' => 'ul,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử điều hướng và thẻ [blank_2] dùng để tạo một danh sách có thứ tự.',
                    'blanks' => 'nav,ol',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử đầu trang và thẻ [blank_2] dùng để tạo một khối văn bản có kiểu chữ gạch chân.',
                    'blanks' => 'header,u',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một phần tử có chú thích.',
                    'blanks' => 'strong,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] được sử dụng để tạo bảng và định nghĩa cột tiêu đề.',
                    'blanks' => 'table,th',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một nhóm liên kết điều hướng, thẻ [blank_2] định nghĩa một liên kết và thuộc tính [blank_3] xác định cách liên kết được mở.',
                    'blanks' => 'nav,a,target',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] được sử dụng để tạo form và định nghĩa các điều khiển nhập liệu như ô nhập và nút gửi.',
                    'blanks' => 'form,input',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn hình ảnh và thuộc tính [blank_2] xác định nguồn của hình ảnh.',
                    'blanks' => 'img,src',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa phần tử video và thuộc tính [blank_2] xác định nguồn video.',
                    'blanks' => 'video,src',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử khối văn bản và thẻ [blank_2] để tạo phần tử nội tuyến.',
                    'blanks' => 'div,span',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo danh sách không có thứ tự và các mục trong danh sách đó.',
                    'blanks' => 'ul,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử điều hướng và thuộc tính [blank_2] xác định cách liên kết mở.',
                    'blanks' => 'nav,target',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một đoạn văn bản với kiểu chữ mạnh và nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một nhóm các phần tử và thẻ [blank_2] tạo một nhóm các liên kết điều hướng.',
                    'blanks' => 'div,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một bảng và thẻ [blank_2] dùng để định nghĩa hàng trong bảng.',
                    'blanks' => 'table,tr',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa phần chân của tài liệu và thẻ [blank_2] dùng để định nghĩa phần đầu trang của tài liệu.',
                    'blanks' => 'footer,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo các mục trong danh sách có thứ tự và các mục trong danh sách đó.',
                    'blanks' => 'ol,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử có chú thích và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ gạch chân.',
                    'blanks' => 'mark,u',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các liên kết và thẻ [blank_2] định nghĩa một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'nav,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một vùng chọn trong biểu mẫu và thẻ [blank_2] dùng để định nghĩa các tùy chọn trong vùng chọn.',
                    'blanks' => 'select,option',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực văn bản và thẻ [blank_2] dùng để tạo một khối văn bản có kiểu chữ mạnh.',
                    'blanks' => 'section,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử đầu trang và thẻ [blank_2] dùng để định nghĩa một phần tử điều hướng.',
                    'blanks' => 'header,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các phần tử và thẻ [blank_2] dùng để tạo một khối văn bản với kiểu chữ gạch chéo.',
                    'blanks' => 'div,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một vùng chứa các phần tử văn bản và thẻ [blank_2] dùng để tạo một bảng.',
                    'blanks' => 'section,table',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử có kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một nhóm các liên kết và các mục trong danh sách.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử văn bản có kiểu chữ gạch chân và thẻ [blank_2] dùng để tạo một phần tử đầu trang của tài liệu.',
                    'blanks' => 'u,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một phần tử có chú thích.',
                    'blanks' => 's,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một danh sách không có thứ tự và thẻ [blank_2] dùng để tạo các mục trong danh sách đó.',
                    'blanks' => 'ul,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một vùng chọn trong biểu mẫu và thẻ [blank_2] dùng để định nghĩa các tùy chọn trong vùng chọn.',
                    'blanks' => 'select,option',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một bảng và thẻ [blank_2] dùng để định nghĩa cột tiêu đề.',
                    'blanks' => 'table,th',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và các mục trong phần tử điều hướng đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một khu vực văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để định nghĩa một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một nhóm các liên kết và các mục trong nhóm đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một vùng chứa văn bản và thẻ [blank_2] dùng để định nghĩa một bảng.',
                    'blanks' => 'section,table',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các mục trong danh sách có thứ tự và thẻ [blank_2] dùng để định nghĩa các mục đó.',
                    'blanks' => 'ol,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một khối văn bản có kiểu chữ gạch chân và thẻ [blank_2] dùng để định nghĩa một phần tử đầu trang.',
                    'blanks' => 'u,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử có kiểu chữ nghiêng và thẻ [blank_2] dùng để tạo một vùng chứa các phần tử.',
                    'blanks' => 'em,section',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và các mục trong phần tử điều hướng đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản với kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một phần tử có chú thích.',
                    'blanks' => 's,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các phần tử văn bản và thẻ [blank_2] dùng để tạo một phần tử điều hướng.',
                    'blanks' => 'div,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một vùng chứa và thẻ [blank_2] dùng để tạo một danh sách không có thứ tự.',
                    'blanks' => 'section,ul',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có kiểu chữ gạch chân và thẻ [blank_2] dùng để định nghĩa một phần tử có chú thích.',
                    'blanks' => 'u,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử điều hướng và thẻ [blank_2] dùng để định nghĩa một khối văn bản.',
                    'blanks' => 'nav,div',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ nghiêng và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh.',
                    'blanks' => 'em,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một vùng chứa và thẻ [blank_2] dùng để tạo một phần tử điều hướng.',
                    'blanks' => 'section,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một bảng và thẻ [blank_2] dùng để định nghĩa hàng trong bảng.',
                    'blanks' => 'table,tr',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một phần tử có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một danh sách có thứ tự và thẻ [blank_2] dùng để định nghĩa các mục trong danh sách đó.',
                    'blanks' => 'ol,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các phần tử văn bản và thẻ [blank_2] dùng để tạo một phần tử đầu trang của tài liệu.',
                    'blanks' => 'div,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một khối văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và các mục trong điều hướng đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ gạch chéo và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử có kiểu chữ nghiêng và thẻ [blank_2] dùng để tạo một phần tử có chú thích.',
                    'blanks' => 'em,mark',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử đầu trang và thẻ [blank_2] dùng để định nghĩa một phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và các mục trong phần tử điều hướng đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ gạch chân và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'u,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một nhóm các phần tử và thẻ [blank_2] dùng để tạo một danh sách có thứ tự.',
                    'blanks' => 'div,ol',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một khối văn bản và một phần tử đầu trang của tài liệu.',
                    'blanks' => 'div,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khu vực điều hướng trong trang web và thẻ [blank_2] dùng để tạo các liên kết điều hướng bên trong khu vực đó.',
                    'blanks' => 'nav,a',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một biểu mẫu và thuộc tính [blank_2] của thẻ [blank_3] xác định nơi gửi dữ liệu.',
                    'blanks' => 'form,action,input',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] được sử dụng để tạo một bảng với các hàng và cột, và thẻ [blank_3] dùng để định nghĩa các cột trong bảng.',
                    'blanks' => 'table,tr,td',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn hình ảnh và thuộc tính [blank_2] xác định nguồn hình ảnh, thuộc tính [blank_3] xác định văn bản thay thế.',
                    'blanks' => 'img,src,alt',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các liên kết điều hướng và thẻ [blank_2] dùng để định nghĩa các mục trong nhóm liên kết đó.',
                    'blanks' => 'nav,ul',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một danh sách không có thứ tự với các mục trong danh sách đó.',
                    'blanks' => 'ul,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một khối văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một khối văn bản có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để định nghĩa một khu vực chứa văn bản và thẻ [blank_3] dùng để tạo một khu vực cho biểu mẫu.',
                    'blanks' => 'section,article,form',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] định nghĩa một vùng chứa cho các mục trong danh sách có thứ tự và thẻ [blank_3] định nghĩa từng mục trong danh sách.',
                    'blanks' => 'ol,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] được sử dụng để tạo một phần tử có kiểu chữ mạnh và phần tử có kiểu chữ gạch chéo.',
                    'blanks' => 'strong,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn video vào trang web và thuộc tính [blank_2] xác định nguồn video, thuộc tính [blank_3] xác định các điều khiển phát video.',
                    'blanks' => 'video,src,controls',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một nhóm các tùy chọn trong biểu mẫu và thẻ [blank_2] dùng để định nghĩa từng tùy chọn trong nhóm đó.',
                    'blanks' => 'select,option',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một vùng chứa với kiểu chữ mạnh và thẻ [blank_2] dùng để định nghĩa một phần tử có kiểu chữ gạch chéo.',
                    'blanks' => 'strong,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để định nghĩa các phần tử văn bản có kiểu chữ mạnh và phần tử văn bản có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử đầu trang và một phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một nhóm các mục trong danh sách không có thứ tự và thẻ [blank_2] định nghĩa từng mục trong nhóm đó.',
                    'blanks' => 'ul,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử đầu trang và thẻ [blank_2] dùng để tạo một phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các phần tử với kiểu chữ gạch chân và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'u,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một khu vực văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để định nghĩa một khu vực điều hướng.',
                    'blanks' => 'strong,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để chèn hình ảnh vào trang và thuộc tính [blank_2] xác định văn bản thay thế cho hình ảnh.',
                    'blanks' => 'img,alt',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử khối và thẻ [blank_2] dùng để định nghĩa một phần tử điều hướng.',
                    'blanks' => 'div,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một nhóm các liên kết điều hướng và thẻ [blank_2] dùng để định nghĩa từng liên kết trong nhóm đó.',
                    'blanks' => 'nav,a',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] được sử dụng để tạo một khu vực chứa và định nghĩa các mục trong danh sách có thứ tự.',
                    'blanks' => 'section,ol',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một phần tử có kiểu chữ mạnh và thẻ [blank_2] dùng để định nghĩa một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh và một phần tử có kiểu chữ gạch chéo.',
                    'blanks' => 'strong,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử đầu trang và thẻ [blank_2] dùng để định nghĩa phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một nhóm các liên kết điều hướng và các mục trong nhóm đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một khối văn bản có kiểu chữ nghiêng và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ mạnh.',
                    'blanks' => 'em,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ nghiêng.',
                    'blanks' => 's,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử điều hướng và thẻ [blank_2] dùng để định nghĩa một khối văn bản có kiểu chữ gạch chân.',
                    'blanks' => 'nav,u',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử đầu trang và thẻ [blank_2] dùng để định nghĩa một phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh và một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một khối văn bản có kiểu chữ gạch chéo và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và một phần tử đầu trang.',
                    'blanks' => 'nav,header',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một vùng chứa và thẻ [blank_2] dùng để tạo một phần tử điều hướng.',
                    'blanks' => 'section,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử khối và thẻ [blank_2] dùng để định nghĩa một nhóm các liên kết.',
                    'blanks' => 'div,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng và một phần tử có kiểu chữ mạnh.',
                    'blanks' => 'em,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một nhóm các phần tử điều hướng và thẻ [blank_2] dùng để định nghĩa các mục trong nhóm đó.',
                    'blanks' => 'nav,li',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử đầu trang và một phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định nghĩa một khối văn bản có kiểu chữ mạnh và thẻ [blank_2] dùng để tạo một phần tử có kiểu chữ gạch chéo.',
                    'blanks' => 'strong,s',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh và một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 's,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và một khối văn bản có kiểu chữ mạnh.',
                    'blanks' => 'nav,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để định nghĩa một phần tử có kiểu chữ gạch chéo và một phần tử có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử đầu trang và thẻ [blank_2] dùng để tạo một phần tử điều hướng.',
                    'blanks' => 'header,nav',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử có kiểu chữ mạnh và một phần tử có kiểu chữ nghiêng.',
                    'blanks' => 'strong,em',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một phần tử đầu trang và thẻ [blank_2] dùng để định nghĩa phần tử chân của tài liệu.',
                    'blanks' => 'header,footer',
                ],
                [
                    'question' => 'Thẻ [blank_1] định nghĩa một phần tử có kiểu chữ gạch chéo và thẻ [blank_2] dùng để định nghĩa một phần tử có kiểu chữ mạnh.',
                    'blanks' => 's,strong',
                ],
                [
                    'question' => 'Thẻ [blank_1] và [blank_2] dùng để tạo một phần tử điều hướng và một phần tử đầu trang của tài liệu.',
                    'blanks' => 'nav,header',
                ],
            ];
        $essays_css =
            [
                [
                    'question' => 'Thẻ [blank_1] được sử dụng để thiết lập màu nền của phần tử. Ví dụ: [code]background-color: [blank_2];[/code]',
                    'blanks' => 'background-color,red',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thay đổi kích thước chữ trong phần tử. Ví dụ: [code]font-size: [blank_2];[/code]',
                    'blanks' => 'font-size,16px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] thay đổi màu chữ của phần tử. Ví dụ: [code]color: [blank_2];[/code]',
                    'blanks' => 'color,blue',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để định dạng kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_3];[/code]',
                    'blanks' => 'font-family,sans-serif',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thêm khoảng cách giữa các chữ cái. Ví dụ: [code]letter-spacing: [blank_2];[/code]',
                    'blanks' => 'letter-spacing,2px',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để định dạng chiều rộng của phần tử. Ví dụ: [code]width: [blank_2];[/code]',
                    'blanks' => 'width,100px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] xác định chiều cao của phần tử. Ví dụ: [code]height: [blank_2];[/code]',
                    'blanks' => 'height,200px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để căn chỉnh văn bản trong phần tử. Ví dụ: [code]text-align: [blank_3];[/code]',
                    'blanks' => 'text-align,center',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] điều chỉnh khoảng cách giữa các dòng văn bản. Ví dụ: [code]line-height: [blank_2];[/code]',
                    'blanks' => 'line-height,1.5',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để tạo viền cho phần tử. Ví dụ: [code]border: [blank_3];[/code]',
                    'blanks' => 'border,1px solid black',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] xác định khoảng cách giữa các phần tử. Ví dụ: [code]margin: [blank_2];[/code]',
                    'blanks' => 'margin,10px',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để thiết lập khoảng cách bên trong của phần tử. Ví dụ: [code]padding: [blank_2];[/code]',
                    'blanks' => 'padding,15px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] định dạng kiểu chữ cho phần tử. Ví dụ: [code]font-weight: [blank_2];[/code]',
                    'blanks' => 'font-weight,bold',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi màu nền của phần tử. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,green',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để xác định cách các phần tử con được căn chỉnh. Ví dụ: [code]display: [blank_2];[/code]',
                    'blanks' => 'display,flex',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để điều chỉnh độ trong suốt của phần tử. Ví dụ: [code]opacity: [blank_3];[/code]',
                    'blanks' => 'opacity,0.5',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] xác định cách phần tử có thể cuộn. Ví dụ: [code]overflow: [blank_2];[/code]',
                    'blanks' => 'overflow,auto',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để định dạng kiểu dáng của phần tử. Ví dụ: [code]border-radius: [blank_3];[/code]',
                    'blanks' => 'border-radius,10px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] điều chỉnh độ rộng của phần tử. Ví dụ: [code]max-width: [blank_2];[/code]',
                    'blanks' => 'max-width,500px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu nền cho phần tử. Ví dụ: [code]background-image: [blank_3];[/code]',
                    'blanks' => 'background-image,url(image.jpg)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] định nghĩa các kiểu dáng khác nhau cho phần tử. Ví dụ: [code]border-style: [blank_3];[/code]',
                    'blanks' => 'border-style,dotted',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để căn chỉnh văn bản trong phần tử. Ví dụ: [code]text-align: [blank_2];[/code]',
                    'blanks' => 'text-align,right',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] xác định khoảng cách giữa các phần tử con. Ví dụ: [code]padding-top: [blank_3];[/code]',
                    'blanks' => 'padding-top,20px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi màu nền của phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,yellow',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_2];[/code]',
                    'blanks' => 'font-family,Arial',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định khoảng cách giữa các dòng văn bản. Ví dụ: [code]line-height: [blank_3];[/code]',
                    'blanks' => 'line-height,1.2',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] xác định cách phần tử sẽ được cuộn. Ví dụ: [code]overflow-x: [blank_3];[/code]',
                    'blanks' => 'overflow-x,scroll',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để tạo một viền cho phần tử. Ví dụ: [code]border: [blank_2];[/code]',
                    'blanks' => 'border,2px dashed red',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập màu sắc của viền. Ví dụ: [code]border-color: [blank_2];[/code]',
                    'blanks' => 'border-color,purple',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định chiều cao của phần tử. Ví dụ: [code]height: [blank_3];[/code]',
                    'blanks' => 'height,300px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập khoảng cách bên ngoài phần tử. Ví dụ: [code]margin-top: [blank_3];[/code]',
                    'blanks' => 'margin-top,25px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] xác định kiểu hiển thị của phần tử. Ví dụ: [code]display: [blank_3];[/code]',
                    'blanks' => 'display,block',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập khoảng cách giữa các phần tử con. Ví dụ: [code]margin-left: [blank_2];[/code]',
                    'blanks' => 'margin-left,15px',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để xác định kiểu chữ của phần tử. Ví dụ: [code]font-style: [blank_2];[/code]',
                    'blanks' => 'font-style,italic',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để xác định kiểu hiển thị của phần tử. Ví dụ: [code]display: [blank_2];[/code]',
                    'blanks' => 'display,inline',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách giữa các phần tử con. Ví dụ: [code]padding-bottom: [blank_3];[/code]',
                    'blanks' => 'padding-bottom,10px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập màu chữ cho phần tử. Ví dụ: [code]color: [blank_2];[/code]',
                    'blanks' => 'color,orange',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách giữa các phần tử. Ví dụ: [code]margin-right: [blank_3];[/code]',
                    'blanks' => 'margin-right,5px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-weight: [blank_2];[/code]',
                    'blanks' => 'font-weight,normal',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định kiểu nền cho phần tử. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,linear-gradient(to right, red, blue)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập cách các phần tử con được hiển thị. Ví dụ: [code]display: [blank_2];[/code]',
                    'blanks' => 'display,flex',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo một khoảng cách bên trong phần tử. Ví dụ: [code]padding-left: [blank_3];[/code]',
                    'blanks' => 'padding-left,20px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để xác định màu nền cho phần tử. Ví dụ: [code]background-color: [blank_2];[/code]',
                    'blanks' => 'background-color,pink',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi màu sắc của viền phần tử. Ví dụ: [code]border-color: [blank_3];[/code]',
                    'blanks' => 'border-color,black',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh độ rộng của phần tử. Ví dụ: [code]width: [blank_2];[/code]',
                    'blanks' => 'width,150px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định khoảng cách giữa các dòng. Ví dụ: [code]line-height: [blank_3];[/code]',
                    'blanks' => 'line-height,1.8',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu nền cho phần tử. Ví dụ: [code]background-repeat: [blank_2];[/code]',
                    'blanks' => 'background-repeat,no-repeat',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh kiểu chữ của phần tử. Ví dụ: [code]font-style: [blank_3];[/code]',
                    'blanks' => 'font-style,normal',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập độ rộng của viền. Ví dụ: [code]border-width: [blank_2];[/code]',
                    'blanks' => 'border-width,3px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo viền cho phần tử. Ví dụ: [code]border-style: [blank_3];[/code]',
                    'blanks' => 'border-style,solid',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thay đổi màu chữ của phần tử. Ví dụ: [code]color: [blank_2];[/code]',
                    'blanks' => 'color,purple',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_3];[/code]',
                    'blanks' => 'font-family,Georgia',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-size: [blank_2];[/code]',
                    'blanks' => 'font-size,12px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách bên trong phần tử. Ví dụ: [code]padding-top: [blank_3];[/code]',
                    'blanks' => 'padding-top,30px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để xác định chiều cao của phần tử. Ví dụ: [code]height: [blank_3];[/code]',
                    'blanks' => 'height,250px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập màu nền cho phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,gray',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh kiểu chữ của phần tử. Ví dụ: [code]font-weight: [blank_2];[/code]',
                    'blanks' => 'font-weight,light',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định màu nền cho phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,teal',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập viền cho phần tử. Ví dụ: [code]border-radius: [blank_3];[/code]',
                    'blanks' => 'border-radius,15px',
                ],
                [
                    'question' => 'Thẻ [blank_1] dùng để thiết lập màu nền cho phần tử. Ví dụ: [code]background-color: [blank_2];[/code]',
                    'blanks' => 'background-color,cyan',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo một phần tử có kiểu chữ nghiêng. Ví dụ: [code]font-style: [blank_3];[/code]',
                    'blanks' => 'font-style,italic',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kiểu chữ của phần tử. Ví dụ: [code]font-weight: [blank_3];[/code]',
                    'blanks' => 'font-weight,bold',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập chiều rộng của phần tử. Ví dụ: [code]width: [blank_2];[/code]',
                    'blanks' => 'width,200px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-size: [blank_3];[/code]',
                    'blanks' => 'font-size,20px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh cách phần tử được căn chỉnh. Ví dụ: [code]text-align: [blank_2];[/code]',
                    'blanks' => 'text-align,justify',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách bên ngoài phần tử. Ví dụ: [code]margin-bottom: [blank_3];[/code]',
                    'blanks' => 'margin-bottom,25px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập màu viền của phần tử. Ví dụ: [code]border-color: [blank_2];[/code]',
                    'blanks' => 'border-color,maroon',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kích thước của phần tử. Ví dụ: [code]width: [blank_3];[/code]',
                    'blanks' => 'width,400px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_3];[/code]',
                    'blanks' => 'font-family,Times New Roman',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi màu nền của phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,magenta',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-weight: [blank_2];[/code]',
                    'blanks' => 'font-weight,bold',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định cách phần tử cuộn. Ví dụ: [code]overflow: [blank_3];[/code]',
                    'blanks' => 'overflow,hidden',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh khoảng cách giữa các phần tử con. Ví dụ: [code]padding-right: [blank_2];[/code]',
                    'blanks' => 'padding-right,5px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định màu nền của phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,black',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-style: [blank_3];[/code]',
                    'blanks' => 'font-style,normal',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi chiều rộng của phần tử. Ví dụ: [code]width: [blank_3];[/code]',
                    'blanks' => 'width,500px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập màu chữ của phần tử. Ví dụ: [code]color: [blank_2];[/code]',
                    'blanks' => 'color,teal',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định chiều cao của phần tử. Ví dụ: [code]height: [blank_3];[/code]',
                    'blanks' => 'height,350px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-size: [blank_2];[/code]',
                    'blanks' => 'font-size,18px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập khoảng cách giữa các phần tử. Ví dụ: [code]margin-left: [blank_3];[/code]',
                    'blanks' => 'margin-left,30px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh cách phần tử được căn chỉnh. Ví dụ: [code]text-align: [blank_2];[/code]',
                    'blanks' => 'text-align,left',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách giữa các phần tử con. Ví dụ: [code]padding-top: [blank_3];[/code]',
                    'blanks' => 'padding-top,10px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thay đổi màu nền của phần tử. Ví dụ: [code]background-color: [blank_2];[/code]',
                    'blanks' => 'background-color,orange',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh kích thước của phần tử. Ví dụ: [code]height: [blank_3];[/code]',
                    'blanks' => 'height,450px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo viền cho phần tử. Ví dụ: [code]border: [blank_3];[/code]',
                    'blanks' => 'border,3px solid gray',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập khoảng cách giữa các phần tử. Ví dụ: [code]margin-top: [blank_3];[/code]',
                    'blanks' => 'margin-top,20px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thay đổi màu sắc của phần tử. Ví dụ: [code]background-color: [blank_2];[/code]',
                    'blanks' => 'background-color,maroon',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để xác định kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_3];[/code]',
                    'blanks' => 'font-family,Comic Sans MS',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập chiều rộng của phần tử. Ví dụ: [code]width: [blank_3];[/code]',
                    'blanks' => 'width,600px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo một khoảng cách bên trong phần tử. Ví dụ: [code]padding-bottom: [blank_3];[/code]',
                    'blanks' => 'padding-bottom,35px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập màu viền cho phần tử. Ví dụ: [code]border-color: [blank_2];[/code]',
                    'blanks' => 'border-color,green',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh cách phần tử được hiển thị. Ví dụ: [code]display: [blank_3];[/code]',
                    'blanks' => 'display,inline-block',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để áp dụng hiệu ứng chuyển tiếp khi thay đổi thuộc tính. Ví dụ: [code]transition: [blank_3];[/code]',
                    'blanks' => 'transition,all 0.5s ease',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để xác định kiểu hiển thị của phần tử. Ví dụ: [code]display: [blank_2];[/code]',
                    'blanks' => 'display,grid',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu nền cho phần tử. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,linear-gradient(to bottom, red, blue)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo các lớp phủ cho phần tử. Ví dụ: [code]box-shadow: [blank_3];[/code]',
                    'blanks' => 'box-shadow,0 4px 8px rgba(0,0,0,0.3)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để áp dụng các kiểu cho phần tử. Ví dụ: [code]transform: [blank_3];[/code]',
                    'blanks' => 'transform,rotate(45deg)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập tỷ lệ phần tử theo tỷ lệ phần trăm. Ví dụ: [code]aspect-ratio: [blank_2];[/code]',
                    'blanks' => 'aspect-ratio,16/9',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo hiệu ứng chuyển động cho phần tử. Ví dụ: [code]animation: [blank_3];[/code]',
                    'blanks' => 'animation,bounce 2s infinite',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập vị trí của phần tử. Ví dụ: [code]position: [blank_3];[/code]',
                    'blanks' => 'position,absolute',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kiểu viền của phần tử. Ví dụ: [code]border-radius: [blank_3];[/code]',
                    'blanks' => 'border-radius,10px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thay đổi màu sắc của viền. Ví dụ: [code]border-color: [blank_2];[/code]',
                    'blanks' => 'border-color,orange',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập chiều cao cho phần tử. Ví dụ: [code]height: [blank_3];[/code]',
                    'blanks' => 'height,400px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập độ dày của viền. Ví dụ: [code]border-width: [blank_3];[/code]',
                    'blanks' => 'border-width,3px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để áp dụng các hiệu ứng chuyển tiếp cho phần tử. Ví dụ: [code]transition: [blank_3];[/code]',
                    'blanks' => 'transition,opacity 0.3s ease',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh khoảng cách giữa các phần tử. Ví dụ: [code]gap: [blank_2];[/code]',
                    'blanks' => 'gap,20px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập màu nền cho phần tử. Ví dụ: [code]background-image: [blank_3];[/code]',
                    'blanks' => 'background-image,url(image.png)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh kiểu chữ của phần tử. Ví dụ: [code]font-variant: [blank_2];[/code]',
                    'blanks' => 'font-variant,small-caps',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo viền cho phần tử. Ví dụ: [code]border-style: [blank_3];[/code]',
                    'blanks' => 'border-style,double',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập màu sắc cho nền. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,lightblue',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi chiều rộng của phần tử. Ví dụ: [code]width: [blank_3];[/code]',
                    'blanks' => 'width,500px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để tạo khoảng cách giữa các phần tử con. Ví dụ: [code]grid-gap: [blank_2];[/code]',
                    'blanks' => 'grid-gap,15px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để áp dụng kiểu chữ cho phần tử. Ví dụ: [code]font-size: [blank_3];[/code]',
                    'blanks' => 'font-size,28px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập khoảng cách giữa các phần tử. Ví dụ: [code]margin: [blank_3];[/code]',
                    'blanks' => 'margin,30px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh kiểu chữ cho phần tử. Ví dụ: [code]font-weight: [blank_3];[/code]',
                    'blanks' => 'font-weight,600',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu nền cho phần tử. Ví dụ: [code]background: [blank_2];[/code]',
                    'blanks' => 'background,radial-gradient(circle, red, yellow)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo bóng cho phần tử. Ví dụ: [code]box-shadow: [blank_3];[/code]',
                    'blanks' => 'box-shadow,5px 5px 10px rgba(0,0,0,0.5)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu viền cho phần tử. Ví dụ: [code]border: [blank_2];[/code]',
                    'blanks' => 'border,4px solid black',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi màu chữ. Ví dụ: [code]color: [blank_3];[/code]',
                    'blanks' => 'color,green',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập chiều rộng và chiều cao của phần tử. Ví dụ: [code]size: [blank_3];[/code]',
                    'blanks' => 'size,100px 200px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo hiệu ứng chuyển động. Ví dụ: [code]animation: [blank_3];[/code]',
                    'blanks' => 'animation,pulse 1s infinite',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thay đổi kiểu hiển thị của phần tử. Ví dụ: [code]display: [blank_2];[/code]',
                    'blanks' => 'display,fixed',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập hiệu ứng khi phần tử được hover. Ví dụ: [code]:hover { [blank_3]: [blank_4]; }[/code]',
                    'blanks' => 'background-color,lightcoral',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi khoảng cách giữa các phần tử. Ví dụ: [code]padding: [blank_3];[/code]',
                    'blanks' => 'padding,35px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu nền cho phần tử. Ví dụ: [code]background-image: [blank_3];[/code]',
                    'blanks' => 'background-image,url(image.jpg)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để điều chỉnh chiều rộng của phần tử. Ví dụ: [code]width: [blank_2];[/code]',
                    'blanks' => 'width,600px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách giữa các phần tử con. Ví dụ: [code]grid-template-columns: [blank_3];[/code]',
                    'blanks' => 'grid-template-columns,1fr 2fr 1fr',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập màu nền cho phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,lightgray',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kiểu viền của phần tử. Ví dụ: [code]border-style: [blank_3];[/code]',
                    'blanks' => 'border-style,dotted',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập chiều cao của phần tử. Ví dụ: [code]height: [blank_2];[/code]',
                    'blanks' => 'height,500px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kích thước chữ. Ví dụ: [code]font-size: [blank_3];[/code]',
                    'blanks' => 'font-size,24px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo hiệu ứng chuyển động. Ví dụ: [code]animation: [blank_3];[/code]',
                    'blanks' => 'animation,fade 2s ease',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập độ dày của viền. Ví dụ: [code]border-width: [blank_3];[/code]',
                    'blanks' => 'border-width,6px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập màu nền của phần tử. Ví dụ: [code]background-color: [blank_2];[/code]',
                    'blanks' => 'background-color,lavender',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh khoảng cách giữa các phần tử con. Ví dụ: [code]gap: [blank_3];[/code]',
                    'blanks' => 'gap,25px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để áp dụng hiệu ứng chuyển tiếp. Ví dụ: [code]transition: [blank_3];[/code]',
                    'blanks' => 'transition,background-color 0.4s ease',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kiểu hiển thị của phần tử. Ví dụ: [code]display: [blank_3];[/code]',
                    'blanks' => 'display,flex',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_2];[/code]',
                    'blanks' => 'font-family,Courier New',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách giữa các phần tử. Ví dụ: [code]margin-top: [blank_3];[/code]',
                    'blanks' => 'margin-top,5px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập màu sắc cho phần tử. Ví dụ: [code]color: [blank_3];[/code]',
                    'blanks' => 'color,maroon',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để áp dụng kiểu chữ cho phần tử. Ví dụ: [code]font-style: [blank_3];[/code]',
                    'blanks' => 'font-style,italic',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] dùng để tạo khoảng cách giữa các phần tử. Ví dụ: [code]margin: [blank_2];[/code]',
                    'blanks' => 'margin,45px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh màu nền cho phần tử. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,repeat-x',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập hiệu ứng khi người dùng hover. Ví dụ: [code]hover { [blank_3]: [blank_4]; }[/code]',
                    'blanks' => 'background-color,lightyellow',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập hiệu ứng hover cho phần tử. Ví dụ: [code]hover { [blank_3]: [blank_4]; }[/code]',
                    'blanks' => 'hover,background-color,blue',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo hiệu ứng chuyển động cho phần tử. Ví dụ: [code]animation: [blank_3];[/code]',
                    'blanks' => 'animation,shake 1s ease-in-out',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để tạo các lớp phủ cho phần tử. Ví dụ: [code]box-shadow: [blank_3];[/code]',
                    'blanks' => 'box-shadow,0 0 15px rgba(0,0,0,0.5)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để áp dụng hiệu ứng gradient cho nền. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,linear-gradient(to right, red, yellow)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu hiển thị của phần tử trong Flexbox. Ví dụ: [code]flex-direction: [blank_3];[/code]',
                    'blanks' => 'flex-direction,row-reverse',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kích thước của phần tử con trong Grid. Ví dụ: [code]grid-template-columns: [blank_3];[/code]',
                    'blanks' => 'grid-template-columns,1fr 2fr',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để tạo hiệu ứng nổi bật cho phần tử. Ví dụ: [code]filter: [blank_3];[/code]',
                    'blanks' => 'filter,blur(5px)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập các giá trị cho thuộc tính animation. Ví dụ: [code]animation-name: [blank_3];[/code]',
                    'blanks' => 'animation-name,fadeIn',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để điều chỉnh kiểu viền cho phần tử. Ví dụ: [code]border: [blank_3];[/code]',
                    'blanks' => 'border,2px dashed green',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi kiểu hiển thị của phần tử. Ví dụ: [code]display: [blank_3];[/code]',
                    'blanks' => 'display,grid',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập khoảng cách giữa các phần tử. Ví dụ: [code]gap: [blank_3];[/code]',
                    'blanks' => 'gap,20px',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập độ dày của viền. Ví dụ: [code]border-width: [blank_3];[/code]',
                    'blanks' => 'border-width,4px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để tạo các lớp phủ cho phần tử. Ví dụ: [code]box-shadow: [blank_3];[/code]',
                    'blanks' => 'box-shadow,0 0 20px rgba(0,0,0,0.7)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập hiệu ứng khi phần tử được hover. Ví dụ: [code]hover { [blank_3]: [blank_4]; }[/code]',
                    'blanks' => 'box-shadow,5px 5px 15px rgba(0,0,0,0.3)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để thiết lập kiểu chữ cho phần tử. Ví dụ: [code]font-family: [blank_3];[/code]',
                    'blanks' => 'font-family,"Times New Roman", serif',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập các hiệu ứng chuyển động cho phần tử. Ví dụ: [code]transition: [blank_3];[/code]',
                    'blanks' => 'transition,transform 0.3s ease',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập khoảng cách giữa các phần tử. Ví dụ: [code]margin: [blank_3];[/code]',
                    'blanks' => 'margin,auto',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo hiệu ứng gradient cho nền. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,radial-gradient(circle, pink, white)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kích thước và kiểu cho phần tử. Ví dụ: [code]width: [blank_3];[/code]',
                    'blanks' => 'width,80%',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kiểu hiển thị của phần tử trong Flexbox. Ví dụ: [code]flex-wrap: [blank_3];[/code]',
                    'blanks' => 'flex-wrap,wrap-reverse',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kiểu chữ của phần tử. Ví dụ: [code]text-transform: [blank_3];[/code]',
                    'blanks' => 'text-transform,uppercase',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập màu nền cho phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,lightgrey',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu viền cho phần tử. Ví dụ: [code]border-style: [blank_3];[/code]',
                    'blanks' => 'border-style,solid',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để tạo hiệu ứng cho phần tử. Ví dụ: [code]transform: [blank_3];[/code]',
                    'blanks' => 'transform,scale(1.1)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu nền cho phần tử. Ví dụ: [code]background: [blank_3];[/code]',
                    'blanks' => 'background,conic-gradient(red, yellow, green)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập khoảng cách giữa các phần tử con trong Grid. Ví dụ: [code]grid-gap: [blank_3];[/code]',
                    'blanks' => 'grid-gap,10px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thay đổi kiểu chữ của phần tử. Ví dụ: [code]font-weight: [blank_3];[/code]',
                    'blanks' => 'font-weight,900',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập chiều cao cho phần tử. Ví dụ: [code]height: [blank_3];[/code]',
                    'blanks' => 'height,100vh',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để áp dụng kiểu chữ cho phần tử. Ví dụ: [code]font-variant: [blank_3];[/code]',
                    'blanks' => 'font-variant,small-caps',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập độ dày viền cho phần tử. Ví dụ: [code]border-width: [blank_3];[/code]',
                    'blanks' => 'border-width,3px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập màu sắc của phần tử. Ví dụ: [code]color: [blank_3];[/code]',
                    'blanks' => 'color,blue',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi độ sáng của phần tử. Ví dụ: [code]filter: [blank_3];[/code]',
                    'blanks' => 'filter,brightness(120%)',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập các thuộc tính của phần tử trong Flexbox. Ví dụ: [code]align-items: [blank_3];[/code]',
                    'blanks' => 'align-items,center',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để áp dụng hiệu ứng cho phần tử. Ví dụ: [code]transition-property: [blank_3];[/code]',
                    'blanks' => 'transition-property,opacity',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập các phần tử của Grid. Ví dụ: [code]grid-template-rows: [blank_3];[/code]',
                    'blanks' => 'grid-template-rows,repeat(3, 1fr)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi kích thước văn bản. Ví dụ: [code]font-size: [blank_3];[/code]',
                    'blanks' => 'font-size,20px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] được sử dụng để thiết lập hiệu ứng cho phần tử. Ví dụ: [code]transform-origin: [blank_3];[/code]',
                    'blanks' => 'transform-origin,center',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập độ rộng của viền. Ví dụ: [code]border-width: [blank_3];[/code]',
                    'blanks' => 'border-width,8px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập các hiệu ứng chuyển tiếp cho phần tử. Ví dụ: [code]transition-duration: [blank_3];[/code]',
                    'blanks' => 'transition-duration,0.5s',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi màu nền của phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,coral',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập màu sắc của văn bản. Ví dụ: [code]color: [blank_3];[/code]',
                    'blanks' => 'color,darkblue',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập các thuộc tính cho các phần tử con trong Grid. Ví dụ: [code]grid-auto-flow: [blank_3];[/code]',
                    'blanks' => 'grid-auto-flow,dense',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập hiệu ứng hình ảnh cho phần tử. Ví dụ: [code]filter: [blank_3];[/code]',
                    'blanks' => 'filter,saturate(150%)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập độ dài của hiệu ứng chuyển tiếp. Ví dụ: [code]transition-delay: [blank_3];[/code]',
                    'blanks' => 'transition-delay,0.2s',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập độ phân giải của hình ảnh. Ví dụ: [code]image-rendering: [blank_3];[/code]',
                    'blanks' => 'image-rendering,optimizeQuality',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kiểu viền cho phần tử. Ví dụ: [code]border-radius: [blank_3];[/code]',
                    'blanks' => 'border-radius,10px',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập kiểu hiển thị của các phần tử con. Ví dụ: [code]flex-direction: [blank_3];[/code]',
                    'blanks' => 'flex-direction,column',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi kiểu chữ cho văn bản. Ví dụ: [code]font-style: [blank_3];[/code]',
                    'blanks' => 'font-style,italic',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để tạo khoảng cách giữa các phần tử trong Flexbox. Ví dụ: [code]justify-content: [blank_3];[/code]',
                    'blanks' => 'justify-content,space-around',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập màu nền cho phần tử. Ví dụ: [code]background-repeat: [blank_3];[/code]',
                    'blanks' => 'background-repeat,no-repeat',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập các thuộc tính của phần tử trong Grid. Ví dụ: [code]grid-template-areas: [blank_3];[/code]',
                    'blanks' => 'grid-template-areas,"header header" "sidebar main"',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kiểu hiển thị cho phần tử. Ví dụ: [code]display: [blank_3];[/code]',
                    'blanks' => 'display,fixed',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập các hiệu ứng cho phần tử. Ví dụ: [code]transform: [blank_3];[/code]',
                    'blanks' => 'transform,rotate(45deg)',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thay đổi màu nền của phần tử. Ví dụ: [code]background-color: [blank_3];[/code]',
                    'blanks' => 'background-color,lightgreen',
                ],
                [
                    'question' => 'Thẻ [blank_1] và thuộc tính [blank_2] dùng để thiết lập hiệu ứng chuyển tiếp cho phần tử. Ví dụ: [code]transition-timing-function: [blank_3];[/code]',
                    'blanks' => 'transition-timing-function,ease-in-out',
                ],
                [
                    'question' => 'Thuộc tính [blank_1] và [blank_2] dùng để thiết lập kích thước của phần tử. Ví dụ: [code]max-width: [blank_3];[/code]',
                    'blanks' => 'max-width,1200px',
                ],
            ];
        $essays_react =
            [
                [
                    'question' => 'Để tạo một component trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function MyComponent() { return <div>Hello</div>; }[/code]',
                    'blanks' => 'function',
                ],
                [
                    'question' => 'Trong React, để quản lý trạng thái của một component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const [count, setCount] = useState(0);[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để hiển thị một component con trong một component cha, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<ChildComponent />[/code]',
                    'blanks' => 'JSX',
                ],
                [
                    'question' => 'Để truyền props từ component cha xuống component con, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<ChildComponent name="John" />[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Để cập nhật trạng thái trong React, bạn sử dụng hàm [blank_1]. Ví dụ: [code]setCount(count + 1);[/code]',
                    'blanks' => 'setCount',
                ],
                [
                    'question' => 'Trong React, để quản lý các sự kiện như click, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Để xử lý sự kiện trong React, bạn có thể tạo một hàm sự kiện như sau: [code]function handleClick() { [blank_1] }[/code]',
                    'blanks' => 'console.log("Button clicked")',
                ],
                [
                    'question' => 'Khi sử dụng React, để render một danh sách các phần tử, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]{items.map(item => <li key={item.id}>{item.name}</li>)}</code>',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để tạo một component có thể nhận dữ liệu từ các component cha, bạn sử dụng [blank_1]. Ví dụ: [code]function ChildComponent(props) { return <div>{props.name}</div>; }[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Trong React, để thay đổi giá trị của một input, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input value={value} onChange={handleChange} />[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để tạo một hook tùy chỉnh trong React, bạn có thể định nghĩa hàm bắt đầu bằng từ [blank_1]. Ví dụ: [code]function useCustomHook() { return value; }[/code]',
                    'blanks' => 'use',
                ],
                [
                    'question' => 'Để sử dụng hiệu ứng phụ trong React, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]useEffect(() => { [blank_2] }, [blank_3]);[/code]',
                    'blanks' => 'useEffect,console.log("Component mounted"),[]',
                ],
                [
                    'question' => 'Khi sử dụng React Router, bạn có thể tạo các route bằng cách sử dụng component [blank_1]. Ví dụ: [code]<Route path="/home" component={HomePage} />[/code]',
                    'blanks' => 'Route',
                ],
                [
                    'question' => 'Trong React, để đảm bảo một component chỉ được render khi các props thay đổi, bạn có thể sử dụng [blank_1]. Ví dụ: [code]React.memo(Component)[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Để kiểm tra kiểu dữ liệu của props trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Component.propTypes = { name: PropTypes.string.isRequired };[/code]',
                    'blanks' => 'PropTypes',
                ],
                [
                    'question' => 'Để cung cấp giá trị mặc định cho props trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Component.defaultProps = { name: "Default Name" };[/code]',
                    'blanks' => 'defaultProps',
                ],
                [
                    'question' => 'Trong React, để cập nhật một giá trị trong state, bạn sử dụng hàm [blank_1]. Ví dụ: [code]setState({ count: count + 1 });[/code]',
                    'blanks' => 'setState',
                ],
                [
                    'question' => 'Để tạo một form đơn giản trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<form onSubmit={handleSubmit}><input type="text" name="name" /></form>[/code]',
                    'blanks' => 'form',
                ],
                [
                    'question' => 'Để thay đổi lớp CSS của một phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div className={isActive ? "active" : "inactive"}></div>[/code]',
                    'blanks' => 'className',
                ],
                [
                    'question' => 'Khi sử dụng React, để cập nhật giá trị của một thuộc tính HTML, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div id={elementId}></div>[/code]',
                    'blanks' => 'id',
                ],
                [
                    'question' => 'Để điều chỉnh kích thước của một phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ width: "100px", height: "100px" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Trong React, để render các phần tử con, bạn có thể sử dụng [blank_1]. Ví dụ: [code]return <>{children}</>;[/code]',
                    'blanks' => 'children',
                ],
                [
                    'question' => 'Để sử dụng hook `useState` trong React, bạn cần phải gọi nó trong [blank_1]. Ví dụ: [code]const [state, setState] = useState(initialState);[/code]',
                    'blanks' => 'component function',
                ],
                [
                    'question' => 'Để thay đổi giá trị của state khi có một sự kiện xảy ra, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<button onClick={() => setCount(count + 1)}>Increase</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Để điều chỉnh vị trí của một phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]style={{ position: "absolute", top: "10px", left: "10px" }}[/code]',
                    'blanks' => 'position',
                ],
                [
                    'question' => 'Trong React, để thay đổi nội dung của một thẻ, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div>{content}</div>[/code]',
                    'blanks' => 'content',
                ],
                [
                    'question' => 'Để sử dụng React Context, bạn cần phải tạo [blank_1]. Ví dụ: [code]const MyContext = React.createContext();[/code]',
                    'blanks' => 'context',
                ],
                [
                    'question' => 'Để lấy giá trị từ React Context, bạn sử dụng hook [blank_1]. Ví dụ: [code]const value = useContext(MyContext);[/code]',
                    'blanks' => 'useContext',
                ],
                [
                    'question' => 'Để cập nhật giá trị của một input text trong React, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input value={text} onChange={handleChange} />[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Trong React, để thay đổi trạng thái của một checkbox, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input type="checkbox" checked={isChecked} onChange={handleChange} />[/code]',
                    'blanks' => 'checked',
                ],
                [
                    'question' => 'Để sử dụng một component từ thư viện bên ngoài trong React, bạn cần phải [blank_1]. Ví dụ: [code]import { Component } from "library";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Để thêm một phần tử HTML vào DOM khi render, bạn có thể sử dụng [blank_1]. Ví dụ: [code]ReactDOM.render(<App />, document.getElementById("root"));[/code]',
                    'blanks' => 'ReactDOM.render',
                ],
                [
                    'question' => 'Trong React, để đảm bảo component không được render lại khi không cần thiết, bạn có thể sử dụng [blank_1]. Ví dụ: [code]React.memo(MyComponent);[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Để thiết lập default value cho một component input trong React, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input defaultValue="Default" />[/code]',
                    'blanks' => 'defaultValue',
                ],
                [
                    'question' => 'Để sử dụng hook `useEffect` với các dependencies, bạn cần phải truyền [blank_1]. Ví dụ: [code]useEffect(() => { [blank_2] }, [blank_3]);[/code]',
                    'blanks' => 'dependencies',
                ],
                [
                    'question' => 'Để thay đổi kiểu font của văn bản trong React, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ fontFamily: "Arial" }}>Text</div>[/code]',
                    'blanks' => 'fontFamily',
                ],
                [
                    'question' => 'Để cấu hình các thuộc tính của phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ color: "red", fontSize: "16px" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Trong React, để tạo một component dạng class, bạn cần phải kế thừa từ lớp [blank_1]. Ví dụ: [code]class MyComponent extends React.Component { render() { return <div>Hello</div>; } }[/code]',
                    'blanks' => 'React.Component',
                ],
                [
                    'question' => 'Để truyền giá trị từ component cha xuống component con trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<ChildComponent name="John" />[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Trong React, để thiết lập một default value cho một component, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]Component.defaultProps = { name: "Default" };[/code]',
                    'blanks' => 'defaultProps',
                ],
                [
                    'question' => 'Để tạo một form đơn giản với React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<form onSubmit={handleSubmit}><input type="text" name="name" /></form>[/code]',
                    'blanks' => 'form',
                ],
                [
                    'question' => 'Để quản lý sự thay đổi giá trị của input trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const [value, setValue] = useState("");[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để thiết lập các thuộc tính cho một phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ margin: "10px" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Trong React, để tạo một điều kiện cho việc render, bạn có thể sử dụng [blank_1]. Ví dụ: [code]return isLoggedIn ? <Logout /> : <Login />;[/code]',
                    'blanks' => 'conditional rendering',
                ],
                [
                    'question' => 'Để đảm bảo rằng một component chỉ được tạo ra một lần, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]useMemo(() => computeExpensiveValue(), [dependencies]);[/code]',
                    'blanks' => 'useMemo',
                ],
                [
                    'question' => 'Để tạo một component có thể nhận props và state, bạn cần định nghĩa nó bằng cách sử dụng [blank_1]. Ví dụ: [code]class MyComponent extends React.Component { render() { return <div>{this.props.text}</div>; } }[/code]',
                    'blanks' => 'class',
                ],
                [
                    'question' => 'Để xử lý sự kiện form submit trong React, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]function handleSubmit(event) { event.preventDefault(); }[/code]',
                    'blanks' => 'handleSubmit',
                ],
                [
                    'question' => 'Để tạo một button trong React và gán sự kiện cho nó, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Để quản lý các phần tử danh sách trong React, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]{items.map(item => <li key={item.id}>{item.name}</li>)}</code>',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để tạo một component đơn giản sử dụng function trong React, bạn có thể viết [blank_1]. Ví dụ: [code]function MyComponent() { return <div>Hello</div>; }[/code]',
                    'blanks' => 'function',
                ],
                [
                    'question' => 'Trong React, để sử dụng một component con trong component cha, bạn có thể gọi nó trong JSX như sau: [blank_1]. Ví dụ: [code]<ChildComponent />[/code]',
                    'blanks' => 'JSX',
                ],
                [
                    'question' => 'Để quản lý sự thay đổi của giá trị trong một ô input, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input value={inputValue} onChange={handleChange} />[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Khi sử dụng React, để gán giá trị cho thuộc tính của một phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div id={elementId}></div>[/code]',
                    'blanks' => 'id',
                ],
                [
                    'question' => 'Để tạo một danh sách các phần tử từ một mảng trong React, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]{items.map(item => <li key={item.id}>{item.name}</li>)}</code>',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để sử dụng một thư viện bên ngoài trong React, bạn cần [blank_1]. Ví dụ: [code]import { LibraryComponent } from "library";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Để sử dụng hook `useEffect` mà không có dependencies, bạn chỉ cần truyền [blank_1]. Ví dụ: [code]useEffect(() => { [blank_2] }, []);[/code]',
                    'blanks' => '[],console.log("Component mounted")',
                ],
                [
                    'question' => 'Để thiết lập thuộc tính cho một phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ color: "blue" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để truyền dữ liệu từ component cha xuống component con trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<ChildComponent data={data} />[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Trong React, để cấu hình trạng thái của một component, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const [count, setCount] = useState(0);[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để quản lý sự thay đổi giá trị của một thuộc tính trong React, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input value={inputValue} onChange={handleChange} />[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để thực hiện một hành động khi một sự kiện xảy ra, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Trong React, để sử dụng một hook như `useState`, bạn cần phải gọi nó trong [blank_1]. Ví dụ: [code]const [count, setCount] = useState(0);[/code]',
                    'blanks' => 'component function',
                ],
                [
                    'question' => 'Để tạo một form đơn giản trong React và xử lý submit, bạn sử dụng [blank_1]. Ví dụ: [code]<form onSubmit={handleSubmit}><input type="text" /></form>[/code]',
                    'blanks' => 'form',
                ],
                [
                    'question' => 'Để làm việc với một input trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input value={inputValue} onChange={handleChange} />[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để sử dụng một component khác trong React, bạn cần phải [blank_1]. Ví dụ: [code]import MyComponent from "./MyComponent";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Để kiểm tra xem một component có phải là một component React hay không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]React.isValidElement(element)[/code]',
                    'blanks' => 'React.isValidElement',
                ],
                [
                    'question' => 'Trong React, để sử dụng một thuộc tính CSS cho một phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ color: "red" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để điều chỉnh layout của các phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ display: "flex" }}></div>[/code]',
                    'blanks' => 'display',
                ],
                [
                    'question' => 'Để sử dụng một hàm sự kiện trong React, bạn cần phải gán nó vào thuộc tính [blank_1]. Ví dụ: [code]<button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Để tạo một component và sử dụng nó trong React, bạn cần viết [blank_1]. Ví dụ: [code]function MyComponent() { return <div>Content</div>; }[/code]',
                    'blanks' => 'function',
                ],
                [
                    'question' => 'Khi bạn muốn cập nhật một giá trị trong state, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]setState(newValue);[/code]',
                    'blanks' => 'setState',
                ],
                [
                    'question' => 'Để sử dụng thuộc tính CSS inline trong React, bạn cần sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ backgroundColor: "blue" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để render một danh sách các phần tử trong React, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]items.map(item => <li key={item.id}>{item.name}</li>)</code>',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để thay đổi giá trị của một thuộc tính HTML trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<input value={inputValue} />[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để điều chỉnh các thuộc tính của một phần tử HTML trong React, bạn cần sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ margin: "10px" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để xử lý sự kiện form submit trong React, bạn sử dụng hàm [blank_1]. Ví dụ: [code]function handleSubmit(event) { event.preventDefault(); }[/code]',
                    'blanks' => 'handleSubmit',
                ],
                [
                    'question' => 'Khi bạn sử dụng React Router, để tạo route bạn sử dụng component [blank_1]. Ví dụ: [code]<Route path="/home" component={HomePage} />[/code]',
                    'blanks' => 'Route',
                ],
                [
                    'question' => 'Để sử dụng React Context, bạn cần phải tạo [blank_1]. Ví dụ: [code]const MyContext = React.createContext();[/code]',
                    'blanks' => 'context',
                ],
                [
                    'question' => 'Để thay đổi giá trị của một thuộc tính trong React, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div id={elementId}></div>[/code]',
                    'blanks' => 'id',
                ],
                [
                    'question' => 'Để tạo một form với một ô nhập dữ liệu trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<input type="text" value={inputValue} onChange={handleChange} />[/code]',
                    'blanks' => 'input',
                ],
                [
                    'question' => 'Để thiết lập một thuộc tính cho một phần tử trong React, bạn cần sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ color: "green" }}></div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để tạo một component với khả năng cập nhật state từ bên ngoài, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const MyComponent = ({ value }) => { return <div>{value}</div>; }[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện side effects trong một component, bạn sử dụng hook [blank_1]. Ví dụ: [code]useEffect(() => { [blank_2] }, [blank_3]);[/code]',
                    'blanks' => 'useEffect, console.log("Component mounted"), [dependencies]',
                ],
                [
                    'question' => 'Để tạo một custom hook trong React, bạn cần viết một hàm bắt đầu bằng [blank_1]. Ví dụ: [code]function useCustomHook() { const [state, setState] = useState(); return [state, setState]; }[/code]',
                    'blanks' => 'use',
                ],
                [
                    'question' => 'Để xử lý sự kiện trên một phần tử trong React, bạn cần sử dụng thuộc tính [blank_1]. Ví dụ: [code]<button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Để cấu hình routing trong ứng dụng React, bạn sử dụng thư viện [blank_1]. Ví dụ: [code]import { BrowserRouter as Router, Route } from "react-router-dom";[/code]',
                    'blanks' => 'react-router-dom',
                ],
                [
                    'question' => 'Để sử dụng Context API trong React, bạn cần tạo [blank_1] và [blank_2]. Ví dụ: [code]const MyContext = React.createContext();[/code]',
                    'blanks' => 'context, provider',
                ],
                [
                    'question' => 'Để kết nối một component với Redux store, bạn sử dụng hàm [blank_1]. Ví dụ: [code]import { connect } from "react-redux";[/code]',
                    'blanks' => 'connect',
                ],
                [
                    'question' => 'Để tối ưu hóa hiệu suất của một component, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const memoizedValue = useMemo(() => computeExpensiveValue(), [dependencies]);[/code]',
                    'blanks' => 'useMemo',
                ],
                [
                    'question' => 'Để tạo một component có thể nhận ref từ parent component, bạn cần sử dụng [blank_1]. Ví dụ: [code]const forwardRefComponent = React.forwardRef((props, ref) => <div ref={ref} />);[/code]',
                    'blanks' => 'React.forwardRef',
                ],
                [
                    'question' => 'Để xử lý các hành động bất đồng bộ trong Redux, bạn có thể sử dụng [blank_1]. Ví dụ: [code]import { createAsyncThunk } from "@reduxjs/toolkit";[/code]',
                    'blanks' => 'createAsyncThunk',
                ],
                [
                    'question' => 'Khi bạn muốn tạo một component có khả năng lấy dữ liệu từ API, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const [data, setData] = useState(); useEffect(() => { fetchData(); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để quản lý trạng thái toàn cục trong React, bạn có thể sử dụng thư viện [blank_1]. Ví dụ: [code]import { Provider } from "react-redux";[/code]',
                    'blanks' => 'redux',
                ],
                [
                    'question' => 'Để đảm bảo rằng một component chỉ render khi các props thay đổi, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const memoizedComponent = React.memo(Component);[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Để tạo một HOC (Higher-Order Component) trong React, bạn cần viết một hàm nhận một component và trả về [blank_1]. Ví dụ: [code]function withEnhancement(WrappedComponent) { return function(props) { return <WrappedComponent {...props} />; }; }[/code]',
                    'blanks' => 'component',
                ],
                [
                    'question' => 'Khi bạn muốn sử dụng một thư viện CSS trong React, bạn có thể [blank_1]. Ví dụ: [code]import "./styles.css";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Để sử dụng các thuộc tính động trong inline styling của React, bạn cần sử dụng [blank_1]. Ví dụ: [code]<div style={{ color: colorValue }}>Text</div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để xử lý sự kiện form submit trong React, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]function handleSubmit(event) { event.preventDefault(); }[/code]',
                    'blanks' => 'handleSubmit',
                ],
                [
                    'question' => 'Để quản lý trạng thái của một component bằng hook, bạn sử dụng [blank_1]. Ví dụ: [code]const [state, setState] = useState(initialState);[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để truyền dữ liệu từ component cha xuống component con, bạn sử dụng [blank_1]. Ví dụ: [code]<ChildComponent data={data} />[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Để thiết lập các giá trị mặc định cho props trong một component, bạn sử dụng [blank_1]. Ví dụ: [code]Component.defaultProps = { name: "Default" };[/code]',
                    'blanks' => 'defaultProps',
                ],
                [
                    'question' => 'Để tạo một route trong ứng dụng React sử dụng React Router, bạn sử dụng component [blank_1]. Ví dụ: [code]<Route path="/path" component={Component} />[/code]',
                    'blanks' => 'Route',
                ],
                [
                    'question' => 'Để sử dụng React Context API trong một component, bạn cần sử dụng hook [blank_1]. Ví dụ: [code]const contextValue = useContext(MyContext);[/code]',
                    'blanks' => 'useContext',
                ],
                [
                    'question' => 'Để thay đổi giá trị của một thuộc tính trong React khi có sự kiện, bạn cần sử dụng [blank_1]. Ví dụ: [code]<input value={value} onChange={e => setValue(e.target.value)} />[/code]',
                    'blanks' => 'onChange',
                ],
                [
                    'question' => 'Khi bạn muốn kiểm tra xem một component có được render không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]ReactDOM.render(<App />, document.getElementById("root"));[/code]',
                    'blanks' => 'ReactDOM.render',
                ],
                [
                    'question' => 'Để tối ưu hóa hiệu suất của một component bằng cách ngăn chặn việc render lại không cần thiết, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const MemoizedComponent = React.memo(MyComponent);[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Để thiết lập các thuộc tính cho phần tử React, bạn cần sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ color: "blue", margin: "10px" }}>Content</div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để quản lý trạng thái của các phần tử trong danh sách, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const [items, setItems] = useState([]);[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để tạo một component có thể nhận ref từ parent component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const ForwardedComponent = React.forwardRef((props, ref) => <div ref={ref} />);[/code]',
                    'blanks' => 'React.forwardRef',
                ],
                [
                    'question' => 'Khi bạn cần cấu hình các thuộc tính cho phần tử dựa trên một điều kiện, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const className = isActive ? "active" : "inactive";[/code]',
                    'blanks' => 'conditional rendering',
                ],
                [
                    'question' => 'Để đảm bảo rằng một component chỉ được tạo ra một lần trong ứng dụng, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const memoizedValue = useMemo(() => computeExpensiveValue(), [dependencies]);[/code]',
                    'blanks' => 'useMemo',
                ],
                [
                    'question' => 'Để sử dụng một component từ một thư viện bên ngoài, bạn cần [blank_1]. Ví dụ: [code]import { Button } from "library";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Khi bạn cần theo dõi một giá trị trong component và cập nhật khi giá trị thay đổi, bạn sử dụng hook [blank_1]. Ví dụ: [code]useEffect(() => { console.log(value); }, [value]);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để sử dụng một thuộc tính CSS động trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<div style={{ color: colorValue }}>Text</div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Để tạo một component có khả năng chấp nhận các thuộc tính tùy chọn, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function MyComponent({ optionalProp }) { return <div>{optionalProp}</div>; }[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Để kiểm tra xem một component có phải là component chức năng hay không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]typeof Component === "function"[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để tích hợp React với một thư viện bên ngoài, bạn có thể sử dụng [blank_1]. Ví dụ: [code]import { ExternalComponent } from "external-library";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Khi bạn muốn thực hiện một hành động sau khi một component được render, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]useEffect(() => { doSomething(); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để kiểm tra giá trị của một thuộc tính trong component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]console.log(props.someValue);[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Để sử dụng một component từ thư viện bên ngoài trong ứng dụng của bạn, bạn cần phải [blank_1]. Ví dụ: [code]import { LibraryComponent } from "library";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Để tạo một component mà có thể lấy props từ parent, bạn cần sử dụng [blank_1]. Ví dụ: [code]function MyComponent(props) { return <div>{props.title}</div>; }[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Để tạo một list động trong React, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]items.map(item => <li key={item.id}>{item.name}</li>)</code>',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để cập nhật trạng thái của một component khi có sự kiện xảy ra, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const [value, setValue] = useState(""); const handleChange = (e) => setValue(e.target.value);[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để điều chỉnh layout của các phần tử trong React, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ display: "flex" }}></div>[/code]',
                    'blanks' => 'display',
                ],
                [
                    'question' => 'Để xử lý sự kiện click trên một nút, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]<button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Để tạo một component có thể được sử dụng nhiều lần trong ứng dụng, bạn cần [blank_1]. Ví dụ: [code]function Button(props) { return <button>{props.label}</button>; }[/code]',
                    'blanks' => 'props',
                ],
                [
                    'question' => 'Để quản lý trạng thái global trong ứng dụng React với Redux, bạn cần tạo [blank_1] và [blank_2]. Ví dụ: [code]const store = createStore(rootReducer);[/code]',
                    'blanks' => 'store, rootReducer',
                ],
                [
                    'question' => 'Khi bạn sử dụng `useReducer` để quản lý trạng thái phức tạp trong một component, bạn cần định nghĩa [blank_1] và [blank_2]. Ví dụ: [code]const [state, dispatch] = useReducer(reducer, initialState);[/code]',
                    'blanks' => 'reducer, initialState',
                ],
                [
                    'question' => 'Để kết nối một component với Redux store, bạn cần sử dụng hàm [blank_1] và [blank_2]. Ví dụ: [code]const mapStateToProps = state => ({ data: state.data }); const mapDispatchToProps = dispatch => ({ fetchData: () => dispatch(fetchData()) });[/code]',
                    'blanks' => 'connect, mapDispatchToProps',
                ],
                [
                    'question' => 'Để tạo một React Hook mà có thể được sử dụng bởi các component khác, bạn nên định nghĩa một hàm với tiền tố [blank_1]. Ví dụ: [code]function useCustomHook() { const [state, setState] = useState(); return [state, setState]; }[/code]',
                    'blanks' => 'use',
                ],
                [
                    'question' => 'Khi bạn muốn lazy load một component trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const LazyComponent = React.lazy(() => import("./LazyComponent"));[/code]',
                    'blanks' => 'React.lazy',
                ],
                [
                    'question' => 'Để đảm bảo rằng một component chỉ render lại khi một giá trị cụ thể thay đổi, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const memoizedValue = useMemo(() => computeExpensiveValue(), [dependencies]);[/code]',
                    'blanks' => 'useMemo',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng `ref` trong một component mà không thay đổi giá trị của `ref`, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const inputRef = useRef();[/code]',
                    'blanks' => 'useRef',
                ],
                [
                    'question' => 'Để sử dụng HOC (Higher-Order Component) trong React, bạn cần viết một hàm nhận một component và trả về [blank_1]. Ví dụ: [code]function withExtraProps(WrappedComponent) { return (props) => <WrappedComponent extraProp={value} {...props} />; }[/code]',
                    'blanks' => 'component',
                ],
                [
                    'question' => 'Khi bạn muốn tạo một component với khả năng nhận `ref`, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const ForwardedComponent = React.forwardRef((props, ref) => <div ref={ref} />);[/code]',
                    'blanks' => 'React.forwardRef',
                ],
                [
                    'question' => 'Để sử dụng Context API để cung cấp dữ liệu cho nhiều component, bạn cần định nghĩa [blank_1] và [blank_2]. Ví dụ: [code]const MyContext = React.createContext();[/code]',
                    'blanks' => 'context, provider',
                ],
                [
                    'question' => 'Để thực hiện các hành động bất đồng bộ trong Redux, bạn có thể sử dụng middleware [blank_1]. Ví dụ: [code]import thunk from "redux-thunk";[/code]',
                    'blanks' => 'redux-thunk',
                ],
                [
                    'question' => 'Để xử lý một form với nhiều input trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const handleChange = (event) => { setValues({ ...values, [event.target.name]: event.target.value }); }[/code]',
                    'blanks' => 'onChange',
                ],
                [
                    'question' => 'Để tối ưu hóa hiệu suất của một component khi nhận props, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const MemoizedComponent = React.memo(MyComponent);[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Khi bạn cần tạo một component có khả năng hủy bỏ sự kiện khi component bị unmount, bạn có thể sử dụng [blank_1]. Ví dụ: [code]useEffect(() => { const timer = setTimeout(() => { console.log("Tick"); }, 1000); return () => clearTimeout(timer); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để xử lý các props truyền vào trong một component và đảm bảo rằng các giá trị của props không thay đổi bất thường, bạn có thể sử dụng [blank_1]. Ví dụ: [code]MyComponent.propTypes = { name: PropTypes.string.isRequired };[/code]',
                    'blanks' => 'PropTypes',
                ],
                [
                    'question' => 'Để tạo một component có thể nhận các thuộc tính động từ parent, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function DynamicComponent(props) { return <div {...props}>Dynamic</div>; }[/code]',
                    'blanks' => 'spread operator',
                ],
                [
                    'question' => 'Khi bạn cần tạo các route động trong ứng dụng React với React Router, bạn sử dụng [blank_1]. Ví dụ: [code]import { Route, Switch } from "react-router-dom";[/code]',
                    'blanks' => 'Switch',
                ],
                [
                    'question' => 'Để đảm bảo rằng một component chỉ được render một lần, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const [state, setState] = useState(); useEffect(() => { initialize(); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để kết hợp nhiều reducer trong một Redux store, bạn sử dụng hàm [blank_1]. Ví dụ: [code]import { combineReducers } from "redux"; const rootReducer = combineReducers({ user: userReducer, posts: postsReducer });[/code]',
                    'blanks' => 'combineReducers',
                ],
                [
                    'question' => 'Để tích hợp React với hệ thống điều hướng bên ngoài, bạn có thể sử dụng [blank_1]. Ví dụ: [code]import { useHistory } from "react-router-dom";[/code]',
                    'blanks' => 'useHistory',
                ],
                [
                    'question' => 'Khi bạn muốn tạo một component có thể lấy dữ liệu từ một API và cập nhật trạng thái của component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]useEffect(() => { fetchData(); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để tạo một component có thể sử dụng các thuộc tính tùy chọn, bạn có thể định nghĩa các giá trị mặc định với [blank_1]. Ví dụ: [code]Component.defaultProps = { color: "blue" };[/code]',
                    'blanks' => 'defaultProps',
                ],
                [
                    'question' => 'Để xử lý sự kiện form submit trong một component, bạn cần định nghĩa một hàm [blank_1]. Ví dụ: [code]const handleSubmit = (event) => { event.preventDefault(); handleData(); }[/code]',
                    'blanks' => 'handleSubmit',
                ],
                [
                    'question' => 'Để kiểm tra xem một component có nhận được props hợp lệ không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const Component = (props) => { return <div>{props.title}</div>; }; Component.propTypes = { title: PropTypes.string.isRequired };[/code]',
                    'blanks' => 'propTypes',
                ],
                [
                    'question' => 'Để kết nối một component với Redux store và dispatch các actions, bạn cần sử dụng [blank_1]. Ví dụ: [code]const mapDispatchToProps = dispatch => ({ fetchData: () => dispatch(fetchData()) });[/code]',
                    'blanks' => 'mapDispatchToProps',
                ],
                [
                    'question' => 'Để tạo một component có khả năng nhận `ref` từ parent component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const Input = React.forwardRef((props, ref) => <input ref={ref} />);[/code]',
                    'blanks' => 'React.forwardRef',
                ],
                [
                    'question' => 'Khi bạn muốn render một danh sách các phần tử từ một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]items.map(item => <ListItem key={item.id} {...item} />)[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để sử dụng một Context trong React, bạn cần tạo một [blank_1] và một [blank_2]. Ví dụ: [code]const MyContext = React.createContext();[/code]',
                    'blanks' => 'context, provider',
                ],
                [
                    'question' => 'Khi bạn muốn áp dụng các lớp CSS động vào một component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const className = isActive ? "active" : "inactive"; return <div className={className}>Text</div>[/code]',
                    'blanks' => 'className',
                ],
                [
                    'question' => 'Để làm việc với các trạng thái phức tạp trong React, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const [state, dispatch] = useReducer(reducer, initialState);[/code]',
                    'blanks' => 'useReducer',
                ],
                [
                    'question' => 'Để xử lý các sự kiện trên một phần tử, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const handleClick = () => { console.log("Clicked"); }; return <button onClick={handleClick}>Click me</button>[/code]',
                    'blanks' => 'onClick',
                ],
                [
                    'question' => 'Khi bạn muốn tối ưu hóa việc render một component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const MemoizedComponent = React.memo(MyComponent);[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Để gọi một API và xử lý dữ liệu trong một component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]useEffect(() => { fetch("api/data").then(response => response.json()).then(data => setData(data)); }, []);[/code]',
                    'blanks' => 'fetch',
                ],
                [
                    'question' => 'Khi bạn muốn quản lý trạng thái của nhiều component con, bạn có thể sử dụng [blank_1]. Ví dụ: [code]<Context.Provider value={contextValue}>{children}</Context.Provider>[/code]',
                    'blanks' => 'Context.Provider',
                ],
                [
                    'question' => 'Để gán giá trị cho thuộc tính CSS trong JSX, bạn sử dụng thuộc tính [blank_1]. Ví dụ: [code]<div style={{ color: "red", backgroundColor: "blue" }}>Text</div>[/code]',
                    'blanks' => 'style',
                ],
                [
                    'question' => 'Khi bạn cần theo dõi một giá trị có thể thay đổi qua các lần render, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const [count, setCount] = useState(0);[/code]',
                    'blanks' => 'useState',
                ],
                [
                    'question' => 'Để kết hợp các Redux reducers vào một reducer chính, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const rootReducer = combineReducers({ user: userReducer, posts: postsReducer });[/code]',
                    'blanks' => 'combineReducers',
                ],
                [
                    'question' => 'Khi bạn muốn render một component với thuộc tính `ref`, bạn cần sử dụng [blank_1]. Ví dụ: [code]const RefComponent = React.forwardRef((props, ref) => <input ref={ref} />);[/code]',
                    'blanks' => 'React.forwardRef',
                ],
                [
                    'question' => 'Để tạo một component có thể lấy giá trị từ `context`, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const value = useContext(MyContext);[/code]',
                    'blanks' => 'useContext',
                ],
                [
                    'question' => 'Để kiểm tra giá trị của một prop trong một component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Component.propTypes = { title: PropTypes.string.isRequired };[/code]',
                    'blanks' => 'propTypes',
                ],
                [
                    'question' => 'Khi bạn muốn thực hiện một hành động sau khi một component được render, bạn sử dụng hook [blank_1]. Ví dụ: [code]useEffect(() => { console.log("Component rendered"); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để đảm bảo rằng một component chỉ được render lại khi các props thay đổi, bạn có thể sử dụng [blank_1]. Ví dụ: [code]const MemoizedComponent = React.memo(MyComponent);[/code]',
                    'blanks' => 'React.memo',
                ],
                [
                    'question' => 'Khi bạn muốn quản lý các sự kiện từ form trong React, bạn sử dụng [blank_1]. Ví dụ: [code]const handleChange = (e) => { setValue(e.target.value); }[/code]',
                    'blanks' => 'handleChange',
                ],
                [
                    'question' => 'Để làm việc với các giá trị phức tạp trong Redux, bạn có thể sử dụng [blank_1]. Ví dụ: [code]import { applyMiddleware } from "redux";[/code]',
                    'blanks' => 'applyMiddleware',
                ],
                [
                    'question' => 'Khi bạn muốn sử dụng một component từ thư viện bên ngoài, bạn cần thực hiện [blank_1]. Ví dụ: [code]import { ExternalComponent } from "external-library";[/code]',
                    'blanks' => 'import',
                ],
                [
                    'question' => 'Để xử lý các hiệu ứng bên ngoài như kết nối đến một API, bạn có thể sử dụng [blank_1]. Ví dụ: [code]useEffect(() => { fetchData(); }, []);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để theo dõi sự thay đổi của một giá trị trong component, bạn có thể sử dụng [blank_1]. Ví dụ: [code]useEffect(() => { console.log(value); }, [value]);[/code]',
                    'blanks' => 'useEffect',
                ],
                [
                    'question' => 'Để quản lý trạng thái toàn cục trong ứng dụng React, bạn cần sử dụng [blank_1]. Ví dụ: [code]const store = createStore(rootReducer);[/code]',
                    'blanks' => 'createStore',
                ],
                [
                    'question' => 'Để tối ưu hóa việc render một component, bạn có thể sử dụng hook [blank_1]. Ví dụ: [code]const memoizedValue = useMemo(() => computeExpensiveValue(), [dependencies]);[/code]',
                    'blanks' => 'useMemo',
                ],
            ];
        $essays_javascript =
            [
                [
                    'question' => 'Để khai báo một biến trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let name = "John";[/code]',
                    'blanks' => 'let',
                ],
                [
                    'question' => 'Để định nghĩa một hàm trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]function greet() { return "Hello"; }[/code]',
                    'blanks' => 'function',
                ],
                [
                    'question' => 'Khi bạn muốn khai báo một hằng số trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]const PI = 3.14;[/code]',
                    'blanks' => 'const',
                ],
                [
                    'question' => 'Để kiểm tra điều kiện trong JavaScript, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if (x > 10) { console.log("x is greater than 10"); }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Khi bạn muốn lặp qua một mảng trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để kết hợp hai chuỗi trong JavaScript, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]let fullName = firstName + " " + lastName;[/code]',
                    'blanks' => ' + ',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên trong JavaScript, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let num = parseInt("42");[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Để tạo một đối tượng trong JavaScript, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let person = { name: "Alice", age: 25 };[/code]',
                    'blanks' => 'object literal',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của thuộc tính của một đối tượng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let name = person.name;[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Để kiểm tra xem một đối tượng có chứa thuộc tính hay không, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]if ("name" in person) { console.log("Name exists"); }[/code]',
                    'blanks' => 'in',
                ],
                [
                    'question' => 'Để xử lý lỗi trong JavaScript, bạn có thể sử dụng [blank_1]. Ví dụ: [code]try { throw new Error("Oops!"); } catch (e) { console.log(e.message); }[/code]',
                    'blanks' => 'try...catch',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng mới từ một mảng hiện tại, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newArray = oldArray.slice();[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Để chuyển đổi một số thành chuỗi trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Để kiểm tra kiểu dữ liệu của một biến, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]console.log(typeof name);[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để gọi một hàm mà không quan tâm đến giá trị trả về, bạn có thể sử dụng [blank_1]. Ví dụ: [code]console.log("Hello");[/code]',
                    'blanks' => 'console.log',
                ],
                [
                    'question' => 'Khi bạn muốn thực hiện một hành động sau một khoảng thời gian, bạn có thể sử dụng [blank_1]. Ví dụ: [code]setTimeout(() => { console.log("Hello"); }, 1000);[/code]',
                    'blanks' => 'setTimeout',
                ],
                [
                    'question' => 'Để tạo một mảng mới từ các giá trị đã cho, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let numbers = [1, 2, 3, 4];[/code]',
                    'blanks' => 'array literal',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra điều kiện nhiều lựa chọn, bạn có thể sử dụng [blank_1]. Ví dụ: [code]switch (day) { case "Monday": console.log("Start of the week"); break; }[/code]',
                    'blanks' => 'switch',
                ],
                [
                    'question' => 'Để lấy số lượng phần tử trong một mảng, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let length = array.length;[/code]',
                    'blanks' => 'length',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.push(5);[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Để loại bỏ phần tử cuối cùng khỏi mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua các phần tử của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để loại bỏ phần tử đầu tiên khỏi mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào đầu mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.unshift(0);[/code]',
                    'blanks' => 'unshift',
                ],
                [
                    'question' => 'Để lấy một phần của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let subArray = array.slice(1, 3);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Khi bạn cần thay đổi phần tử trong mảng tại một chỉ số cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.splice(2, 1, "newItem");[/code]',
                    'blanks' => 'splice',
                ],
                [
                    'question' => 'Để so sánh hai giá trị trong JavaScript, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]if (a === b) { console.log("Equal"); }[/code]',
                    'blanks' => '===',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]isNaN(value);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để lấy một phần của chuỗi trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let substring = str.substring(0, 5);[/code]',
                    'blanks' => 'substring',
                ],
                [
                    'question' => 'Khi bạn muốn thay thế một phần của chuỗi bằng một giá trị khác, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để tách một chuỗi thành mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let parts = str.split(" ");[/code]',
                    'blanks' => 'split',
                ],
                [
                    'question' => 'Khi bạn cần chuyển một chuỗi thành chữ hoa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let upperStr = str.toUpperCase();[/code]',
                    'blanks' => 'toUpperCase',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một đoạn văn bản cụ thể hay không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]str.includes("text");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng từ đầu và cuối chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để tạo một Promise trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let promise = new Promise((resolve, reject) => { resolve("Done"); });[/code]',
                    'blanks' => 'Promise',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi một Promise hoàn thành, bạn có thể sử dụng [blank_1]. Ví dụ: [code]promise.then(result => console.log(result));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện hành động nếu một Promise bị từ chối, bạn có thể sử dụng [blank_1]. Ví dụ: [code]promise.catch(error => console.log(error));[/code]',
                    'blanks' => 'catch',
                ],
                [
                    'question' => 'Để khởi tạo một đối tượng Date trong JavaScript, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let today = new Date();[/code]',
                    'blanks' => 'Date',
                ],
                [
                    'question' => 'Khi bạn muốn lấy ngày của tháng từ một đối tượng Date, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let day = today.getDate();[/code]',
                    'blanks' => 'getDate',
                ],
                [
                    'question' => 'Để lấy tháng từ đối tượng Date, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let month = today.getMonth();[/code]',
                    'blanks' => 'getMonth',
                ],
                [
                    'question' => 'Để tính toán thời gian hiện tại từ một đối tượng Date, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let time = today.getTime();[/code]',
                    'blanks' => 'getTime',
                ],
                [
                    'question' => 'Để định dạng một chuỗi ngày giờ trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let formattedDate = today.toLocaleDateString();[/code]',
                    'blanks' => 'toLocaleDateString',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng từ một số giá trị, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let numbers = Array(5).fill(0);[/code]',
                    'blanks' => 'Array.fill',
                ],
                [
                    'question' => 'Để tìm chỉ số của phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = array.indexOf("value");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một biến toàn cục trong một hàm, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]console.log(globalVar);[/code]',
                    'blanks' => 'global',
                ],
                [
                    'question' => 'Để xác định kiểu của một đối tượng trong JavaScript, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]console.log(typeof obj);[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng Array với các giá trị cụ thể, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let colors = new Array("red", "green", "blue");[/code]',
                    'blanks' => 'Array constructor',
                ],
                [
                    'question' => 'Để gán giá trị cho thuộc tính của một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]obj.property = "value";[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Để gọi một phương thức của đối tượng trong JavaScript, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]obj.method();[/code]',
                    'blanks' => 'method call',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng giá trị mặc định trong hàm, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function greet(name = "Guest") { return "Hello, " + name; }[/code]',
                    'blanks' => 'default parameters',
                ],
                [
                    'question' => 'Để tạo một hàm có thể chấp nhận số lượng đối số không xác định, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }[/code]',
                    'blanks' => 'rest parameters',
                ],
                [
                    'question' => 'Để khai báo một hàm mũi tên trong JavaScript, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const add = (a, b) => a + b;[/code]',
                    'blanks' => 'arrow function',
                ],
                [
                    'question' => 'Khi bạn muốn định nghĩa một hàm async trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]async function fetchData() { let response = await fetch("api/data"); }[/code]',
                    'blanks' => 'async',
                ],
                [
                    'question' => 'Để chờ một Promise trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]let result = await promise;[/code]',
                    'blanks' => 'await',
                ],
                [
                    'question' => 'Để tạo một hàm callback trong JavaScript, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function processCallback(callback) { callback(); }[/code]',
                    'blanks' => 'callback',
                ],
                [
                    'question' => 'Khi bạn muốn gọi một hàm sau một khoảng thời gian nhất định, bạn có thể sử dụng [blank_1]. Ví dụ: [code]setInterval(() => { console.log("Repeat"); }, 1000);[/code]',
                    'blanks' => 'setInterval',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng Date không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]console.log(date instanceof Date);[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn muốn chuyển một đối tượng thành JSON, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let json = JSON.stringify(obj);[/code]',
                    'blanks' => 'JSON.stringify',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi JSON thành đối tượng JavaScript, bạn sử dụng [blank_1]. Ví dụ: [code]let obj = JSON.parse(json);[/code]',
                    'blanks' => 'JSON.parse',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một tham số trong URL, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let params = new URLSearchParams(window.location.search); let id = params.get("id");[/code]',
                    'blanks' => 'URLSearchParams',
                ],
                [
                    'question' => 'Để kiểm tra một đối tượng có phải là mảng hay không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Array.isArray(arr);[/code]',
                    'blanks' => 'Array.isArray',
                ],
                [
                    'question' => 'Để xử lý các lỗi xảy ra trong ứng dụng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]try { /* code */ } catch (error) { /* handle error */ }[/code]',
                    'blanks' => 'try...catch',
                ],
                [
                    'question' => 'Để sử dụng một giá trị từ một Promise, bạn có thể sử dụng [blank_1]. Ví dụ: [code]promise.then(value => console.log(value));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động khi trang được tải xong, bạn có thể sử dụng sự kiện [blank_1]. Ví dụ: [code]window.onload = () => { console.log("Page loaded"); };[/code]',
                    'blanks' => 'onload',
                ],
                [
                    'question' => 'Để lấy giá trị của một thuộc tính CSS của một phần tử, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let color = window.getComputedStyle(element).color;[/code]',
                    'blanks' => 'getComputedStyle',
                ],
                [
                    'question' => 'Khi bạn cần lấy thông tin về phần tử DOM, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let nodeName = element.nodeName;[/code]',
                    'blanks' => 'nodeName',
                ],
                [
                    'question' => 'Để thêm một lớp CSS vào một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.classList.add("newClass");[/code]',
                    'blanks' => 'classList.add',
                ],
                [
                    'question' => 'Để loại bỏ một lớp CSS khỏi một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.classList.remove("oldClass");[/code]',
                    'blanks' => 'classList.remove',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi các thuộc tính CSS của phần tử thành một chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let cssText = element.style.cssText;[/code]',
                    'blanks' => 'cssText',
                ],
                [
                    'question' => 'Để thay đổi giá trị của thuộc tính CSS, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]element.style.backgroundColor = "blue";[/code]',
                    'blanks' => 'style.property',
                ],
                [
                    'question' => 'Khi bạn muốn thay đổi kích thước của phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]element.style.width = "100px";[/code]',
                    'blanks' => 'width',
                ],
                [
                    'question' => 'Để ẩn một phần tử trong JavaScript, bạn có thể thiết lập thuộc tính [blank_1]. Ví dụ: [code]element.style.display = "none";[/code]',
                    'blanks' => 'display',
                ],
                [
                    'question' => 'Khi bạn cần lấy thuộc tính của một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let attribute = element.getAttribute("id");[/code]',
                    'blanks' => 'getAttribute',
                ],
                [
                    'question' => 'Để đặt giá trị cho thuộc tính của một phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.setAttribute("data-value", "123");[/code]',
                    'blanks' => 'setAttribute',
                ],
                [
                    'question' => 'Để lấy nội dung HTML của một phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let htmlContent = element.innerHTML;[/code]',
                    'blanks' => 'innerHTML',
                ],
                [
                    'question' => 'Để thay đổi nội dung văn bản của một phần tử, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]element.textContent = "New text";[/code]',
                    'blanks' => 'textContent',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ một phần tử khỏi DOM, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.remove();[/code]',
                    'blanks' => 'remove',
                ],
                [
                    'question' => 'Để thêm một phần tử con vào phần tử hiện tại, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]parentElement.appendChild(childElement);[/code]',
                    'blanks' => 'appendChild',
                ],
                [
                    'question' => 'Khi bạn muốn tạo một phần tử mới trong DOM, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newElement = document.createElement("div");[/code]',
                    'blanks' => 'createElement',
                ],
                [
                    'question' => 'Để thay đổi thuộc tính của phần tử trong DOM, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]element.style.color = "red";[/code]',
                    'blanks' => 'element.style.property',
                ],
                [
                    'question' => 'Để thêm một sự kiện vào phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]element.addEventListener("click", function() { console.log("Clicked"); });[/code]',
                    'blanks' => 'addEventListener',
                ],
                [
                    'question' => 'Khi bạn muốn lấy giá trị của một ô nhập liệu, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let value = inputElement.value;[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để thiết lập giá trị cho ô nhập liệu, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]inputElement.value = "new value";[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một ô nhập liệu có được chọn hay không, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let isChecked = checkboxElement.checked;[/code]',
                    'blanks' => 'checked',
                ],
                [
                    'question' => 'Để xử lý sự kiện khi nhấn phím trong ô nhập liệu, bạn có thể sử dụng sự kiện [blank_1]. Ví dụ: [code]inputElement.addEventListener("keydown", function(event) { console.log(event.key); });[/code]',
                    'blanks' => 'keydown',
                ],
                [
                    'question' => 'Để tạo một Promise và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng mới từ một lớp trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]let obj = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để tạo một mảng với các giá trị từ 1 đến 5, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let numbers = [1, 2, 3, 4, 5];[/code]',
                    'blanks' => 'array literal',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua một chuỗi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]for (let char of str) { console.log(char); }[/code]',
                    'blanks' => 'for...of',
                ],
                [
                    'question' => 'Để khai báo một biến với phạm vi khối trong JavaScript, bạn sử dụng từ khóa [blank_1]. Ví dụ: [code]if (true) { let blockVar = 1; }[/code]',
                    'blanks' => 'let',
                ],
                [
                    'question' => 'Để kiểm tra xem một giá trị có phải là NaN hay không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]isNaN(value);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để lấy giá trị của tham số truy vấn trong URL, bạn có thể sử dụng đối tượng [blank_1]. Ví dụ: [code]let query = new URLSearchParams(window.location.search); let id = query.get("id");[/code]',
                    'blanks' => 'URLSearchParams',
                ],
                [
                    'question' => 'Để chuyển đổi một số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Khi bạn muốn xác định một giá trị trong một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = array.indexOf("value");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Để thêm một phần tử vào cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.push("newItem");[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Khi bạn muốn loại bỏ một phần tử từ cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Để lặp qua các phần tử của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của thuộc tính từ một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj["property"];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng đầu và cuối của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là số hay không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]Number.isFinite(value);[/code]',
                    'blanks' => 'Number.isFinite',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một thuộc tính CSS của phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let color = getComputedStyle(element).color;[/code]',
                    'blanks' => 'getComputedStyle',
                ],
                [
                    'question' => 'Để kiểm tra xem một giá trị có phải là đối tượng hay không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]typeof value === "object";[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để làm tròn một số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let roundedNum = Math.round(num);[/code]',
                    'blanks' => 'Math.round',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra kiểu dữ liệu của một biến, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]typeof variable;[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Để thêm một phần tử vào mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.push(item);[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ phần tử đầu tiên của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Để tìm kiếm một phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng mới với các phần tử đã được ánh xạ từ mảng gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let mappedArray = array.map(item => item * 2);[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để sắp xếp các phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.sort();[/code]',
                    'blanks' => 'sort',
                ],
                [
                    'question' => 'Để thực hiện một hành động cho mỗi phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để loại bỏ phần tử khỏi cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần tìm phần tử trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let foundItem = array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để kiểm tra nếu một mảng có chứa một giá trị, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = array.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Để chuyển đổi một mảng thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = array.join(", ");[/code]',
                    'blanks' => 'join',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động cho mỗi phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để chuyển đổi số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Khi bạn cần tìm phần tử đầu tiên trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let firstItem = array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để lấy phần tử đầu tiên của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let firstItem = array[0];[/code]',
                    'blanks' => 'index 0',
                ],
                [
                    'question' => 'Khi bạn cần xóa phần tử đầu tiên của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Để nối hai mảng thành một, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combinedArray = array1.concat(array2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Khi bạn cần lấy độ dài của mảng, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let length = array.length;[/code]',
                    'blanks' => 'length',
                ],
                [
                    'question' => 'Để tạo một mảng mới chỉ chứa các phần tử thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let filteredArray = array.filter(item => item > 2);[/code]',
                    'blanks' => 'filter',
                ],
                [
                    'question' => 'Để lấy phần tử cuối cùng của mảng, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let lastItem = array[array.length - 1];[/code]',
                    'blanks' => 'index -1',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ tất cả các phần tử khỏi mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]array.length = 0;[/code]',
                    'blanks' => 'length = 0',
                ],
                [
                    'question' => 'Để lấy một đoạn con của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let substring = str.substring(0, 5);[/code]',
                    'blanks' => 'substring',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua các ký tự của một chuỗi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]for (let char of str) { console.log(char); }[/code]',
                    'blanks' => 'for...of',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một giá trị cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần lấy chỉ số của một ký tự trong chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = str.indexOf("char");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Để thay đổi tất cả các ký tự của chuỗi thành chữ hoa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let upperStr = str.toUpperCase();[/code]',
                    'blanks' => 'toUpperCase',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi chuỗi thành chữ thường, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let lowerStr = str.toLowerCase();[/code]',
                    'blanks' => 'toLowerCase',
                ],
                [
                    'question' => 'Để cắt một chuỗi từ chỉ số bắt đầu đến chỉ số kết thúc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let slicedStr = str.slice(0, 5);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let isNumber = !isNaN(str);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để so sánh hai chuỗi trong JavaScript, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let isEqual = str1.localeCompare(str2);[/code]',
                    'blanks' => 'localeCompare',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let isNumber = !isNaN(str);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành chữ hoa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let upperStr = str.toUpperCase();[/code]',
                    'blanks' => 'toUpperCase',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để tìm chỉ số của phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let index = array.indexOf("value");[/code]',
                    'blanks' => 'indexOf',
                ],
                [
                    'question' => 'Khi bạn cần tìm một phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let foundItem = array.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Để chuyển đổi một số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có chứa một giá trị cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Để lấy độ dài của chuỗi, bạn có thể sử dụng thuộc tính [blank_1]. Ví dụ: [code]let length = str.length;[/code]',
                    'blanks' => 'length',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng đầu và cuối chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]let isNumber = !isNaN(str);[/code]',
                    'blanks' => 'isNaN',
                ],
                [
                    'question' => 'Khi bạn cần so sánh hai chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let isEqual = str1.localeCompare(str2);[/code]',
                    'blanks' => 'localeCompare',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần lấy một đoạn con của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let substring = str.substring(0, 5);[/code]',
                    'blanks' => 'substring',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một giá trị cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("value");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Để loại bỏ khoảng trắng đầu và cuối của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để kiểm tra nếu một đối tượng có một thuộc tính cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]if (obj.hasOwnProperty("property")) { /* ... */ }[/code]',
                    'blanks' => 'hasOwnProperty',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng một hàm trong JavaScript mà không cần khai báo biến trước, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function greet() { console.log("Hello"); }[/code]',
                    'blanks' => 'function declaration',
                ],
                [
                    'question' => 'Để kiểm tra nếu một đối tượng là một instance của một lớp, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]obj instanceof MyClass[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn cần lấy các giá trị của các thuộc tính trong một đối tượng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]Object.values(obj)[/code]',
                    'blanks' => 'Object.values',
                ],
                [
                    'question' => 'Để chờ cho một Promise hoàn thành và lấy kết quả, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]async function fetchData() { let data = await fetch("url"); }[/code]',
                    'blanks' => 'await',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng mới từ một lớp, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để tạo một hàm có thể nhận số lượng tham số biến đổi, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function myFunction(...args) { /* ... */ }[/code]',
                    'blanks' => 'rest parameter',
                ],
                [
                    'question' => 'Để xử lý lỗi trong JavaScript, bạn có thể sử dụng khối [blank_1]. Ví dụ: [code]try { /* ... */ } catch (error) { /* ... */ }[/code]',
                    'blanks' => 'try-catch',
                ],
                [
                    'question' => 'Khi bạn cần làm việc với một đối tượng và muốn sao chép tất cả thuộc tính của nó, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let newObj = { ...oldObj };[/code]',
                    'blanks' => 'spread operator',
                ],
                [
                    'question' => 'Để thực hiện một hành động cho mỗi phần tử trong một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để lấy một phần tử của mảng từ cuối, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let last = arr.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần tìm kiếm phần tử trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let found = arr.find(item => item === "value");[/code]',
                    'blanks' => 'find',
                ],
                [
                    'question' => 'Để chuyển đổi một mảng thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = arr.join(", ");[/code]',
                    'blanks' => 'join',
                ],
                [
                    'question' => 'Khi bạn cần làm tròn một số, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let rounded = Math.round(num);[/code]',
                    'blanks' => 'Math.round',
                ],
                [
                    'question' => 'Để loại bỏ phần tử cuối cùng của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Để thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một thuộc tính từ một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj["property"];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'Promise.then',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Khi bạn cần gán một giá trị mặc định cho tham số hàm, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function myFunction(param = "default") { /* ... */ }[/code]',
                    'blanks' => 'default parameter',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]typeof variable === "object";[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Khi bạn cần loại bỏ khoảng trắng đầu và cuối của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let trimmedStr = str.trim();[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để tìm tất cả các phần tử trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let filtered = arr.filter(item => item > 2);[/code]',
                    'blanks' => 'filter',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào đầu mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.unshift(item);[/code]',
                    'blanks' => 'unshift',
                ],
                [
                    'question' => 'Để tạo một hàm tạm thời mà không cần đặt tên, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let add = (a, b) => a + b;[/code]',
                    'blanks' => 'arrow function',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng từ một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]let instance = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để tạo một mảng mới từ mảng gốc với các phần tử đã được ánh xạ, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let mappedArray = arr.map(item => item * 2);[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một đối tượng có phải là một mảng không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Array.isArray(obj);[/code]',
                    'blanks' => 'Array.isArray',
                ],
                [
                    'question' => 'Để lấy phần tử đầu tiên trong mảng, bạn có thể sử dụng chỉ số [blank_1]. Ví dụ: [code]let first = arr[0];[/code]',
                    'blanks' => 'index 0',
                ],
                [
                    'question' => 'Khi bạn cần tìm tất cả các phần tử trong mảng thỏa mãn điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let filtered = arr.filter(item => item > 2);[/code]',
                    'blanks' => 'filter',
                ],
                [
                    'question' => 'Để sắp xếp các phần tử trong mảng theo thứ tự tăng dần, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.sort((a, b) => a - b);[/code]',
                    'blanks' => 'sort',
                ],
                [
                    'question' => 'Khi bạn cần xóa phần tử đầu tiên trong mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.shift();[/code]',
                    'blanks' => 'shift',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có bắt đầu bằng một chuỗi con cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let startsWith = str.startsWith("prefix");[/code]',
                    'blanks' => 'startsWith',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một giá trị có phải là một số hay không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Number.isFinite(value);[/code]',
                    'blanks' => 'Number.isFinite',
                ],
                [
                    'question' => 'Để thay thế tất cả các sự xuất hiện của một chuỗi trong chuỗi gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replaceAll("old", "new");[/code]',
                    'blanks' => 'replaceAll',
                ],
                [
                    'question' => 'Để tính tổng các giá trị trong một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let sum = arr.reduce((acc, curr) => acc + curr, 0);[/code]',
                    'blanks' => 'reduce',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Để kiểm tra nếu một đối tượng có một thuộc tính cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]if (obj.hasOwnProperty("property")) { /* ... */ }[/code]',
                    'blanks' => 'hasOwnProperty',
                ],
                [
                    'question' => 'Khi bạn cần lặp qua các phần tử của mảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]for (let item of arr) { console.log(item); }[/code]',
                    'blanks' => 'for...of',
                ],
                [
                    'question' => 'Để lấy phần tử cuối cùng của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let last = arr[arr.length - 1];[/code]',
                    'blanks' => 'index -1',
                ],
                [
                    'question' => 'Để lấy giá trị của thuộc tính trong đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj.property;[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace("old", "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để loại bỏ phần tử cuối cùng của mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.pop();[/code]',
                    'blanks' => 'pop',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào cuối mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.push(item);[/code]',
                    'blanks' => 'push',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thập phân, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseFloat(str);[/code]',
                    'blanks' => 'parseFloat',
                ],
                [
                    'question' => 'Khi bạn cần nối các chuỗi với nhau, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combined = str1.concat(str2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Để kiểm tra nếu một giá trị có phải là NaN không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let isNotANumber = Number.isNaN(value);[/code]',
                    'blanks' => 'Number.isNaN',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một số thành chuỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let str = num.toString();[/code]',
                    'blanks' => 'toString',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có kết thúc bằng một chuỗi con cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let endsWith = str.endsWith("suffix");[/code]',
                    'blanks' => 'endsWith',
                ],
                [
                    'question' => 'Để định nghĩa một lớp trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]class MyClass { constructor() { this.value = 42; } }[/code]',
                    'blanks' => 'class',
                ],
                [
                    'question' => 'Khi bạn cần xử lý lỗi trong một Promise, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.catch(error => console.error(error));[/code]',
                    'blanks' => 'catch',
                ],
                [
                    'question' => 'Để khai báo một hàm async trong JavaScript, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]async function fetchData() { return "data"; }[/code]',
                    'blanks' => 'async',
                ],
                [
                    'question' => 'Để kiểm tra xem một giá trị có phải là một đối tượng không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]typeof value === "object" && value !== null;[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi Promise hoàn thành và kết quả đã có, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.then(result => console.log(result));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một hàm với giá trị mặc định cho tham số, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function greet(name = "World") { console.log("Hello, " + name); }[/code]',
                    'blanks' => 'default parameter',
                ],
                [
                    'question' => 'Để chuyển đổi một mảng thành một đối tượng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let obj = Object.fromEntries(entries);[/code]',
                    'blanks' => 'Object.fromEntries',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng các thuộc tính hoặc phương thức của một đối tượng cha trong lớp con, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]super.method();[/code]',
                    'blanks' => 'super',
                ],
                [
                    'question' => 'Để tạo một Promise mới và thực hiện hành động sau khi Promise hoàn thành, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("Done"); }).finally(() => console.log("Completed"));[/code]',
                    'blanks' => 'finally',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là một số nguyên không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Number.isInteger(value);[/code]',
                    'blanks' => 'Number.isInteger',
                ],
                [
                    'question' => 'Để thêm thuộc tính vào một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]obj["newProp"] = "value";[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Khi bạn cần ánh xạ các phần tử của một mảng thành các giá trị mới, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let squared = arr.map(x => x * x);[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Để xác định nếu một giá trị là một đối tượng rỗng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Object.keys(obj).length === 0;[/code]',
                    'blanks' => 'Object.keys',
                ],
                [
                    'question' => 'Khi bạn cần truyền tham số vào hàm mà không biết số lượng tham số trước, bạn có thể sử dụng [blank_1]. Ví dụ: [code]function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }[/code]',
                    'blanks' => 'rest parameter',
                ],
                [
                    'question' => 'Để gán giá trị mặc định cho một thuộc tính khi nó không có giá trị, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let { a = 1, b = 2 } = obj;[/code]',
                    'blanks' => 'destructuring',
                ],
                [
                    'question' => 'Để lặp qua các thuộc tính của đối tượng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]for (let key in obj) { console.log(key, obj[key]); }[/code]',
                    'blanks' => 'for...in',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng mới từ một mảng gốc bằng cách lấy một phần của nó, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let slice = arr.slice(1, 3);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Để sử dụng một hàm chỉ có thể thực thi một lần trong một chuỗi các thao tác, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let once = _.once(func);[/code]',
                    'blanks' => '_.once (Lodash)',
                ],
                [
                    'question' => 'Để chuyển đổi đối tượng thành một mảng các cặp key-value, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let entries = Object.entries(obj);[/code]',
                    'blanks' => 'Object.entries',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là một function không, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]typeof value === "function";[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Để hoán đổi giá trị của hai biến, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let [a, b] = [b, a];[/code]',
                    'blanks' => 'array destructuring',
                ],
                [
                    'question' => 'Khi bạn cần tạo một iterator cho một đối tượng, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let iterator = arr[Symbol.iterator]();[/code]',
                    'blanks' => 'Symbol.iterator',
                ],
                [
                    'question' => 'Để xác định xem một đối tượng có phải là instance của một lớp không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]obj instanceof MyClass[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn cần thay thế tất cả sự xuất hiện của một chuỗi con trong chuỗi gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newStr = str.replace(/old/g, "new");[/code]',
                    'blanks' => 'replace',
                ],
                [
                    'question' => 'Để chuyển đổi một đối tượng thành chuỗi JSON, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let jsonStr = JSON.stringify(obj);[/code]',
                    'blanks' => 'JSON.stringify',
                ],
                [
                    'question' => 'Khi bạn cần lấy phần tử ngẫu nhiên từ mảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let random = arr[Math.floor(Math.random() * arr.length)];[/code]',
                    'blanks' => 'Math.random',
                ],
                [
                    'question' => 'Để đợi một Promise hoàn thành và sau đó tiếp tục xử lý, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.finally(() => console.log("Done"));[/code]',
                    'blanks' => 'finally',
                ],
                [
                    'question' => 'Khi bạn cần lấy các phần tử đầu tiên của một mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let firstItems = arr.slice(0, 3);[/code]',
                    'blanks' => 'slice',
                ],
                [
                    'question' => 'Để loại bỏ một phần tử từ một mảng tại vị trí cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.splice(index, 1);[/code]',
                    'blanks' => 'splice',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng từ các cặp key-value, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let obj = Object.fromEntries(entries);[/code]',
                    'blanks' => 'Object.fromEntries',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi thành một chuỗi duy nhất, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combined = str1.concat(str2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Để kiểm tra nếu một chuỗi có chứa một chuỗi con cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("sub");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị thuộc tính từ một đối tượng với cú pháp tính toán, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj[key];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để tạo một Promise và thực hiện hành động khi Promise được giải quyết, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]new Promise((resolve, reject) => { resolve("value"); }).then(result => console.log(result));[/code]',
                    'blanks' => 'then',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một giá trị có phải là NaN không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Number.isNaN(value);[/code]',
                    'blanks' => 'Number.isNaN',
                ],
                [
                    'question' => 'Để kiểm tra xem một đối tượng có chứa thuộc tính cụ thể không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]obj.hasOwnProperty("property");[/code]',
                    'blanks' => 'hasOwnProperty',
                ],
                [
                    'question' => 'Để biến đổi các phần tử trong mảng thành một mảng mới, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let uppercased = arr.map(str => str.toUpperCase());[/code]',
                    'blanks' => 'map',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của thuộc tính trong đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let value = obj.property;[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có kết thúc bằng một chuỗi con không, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let endsWith = str.endsWith("suffix");[/code]',
                    'blanks' => 'endsWith',
                ],
                [
                    'question' => 'Để tạo một đối tượng mới từ một đối tượng gốc, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let newObj = Object.create(proto);[/code]',
                    'blanks' => 'Object.create',
                ],
                [
                    'question' => 'Khi bạn cần kết hợp nhiều mảng thành một mảng duy nhất, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let combined = arr1.concat(arr2);[/code]',
                    'blanks' => 'concat',
                ],
                [
                    'question' => 'Để kiểm tra nếu một chuỗi có chứa một chuỗi con cụ thể, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let contains = str.includes("sub");[/code]',
                    'blanks' => 'includes',
                ],
                [
                    'question' => 'Khi bạn cần làm việc với các phần tử trong mảng và thực hiện một hành động cho mỗi phần tử, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]arr.forEach(item => console.log(item));[/code]',
                    'blanks' => 'forEach',
                ],
                [
                    'question' => 'Để tạo một hàm với một số lượng tham số không xác định, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function sum(...numbers) { return numbers.reduce((a, b) => a + b, 0); }[/code]',
                    'blanks' => 'rest parameter',
                ],
                [
                    'question' => 'Để thay đổi giá trị của một thuộc tính trong đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]obj.property = "newValue";[/code]',
                    'blanks' => 'dot notation',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động sau khi Promise đã hoàn thành, bất kể kết quả là thành công hay lỗi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]promise.finally(() => console.log("Completed"));[/code]',
                    'blanks' => 'finally',
                ],
                [
                    'question' => 'Để kiểm tra xem một đối tượng có phải là một instance của một lớp không, bạn có thể sử dụng [blank_1]. Ví dụ: [code]obj instanceof MyClass[/code]',
                    'blanks' => 'instanceof',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả các thuộc tính của đối tượng dưới dạng mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let keys = Object.keys(obj);[/code]',
                    'blanks' => 'Object.keys',
                ],
                [
                    'question' => 'Để lấy tất cả các giá trị của đối tượng dưới dạng mảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let values = Object.values(obj);[/code]',
                    'blanks' => 'Object.values',
                ],
                [
                    'question' => 'Khi bạn cần xóa thuộc tính từ một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]delete obj.property;[/code]',
                    'blanks' => 'delete',
                ],
                [
                    'question' => 'Để lấy giá trị của thuộc tính từ đối tượng với cú pháp tính toán, bạn có thể sử dụng [blank_1]. Ví dụ: [code]let value = obj[key];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để xác định nếu một đối tượng có một phương thức cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]if (typeof obj.method === "function") { /* ... */ }[/code]',
                    'blanks' => 'typeof',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let num = parseInt(str);[/code]',
                    'blanks' => 'parseInt',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ các cặp key-value, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]let obj = Object.fromEntries(entries);[/code]',
                    'blanks' => 'Object.fromEntries',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng thuộc tính của đối tượng cha trong lớp con, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]super.method();[/code]',
                    'blanks' => 'super',
                ],
            ];
        $essays_php =
            [
                [
                    'question' => 'Để khai báo một biến trong PHP, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]$variable = "value";[/code]',
                    'blanks' => 'var',
                ],
                [
                    'question' => 'Khi bạn cần kết nối với cơ sở dữ liệu MySQL trong PHP, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$conn = mysqli_connect("host", "user", "pass", "db");[/code]',
                    'blanks' => 'mysqli_connect',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_array($arr)) { /* ... */ }[/code]',
                    'blanks' => 'is_array',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một hàm trong PHP, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]function myFunction() { return "Hello"; }[/code]',
                    'blanks' => 'function',
                ],
                [
                    'question' => 'Để lấy giá trị từ một tham số GET trong URL, bạn có thể sử dụng biến toàn cục [blank_1]. Ví dụ: [code]$value = $_GET["param"];[/code]',
                    'blanks' => '$_GET',
                ],
                [
                    'question' => 'Khi bạn cần xuất dữ liệu ra trình duyệt, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]echo "Hello, World!";[/code]',
                    'blanks' => 'echo',
                ],
                [
                    'question' => 'Để tạo một lớp trong PHP, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]class MyClass { public $property; }[/code]',
                    'blanks' => 'class',
                ],
                [
                    'question' => 'Để lấy ngày hiện tại trong PHP, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]echo date("Y-m-d");[/code]',
                    'blanks' => 'date',
                ],
                [
                    'question' => 'Để nối chuỗi trong PHP, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có được thiết lập không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (isset($var)) { /* ... */ }[/code]',
                    'blanks' => 'isset',
                ],
                [
                    'question' => 'Để xử lý dữ liệu từ một biểu mẫu POST, bạn có thể sử dụng biến toàn cục [blank_1]. Ví dụ: [code]$name = $_POST["name"];[/code]',
                    'blanks' => '$_POST',
                ],
                [
                    'question' => 'Để lặp qua các phần tử của mảng trong PHP, bạn có thể sử dụng vòng lặp [blank_1]. Ví dụ: [code]foreach ($arr as $value) { echo $value; }[/code]',
                    'blanks' => 'foreach',
                ],
                [
                    'question' => 'Khi bạn cần truyền tham số vào một hàm mà không thay đổi giá trị gốc, bạn có thể truyền tham số theo [blank_1]. Ví dụ: [code]function add($a, $b) { return $a + $b; }[/code]',
                    'blanks' => 'value',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một chuỗi con không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (strpos($str, "sub") !== false) { /* ... */ }[/code]',
                    'blanks' => 'strpos',
                ],
                [
                    'question' => 'Để tải một tệp trong PHP, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]include "file.php";[/code]',
                    'blanks' => 'include',
                ],
                [
                    'question' => 'Khi bạn cần gán giá trị mặc định cho tham số trong hàm, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]function greet($name = "World") { echo "Hello, " . $name; }[/code]',
                    'blanks' => 'default parameter',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$num = intval($str);[/code]',
                    'blanks' => 'intval',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng từ một lớp trong PHP, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]$obj = new MyClass();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để kiểm tra nếu một biến có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_numeric($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_numeric',
                ],
                [
                    'question' => 'Khi bạn cần trả về một giá trị từ hàm, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]return $value;[/code]',
                    'blanks' => 'return',
                ],
                [
                    'question' => 'Để loại bỏ khoảng trắng đầu và cuối của một chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$trimmed = trim($str);[/code]',
                    'blanks' => 'trim',
                ],
                [
                    'question' => 'Để tạo một mảng với các chỉ số từ 0 trở đi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$arr = [1, 2, 3];[/code]',
                    'blanks' => 'array',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả các giá trị từ mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$values = array_values($arr);[/code]',
                    'blanks' => 'array_values',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi thành một chuỗi duy nhất, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$combined = implode(" ", $arr);[/code]',
                    'blanks' => 'implode',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động với từng phần tử trong mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_walk($arr, function(&$item) { $item *= 2; });[/code]',
                    'blanks' => 'array_walk',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là chuỗi không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_string($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_string',
                ],
                [
                    'question' => 'Để xóa một phần tử khỏi mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]unset($arr[2]);[/code]',
                    'blanks' => 'unset',
                ],
                [
                    'question' => 'Khi bạn cần ghép hai chuỗi lại với nhau, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Để tạo một mảng đa chiều trong PHP, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$arr = [[1, 2], [3, 4]];[/code]',
                    'blanks' => 'array',
                ],
                [
                    'question' => 'Để lấy phần tử đầu tiên của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$first = reset($arr);[/code]',
                    'blanks' => 'reset',
                ],
                [
                    'question' => 'Khi bạn cần kết hợp các phần tử của mảng thành một chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$str = implode(", ", $arr);[/code]',
                    'blanks' => 'implode',
                ],
                [
                    'question' => 'Để lấy phần tử cuối cùng của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$last = end($arr);[/code]',
                    'blanks' => 'end',
                ],
                [
                    'question' => 'Khi bạn cần làm việc với chuỗi và thay thế một phần của chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$newStr = str_replace("old", "new", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một số nguyên không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_int($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_int',
                ],
                [
                    'question' => 'Để tạo một chuỗi từ một mảng các phần tử, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$str = join(", ", $arr);[/code]',
                    'blanks' => 'join',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_array($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_array',
                ],
                [
                    'question' => 'Để lấy tên của một lớp trong PHP, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]echo get_class($obj);[/code]',
                    'blanks' => 'get_class',
                ],
                [
                    'question' => 'Khi bạn cần tạo một chuỗi lặp lại nhiều lần, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$str = str_repeat("A", 5);[/code]',
                    'blanks' => 'str_repeat',
                ],
                [
                    'question' => 'Để lấy số lượng phần tử của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$count = count($arr);[/code]',
                    'blanks' => 'count',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra nếu một giá trị có nằm trong mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (in_array("value", $arr)) { /* ... */ }[/code]',
                    'blanks' => 'in_array',
                ],
                [
                    'question' => 'Để lấy phần tử đầu tiên của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$first = reset($arr);[/code]',
                    'blanks' => 'reset',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một chuỗi có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_numeric($str)) { /* ... */ }[/code]',
                    'blanks' => 'is_numeric',
                ],
                [
                    'question' => 'Để lấy tất cả các khóa của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$keys = array_keys($arr);[/code]',
                    'blanks' => 'array_keys',
                ],
                [
                    'question' => 'Khi bạn cần xóa một phần tử từ mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]unset($arr[2]);[/code]',
                    'blanks' => 'unset',
                ],
                [
                    'question' => 'Để thay thế một phần của chuỗi bằng một chuỗi khác, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$newStr = str_replace("old", "new", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Khi bạn cần phân tách một chuỗi thành một mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$arr = explode(",", $str);[/code]',
                    'blanks' => 'explode',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi với nhau, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Để kiểm tra nếu một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_object($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_object',
                ],
                [
                    'question' => 'Khi bạn cần tạo một biến toàn cục từ một biến trong hàm, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]global $var;[/code]',
                    'blanks' => 'global',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thực, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$num = floatval($str);[/code]',
                    'blanks' => 'floatval',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một chuỗi có phải là một email hợp lệ không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (filter_var($email, FILTER_VALIDATE_EMAIL)) { /* ... */ }[/code]',
                    'blanks' => 'filter_var',
                ],
                [
                    'question' => 'Để gán giá trị cho một thuộc tính trong một lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->property = "value";[/code]',
                    'blanks' => '->',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng kết hợp trong PHP, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$arr = ["key" => "value"];[/code]',
                    'blanks' => 'array',
                ],
                [
                    'question' => 'Để kiểm tra nếu một biến đã được khai báo hay chưa, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (isset($var)) { /* ... */ }[/code]',
                    'blanks' => 'isset',
                ],
                [
                    'question' => 'Khi bạn cần phân tách một chuỗi thành mảng dựa trên dấu phân cách, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$arr = explode(",", $str);[/code]',
                    'blanks' => 'explode',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi một điều kiện được kiểm tra, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if ($condition) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một chuỗi không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_string($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_string',
                ],
                [
                    'question' => 'Để xóa một phần tử khỏi mảng theo khóa, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]unset($arr["key"]);[/code]',
                    'blanks' => 'unset',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một biến thành chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$str = strval($var);[/code]',
                    'blanks' => 'strval',
                ],
                [
                    'question' => 'Để thay thế các ký tự trong chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$newStr = strtr($str, "abc", "123");[/code]',
                    'blanks' => 'strtr',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra nếu một biến là null, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_null($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_null',
                ],
                [
                    'question' => 'Để lấy số lượng ký tự trong chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$length = strlen($str);[/code]',
                    'blanks' => 'strlen',
                ],
                [
                    'question' => 'Khi bạn cần truy cập các phần tử của mảng kết hợp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$value = $arr["key"];[/code]',
                    'blanks' => 'bracket notation',
                ],
                [
                    'question' => 'Để làm việc với thời gian và ngày tháng trong PHP, bạn có thể sử dụng lớp [blank_1]. Ví dụ: [code]$date = new DateTime();[/code]',
                    'blanks' => 'DateTime',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một biến có phải là số thực không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_float($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_float',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có phải là số nguyên không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_int($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_int',
                ],
                [
                    'question' => 'Để lấy một phần của chuỗi từ vị trí chỉ định, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$substr = substr($str, 0, 5);[/code]',
                    'blanks' => 'substr',
                ],
                [
                    'question' => 'Khi bạn cần tạo một chuỗi từ mảng các phần tử, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$str = join(" ", $arr);[/code]',
                    'blanks' => 'join',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_numeric($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_numeric',
                ],
                [
                    'question' => 'Khi bạn cần lấy phần tử cuối cùng của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$last = array_pop($arr);[/code]',
                    'blanks' => 'array_pop',
                ],
                [
                    'question' => 'Để tạo một mảng mới với các phần tử đã sắp xếp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]sort($arr);[/code]',
                    'blanks' => 'sort',
                ],
                [
                    'question' => 'Khi bạn cần kết hợp các phần tử của mảng thành một chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$str = implode(",", $arr);[/code]',
                    'blanks' => 'implode',
                ],
                [
                    'question' => 'Để lấy tất cả các giá trị từ mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$values = array_values($arr);[/code]',
                    'blanks' => 'array_values',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là một mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_array($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_array',
                ],
                [
                    'question' => 'Để thay thế một phần của chuỗi bằng một chuỗi khác, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$newStr = str_replace("find", "replace", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là null không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_null($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_null',
                ],
                [
                    'question' => 'Để kiểm tra xem một chuỗi có chứa một chuỗi con không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (strpos($str, "find") !== false) { /* ... */ }[/code]',
                    'blanks' => 'strpos',
                ],
                [
                    'question' => 'Khi bạn cần lấy các phần tử của mảng theo một khóa, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$values = array_column($arr, "column_name");[/code]',
                    'blanks' => 'array_column',
                ],
                [
                    'question' => 'Để gán giá trị cho biến toàn cục trong hàm, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]global $var;[/code]',
                    'blanks' => 'global',
                ],
                [
                    'question' => 'Khi bạn cần lấy số lượng phần tử trong mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$count = count($arr);[/code]',
                    'blanks' => 'count',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi một điều kiện được kiểm tra, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if ($condition) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Để làm việc với chuỗi và phân tách nó thành mảng dựa trên dấu phân cách, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$arr = explode(",", $str);[/code]',
                    'blanks' => 'explode',
                ],
                [
                    'question' => 'Khi bạn cần gán giá trị cho thuộc tính của đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->property = "value";[/code]',
                    'blanks' => '->',
                ],
                [
                    'question' => 'Để lấy các khóa của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$keys = array_keys($arr);[/code]',
                    'blanks' => 'array_keys',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi với nhau, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Khi bạn cần lấy phần tử đầu tiên của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$first = reset($arr);[/code]',
                    'blanks' => 'reset',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$num = intval($str);[/code]',
                    'blanks' => 'intval',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một chuỗi con trong một chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$newStr = str_replace("old", "new", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Để kiểm tra nếu một biến có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_numeric($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_numeric',
                ],
                [
                    'question' => 'Khi bạn cần tạo một lớp kế thừa từ lớp cha, bạn có thể sử dụng cú pháp [blank_1] trong PHP. Ví dụ: [code]class Child extends Parent { /* ... */ }[/code]',
                    'blanks' => 'extends',
                ],
                [
                    'question' => 'Để kiểm tra một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_object($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_object',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng từ các đối tượng của lớp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_map("function", $objects);[/code]',
                    'blanks' => 'array_map',
                ],
                [
                    'question' => 'Để kết nối với cơ sở dữ liệu MySQL, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$conn = mysqli_connect("host", "user", "password", "database");[/code]',
                    'blanks' => 'mysqli_connect',
                ],
                [
                    'question' => 'Khi bạn cần xử lý dữ liệu POST trong PHP, bạn có thể sử dụng biến toàn cục [blank_1]. Ví dụ: [code]$data = $_POST["key"];[/code]',
                    'blanks' => '$_POST',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn SQL với PDO, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]$stmt = $pdo->prepare("SELECT * FROM table");[/code]',
                    'blanks' => 'prepare',
                ],
                [
                    'question' => 'Khi bạn cần tải một lớp tự động từ một thư mục, bạn có thể sử dụng [blank_1]. Ví dụ: [code]spl_autoload_register(function ($class) { include $class . ".php"; });[/code]',
                    'blanks' => 'spl_autoload_register',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if (is_array($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_array',
                ],
                [
                    'question' => 'Khi bạn cần cập nhật bản ghi trong cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1] của PDO. Ví dụ: [code]$stmt = $pdo->execute(["value"]);[/code]',
                    'blanks' => 'execute',
                ],
                [
                    'question' => 'Để gửi một email trong PHP, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]mail($to, $subject, $message, $headers);[/code]',
                    'blanks' => 'mail',
                ],
                [
                    'question' => 'Khi bạn cần thêm một phần tử vào cuối mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_push($arr, $value);[/code]',
                    'blanks' => 'array_push',
                ],
                [
                    'question' => 'Để xử lý ngoại lệ trong PHP, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]try { /* ... */ } catch (Exception $e) { /* ... */ }[/code]',
                    'blanks' => 'try, catch',
                ],
                [
                    'question' => 'Khi bạn cần gán giá trị cho thuộc tính của một đối tượng trong PHP, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->property = "value";[/code]',
                    'blanks' => '->',
                ],
                [
                    'question' => 'Để định nghĩa một phương thức tĩnh trong một lớp, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]public static function method() { /* ... */ }[/code]',
                    'blanks' => 'static',
                ],
                [
                    'question' => 'Khi bạn cần lấy một phần của chuỗi dựa trên vị trí, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]substr($str, 0, 5);[/code]',
                    'blanks' => 'substr',
                ],
                [
                    'question' => 'Để xử lý lỗi trong PHP, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if (!$result) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả các giá trị của mảng kết hợp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_values($arr);[/code]',
                    'blanks' => 'array_values',
                ],
                [
                    'question' => 'Để làm việc với các ngày tháng trong PHP, bạn có thể sử dụng lớp [blank_1]. Ví dụ: [code]$date = new DateTime();[/code]',
                    'blanks' => 'DateTime',
                ],
                [
                    'question' => 'Khi bạn cần xác thực một địa chỉ email trong PHP, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]filter_var($email, FILTER_VALIDATE_EMAIL);[/code]',
                    'blanks' => 'filter_var',
                ],
                [
                    'question' => 'Để xóa một phần tử khỏi mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]unset($arr[$key]);[/code]',
                    'blanks' => 'unset',
                ],
                [
                    'question' => 'Khi bạn cần lấy các khóa của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_keys($arr);[/code]',
                    'blanks' => 'array_keys',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi với nhau, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Khi bạn cần phân tách một chuỗi thành mảng dựa trên dấu phân cách, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]explode(",", $str);[/code]',
                    'blanks' => 'explode',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một số nguyên không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_int($var);[/code]',
                    'blanks' => 'is_int',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng từ chuỗi dữ liệu, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]preg_split("/,/", $str);[/code]',
                    'blanks' => 'preg_split',
                ],
                [
                    'question' => 'Để lấy số lượng phần tử của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]count($arr);[/code]',
                    'blanks' => 'count',
                ],
                [
                    'question' => 'Khi bạn cần tạo một mảng từ một chuỗi dữ liệu, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]explode(",", $str);[/code]',
                    'blanks' => 'explode',
                ],
                [
                    'question' => 'Để chuyển đổi một biến thành số thực, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]floatval($var);[/code]',
                    'blanks' => 'floatval',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả các phần tử của mảng theo một khóa, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_column($arr, "key");[/code]',
                    'blanks' => 'array_column',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_object($var);[/code]',
                    'blanks' => 'is_object',
                ],
                [
                    'question' => 'Khi bạn cần lấy tên lớp của một đối tượng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]get_class($obj);[/code]',
                    'blanks' => 'get_class',
                ],
                [
                    'question' => 'Để lấy một phần của chuỗi từ vị trí chỉ định, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]substr($str, 0, 5);[/code]',
                    'blanks' => 'substr',
                ],
                [
                    'question' => 'Khi bạn cần gán giá trị cho một thuộc tính trong lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->property = "value";[/code]',
                    'blanks' => '->',
                ],
                [
                    'question' => 'Để thực hiện các hành động với đối tượng và lớp trong PHP, bạn có thể sử dụng các phương thức [blank_1]. Ví dụ: [code]public function method() { /* ... */ }[/code]',
                    'blanks' => 'public function',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là null không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_null($var);[/code]',
                    'blanks' => 'is_null',
                ],
                [
                    'question' => 'Để tạo một đối tượng mới từ lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj = new ClassName();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Khi bạn cần kết hợp các phần tử của mảng thành một chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]implode(",", $arr);[/code]',
                    'blanks' => 'implode',
                ],
                [
                    'question' => 'Để gán giá trị cho một biến toàn cục trong một phương thức, bạn có thể sử dụng từ khóa [blank_1]. Ví dụ: [code]global $var;[/code]',
                    'blanks' => 'global',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động sau khi một điều kiện được kiểm tra, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if ($condition) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Để kiểm tra một biến có phải là một số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_numeric($var);[/code]',
                    'blanks' => 'is_numeric',
                ],
                [
                    'question' => 'Khi bạn cần nối các chuỗi trong PHP, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Để thay thế một phần của chuỗi bằng một chuỗi khác, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]str_replace("find", "replace", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Khi bạn cần lấy các phần tử đầu tiên của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]reset($arr);[/code]',
                    'blanks' => 'reset',
                ],
                [
                    'question' => 'Để thực hiện các hành động với lớp và đối tượng trong PHP, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]public function method() { /* ... */ }[/code]',
                    'blanks' => 'public function',
                ],
                [
                    'question' => 'Khi bạn cần xóa một phần tử khỏi mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]unset($arr[$key]);[/code]',
                    'blanks' => 'unset',
                ],
                [
                    'question' => 'Để lấy số lượng phần tử của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]count($arr);[/code]',
                    'blanks' => 'count',
                ],
                [
                    'question' => 'Khi bạn cần xử lý dữ liệu từ yêu cầu HTTP, bạn có thể sử dụng biến toàn cục [blank_1]. Ví dụ: [code]$_GET["key"];[/code]',
                    'blanks' => '$_GET',
                ],
                [
                    'question' => 'Để tạo một mảng từ các phần tử của chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]preg_split("/,/", $str);[/code]',
                    'blanks' => 'preg_split',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng từ lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj = new ClassName();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để lấy tất cả các giá trị của mảng kết hợp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_values($arr);[/code]',
                    'blanks' => 'array_values',
                ],
                [
                    'question' => 'Khi bạn cần gán giá trị cho thuộc tính của một đối tượng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->property = "value";[/code]',
                    'blanks' => '->',
                ],
                [
                    'question' => 'Để xác thực định dạng của một chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]filter_var($var, FILTER_VALIDATE_INT);[/code]',
                    'blanks' => 'filter_var',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]intval($str);[/code]',
                    'blanks' => 'intval',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi một điều kiện được kiểm tra, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if ($condition) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_object($var);[/code]',
                    'blanks' => 'is_object',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số thực, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]floatval($str);[/code]',
                    'blanks' => 'floatval',
                ],
                [
                    'question' => 'Khi bạn cần kết hợp nhiều chuỗi với nhau, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là null không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_null($var);[/code]',
                    'blanks' => 'is_null',
                ],
                [
                    'question' => 'Khi bạn cần tạo một đối tượng mới từ lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj = new ClassName();[/code]',
                    'blanks' => 'new',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_array($var);[/code]',
                    'blanks' => 'is_array',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]str_replace("old", "new", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Để lấy các khóa của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_keys($arr);[/code]',
                    'blanks' => 'array_keys',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ lớp trong PHP, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj = new [blank_2]();[/code]',
                    'blanks' => 'new, ClassName',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn SQL và sử dụng PDO, bạn có thể gọi phương thức [blank_1]. Ví dụ: [code]$stmt = $pdo->[blank_2]("SELECT * FROM table WHERE id = :id");[/code]',
                    'blanks' => 'prepare, execute',
                ],
                [
                    'question' => 'Để lấy giá trị của một phần tử từ mảng kết hợp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$value = $arr["[blank_2]"];[/code]',
                    'blanks' => 'key',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là số nguyên không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_int, is_integer',
                ],
                [
                    'question' => 'Để kết nối với cơ sở dữ liệu MySQL bằng mysqli, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$conn = [blank_2]("host", "user", "password", "database");[/code]',
                    'blanks' => 'mysqli_connect, mysqli',
                ],
                [
                    'question' => 'Khi bạn cần xử lý dữ liệu từ biểu mẫu HTML, bạn có thể sử dụng biến toàn cục [blank_1]. Ví dụ: [code]$data = $_[blank_2]["field"];[/code]',
                    'blanks' => 'POST, GET',
                ],
                [
                    'question' => 'Để thực hiện các thao tác với đối tượng trong PHP, bạn có thể định nghĩa một phương thức [blank_1]. Ví dụ: [code]public function [blank_2]() { /* ... */ }[/code]',
                    'blanks' => 'methodName, public',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một biến có phải là mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_array, array',
                ],
                [
                    'question' => 'Để thay thế một phần của chuỗi bằng một chuỗi khác, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]str_replace("[blank_2]", "[blank_3]", $str);[/code]',
                    'blanks' => 'str_replace, search, replace',
                ],
                [
                    'question' => 'Khi bạn cần lấy số lượng phần tử của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$count = [blank_2]($arr);[/code]',
                    'blanks' => 'count, sizeof',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi thành một, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là null không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_null, null',
                ],
                [
                    'question' => 'Để lấy các khóa của mảng kết hợp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]$keys = [blank_2]($arr);[/code]',
                    'blanks' => 'array_keys, key',
                ],
                [
                    'question' => 'Khi bạn cần lấy một phần của chuỗi từ một vị trí nhất định, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]substr($str, [blank_2], [blank_3]);[/code]',
                    'blanks' => 'substr, start, length',
                ],
                [
                    'question' => 'Để tạo một đối tượng mới từ lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj = new [blank_2]();[/code]',
                    'blanks' => 'new, ClassName',
                ],
                [
                    'question' => 'Khi bạn cần xóa một phần tử khỏi mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]unset($arr[[blank_2]]);[/code]',
                    'blanks' => 'unset, key',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_object, object',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số thực, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]floatval($str);[/code]',
                    'blanks' => 'floatval',
                ],
                [
                    'question' => 'Để kiểm tra một biến có phải là một số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_numeric, numeric',
                ],
                [
                    'question' => 'Khi bạn cần thay thế tất cả các kết quả khớp với một biểu thức chính quy trong chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]preg_replace("/pattern/", "replacement", $str);[/code]',
                    'blanks' => 'preg_replace',
                ],
                [
                    'question' => 'Để tạo một mảng từ chuỗi dữ liệu, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]preg_split("/,/", $str);[/code]',
                    'blanks' => 'preg_split',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả các phần tử của mảng theo một khóa nhất định, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_column($arr, "[blank_2]");[/code]',
                    'blanks' => 'array_column, key',
                ],
                [
                    'question' => 'Để chuyển đổi một chuỗi thành số nguyên, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]intval($str);[/code]',
                    'blanks' => 'intval',
                ],
                [
                    'question' => 'Khi bạn cần lấy các phần tử đầu tiên của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]reset($arr);[/code]',
                    'blanks' => 'reset',
                ],
                [
                    'question' => 'Để kiểm tra một biến có phải là mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_array, array',
                ],
                [
                    'question' => 'Khi bạn cần xác thực một địa chỉ email, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]filter_var($email, FILTER_VALIDATE_EMAIL);[/code]',
                    'blanks' => 'filter_var',
                ],
                [
                    'question' => 'Để lấy số lượng phần tử của mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]count($arr);[/code]',
                    'blanks' => 'count',
                ],
                [
                    'question' => 'Khi bạn cần xử lý dữ liệu từ biểu mẫu và mã hóa đầu vào, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]htmlspecialchars($input);[/code]',
                    'blanks' => 'htmlspecialchars',
                ],
                [
                    'question' => 'Để kiểm tra xem một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_object, object',
                ],
                [
                    'question' => 'Khi bạn cần truy cập một thuộc tính của lớp từ bên ngoài lớp, bạn cần phải đảm bảo thuộc tính đó có mức truy cập là [blank_1]. Ví dụ: [code]$obj->property;[/code]',
                    'blanks' => 'public',
                ],
                [
                    'question' => 'Để lấy tất cả các giá trị của mảng kết hợp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_values($arr);[/code]',
                    'blanks' => 'array_values',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là một chuỗi không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_string($var);[/code]',
                    'blanks' => 'is_string',
                ],
                [
                    'question' => 'Để nối nhiều chuỗi thành một chuỗi, bạn có thể sử dụng toán tử [blank_1]. Ví dụ: [code]$str = "Hello " . "World";[/code]',
                    'blanks' => '.',
                ],
                [
                    'question' => 'Khi bạn cần chuyển đổi một chuỗi thành số thực, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]floatval($str);[/code]',
                    'blanks' => 'floatval',
                ],
                [
                    'question' => 'Để kiểm tra một biến có phải là mảng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_array, array',
                ],
                [
                    'question' => 'Khi bạn cần lấy giá trị của một khóa cụ thể trong mảng kết hợp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$value = $arr["[blank_2]"];[/code]',
                    'blanks' => 'key',
                ],
                [
                    'question' => 'Để thay thế tất cả các kết quả khớp với một biểu thức chính quy trong chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]preg_replace("/pattern/", "replacement", $str);[/code]',
                    'blanks' => 'preg_replace',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là số thực không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_float, float',
                ],
                [
                    'question' => 'Để gán giá trị cho một thuộc tính của đối tượng trong lớp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->property = "value";[/code]',
                    'blanks' => '->',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là boolean không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]is_bool($var);[/code]',
                    'blanks' => 'is_bool',
                ],
                [
                    'question' => 'Để tạo một mảng từ các phần tử của chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]explode(",", $str);[/code]',
                    'blanks' => 'explode',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một biến có phải là số không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_numeric, numeric',
                ],
                [
                    'question' => 'Để lấy tất cả các giá trị của mảng kết hợp, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]array_values($arr);[/code]',
                    'blanks' => 'array_values',
                ],
                [
                    'question' => 'Khi bạn cần thay thế một phần của chuỗi, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]str_replace("old", "new", $str);[/code]',
                    'blanks' => 'str_replace',
                ],
                [
                    'question' => 'Để thực hiện một hành động sau khi một điều kiện được kiểm tra, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if ($condition) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một hành động sau khi một điều kiện được kiểm tra, bạn có thể sử dụng cấu trúc [blank_1]. Ví dụ: [code]if ($condition) { /* ... */ }[/code]',
                    'blanks' => 'if',
                ],
                [
                    'question' => 'Để lấy một phần của chuỗi từ một vị trí nhất định, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]substr($str, [blank_2], [blank_3]);[/code]',
                    'blanks' => 'substr, start, length',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra một biến có phải là chuỗi không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_string, string',
                ],
                [
                    'question' => 'Để lấy giá trị đầu tiên từ một mảng, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]reset($arr);[/code]',
                    'blanks' => 'reset',
                ],
                [
                    'question' => 'Khi bạn cần kiểm tra xem một biến có phải là một đối tượng không, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]if ([blank_2]($var)) { /* ... */ }[/code]',
                    'blanks' => 'is_object, object',
                ],
                [
                    'question' => 'Để tạo một đối tượng từ lớp trong PHP, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj = new [blank_2]();[/code]',
                    'blanks' => 'new, ClassName',
                ],
            ];
        $essays_laravel =
            [
                [
                    'question' => 'Để tạo một route cơ bản trong Laravel, bạn có thể sử dụng phương thức [blank_1] trong file routes/web.php. Ví dụ: [code]Route::[blank_2]("/", function () { return "Hello World!"; });[/code]',
                    'blanks' => 'get, get',
                ],
                [
                    'question' => 'Để kết nối với cơ sở dữ liệu trong Laravel, bạn cần cấu hình thông tin trong file [blank_1]. Ví dụ: [code]DB::connection("[blank_2]")->getPdo();[/code]',
                    'blanks' => 'config/database.php, mysql',
                ],
                [
                    'question' => 'Để tạo một controller mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần truyền dữ liệu từ controller đến view, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]return view("home", ["[blank_2]" => $data]);[/code]',
                    'blanks' => 'view, data',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn cơ sở dữ liệu đơn giản trong Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]()->get();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một migration mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_users_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần xác thực dữ liệu nhập vào trong một form, bạn có thể sử dụng class [blank_1]. Ví dụ: [code]use Illuminate\\Http\\Request;[/code]',
                    'blanks' => 'Request',
                ],
                [
                    'question' => 'Để định nghĩa một route có tham số trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/user/{id}", [blank_2]::class, "show");[/code]',
                    'blanks' => 'controllerName, controllerName',
                ],
                [
                    'question' => 'Để lấy toàn bộ dữ liệu từ một bảng trong Laravel, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->[blank_2]();[/code]',
                    'blanks' => 'get, get',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route nhóm với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::group(["middleware" => "[blank_2]"], function () { /* ... */ });[/code]',
                    'blanks' => 'auth, auth',
                ],
                [
                    'question' => 'Để sử dụng Eloquent model trong Laravel, bạn cần khai báo tên bảng bằng cách sử dụng thuộc tính [blank_1] trong model. Ví dụ: [code]protected $table = "[blank_2]";[/code]',
                    'blanks' => 'table, users',
                ],
                [
                    'question' => 'Để tạo một form với method POST trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]<form action="[blank_2]" method="post">[/code]',
                    'blanks' => 'url, url',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route chỉ cho phương thức POST, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Route::[blank_2]("/submit", function () { /* ... */ });[/code]',
                    'blanks' => 'post, post',
                ],
                [
                    'question' => 'Để tạo một view mới trong Laravel, bạn cần tạo một file trong thư mục [blank_1]. Ví dụ: [code]resources/views/[blank_2].blade.php[/code]',
                    'blanks' => 'resources/views, welcome',
                ],
                [
                    'question' => 'Để sử dụng các biến môi trường trong Laravel, bạn có thể truy cập chúng bằng cách sử dụng hàm [blank_1]. Ví dụ: [code]env("[blank_2]")[/code]',
                    'blanks' => 'env, APP_NAME',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn cơ sở dữ liệu với điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("[blank_2]", "value")->get();[/code]',
                    'blanks' => 'where, columnName',
                ],
                [
                    'question' => 'Để sử dụng middleware trong Laravel, bạn có thể định nghĩa chúng trong file [blank_1]. Ví dụ: [code]protected $middleware = ["[blank_2]"];[/code]',
                    'blanks' => 'app/Http/Kernel.php, auth',
                ],
                [
                    'question' => 'Để định nghĩa một route cho phương thức GET và POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::match(["[blank_2]", "post"], "/submit", function () { /* ... */ });[/code]',
                    'blanks' => 'match, get',
                ],
                [
                    'question' => 'Khi bạn cần tạo một seed để nhập dữ liệu mẫu vào cơ sở dữ liệu, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] UserSeeder[/code]',
                    'blanks' => 'db:seed, db:seed',
                ],
                [
                    'question' => 'Để khai báo một thuộc tính protected trong một model, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]protected $[blank_2];[/code]',
                    'blanks' => 'protected, property',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin',
                ],
                [
                    'question' => 'Để sử dụng các helper function trong Laravel, bạn cần bao gồm file [blank_1]. Ví dụ: [code]include "[blank_2]";[/code]',
                    'blanks' => 'bootstrap/app.php, helpers.php',
                ],
                [
                    'question' => 'Khi bạn cần tạo một custom validation rule, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Validator::make($data, ["field" => "[blank_2]"]);[/code]',
                    'blanks' => 'Validator, ruleName',
                ],
                [
                    'question' => 'Để tạo một controller với resource methods, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Để lấy toàn bộ dữ liệu từ một bảng bằng Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một route với tên, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/home", [blank_2]::class, "index")->name("home");[/code]',
                    'blanks' => 'name, controllerName',
                ],
                [
                    'question' => 'Để tạo một form với CSRF token trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]@csrf[/code]',
                    'blanks' => 'csrf',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class để xử lý xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CreateRequest[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để lấy giá trị của một biến môi trường trong Laravel, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]config("[blank_2]")[/code]',
                    'blanks' => 'config, app.name',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với name và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/admin", [blank_2]::class)->name("admin")->middleware("auth");[/code]',
                    'blanks' => 'middleware, controllerName',
                ],
                [
                    'question' => 'Để tạo một migration để thêm cột mới vào bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Schema::table("[blank_2]", function (Blueprint $table) { $table->string("new_column"); });[/code]',
                    'blanks' => 'Schema::table, users',
                ],
                [
                    'question' => 'Để xác thực người dùng với Laravel Auth, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Auth::[blank_2]("email", "password");[/code]',
                    'blanks' => 'attempt, attempt',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route cho phương thức PUT, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/update", [blank_3]::class);[/code]',
                    'blanks' => 'put, put, controllerName',
                ],
                [
                    'question' => 'Để lấy giá trị của tất cả các thuộc tính từ một đối tượng trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$obj->getAttributes();[/code]',
                    'blanks' => 'getAttributes',
                ],
                [
                    'question' => 'Khi bạn cần thêm một trường vào bảng trong một migration, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Schema::table("[blank_2]", function (Blueprint $table) { $table->string("new_field"); });[/code]',
                    'blanks' => 'table, users',
                ],
                [
                    'question' => 'Để tạo một route cho phương thức PATCH, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/edit", [blank_3]::class);[/code]',
                    'blanks' => 'patch, patch, controllerName',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để lấy bản ghi đầu tiên từ cơ sở dữ liệu, bạn có thể sử dụng [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'first, first',
                ],
                [
                    'question' => 'Để tạo một model mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] User[/code]',
                    'blanks' => 'make:model, make:model',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để tìm một bản ghi theo ID, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::find([blank_2]);[/code]',
                    'blanks' => 'find, id',
                ],
                [
                    'question' => 'Để lấy toàn bộ dữ liệu từ một bảng bằng Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một route cho phương thức DELETE, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/delete", [blank_3]::class);[/code]',
                    'blanks' => 'delete, delete, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần chuyển hướng người dùng đến một route khác, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]return [blank_2]("home");[/code]',
                    'blanks' => 'redirect, redirect',
                ],
                [
                    'question' => 'Để tạo một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::group(["prefix" => "[blank_2]", "middleware" => "auth"], function () { /* ... */ });[/code]',
                    'blanks' => 'group, admin',
                ],
                [
                    'question' => 'Khi bạn cần xác thực người dùng với email và password, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Auth::[blank_2]("email", "password");[/code]',
                    'blanks' => 'attempt, attempt',
                ],
                [
                    'question' => 'Để tạo một route với tên cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/profile", [blank_2]::class)->name("profile");[/code]',
                    'blanks' => 'name, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần chạy một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("id", $id)->[blank_2]("name", "newName");[/code]',
                    'blanks' => 'update, update',
                ],
                [
                    'question' => 'Để tạo một model với tên bảng cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]protected $table = "[blank_2]";[/code]',
                    'blanks' => 'protected, users',
                ],
                [
                    'question' => 'Để tạo một route với phương thức GET và POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2](["get", "post"], "/action", [blank_3]::class);[/code]',
                    'blanks' => 'match, match, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa một bản ghi, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("id", $id)->[blank_2]();[/code]',
                    'blanks' => 'delete, delete',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("auth")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, admin',
                ],
                [
                    'question' => 'Để tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CreateRequest[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả dữ liệu từ một bảng trong Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::group(["middleware" => "[blank_2]"], function () { /* ... */ });[/code]',
                    'blanks' => 'group, auth',
                ],
                [
                    'question' => 'Để tạo một migration mới cho bảng, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_users_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần tạo một model với thuộc tính fillable, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]protected $fillable = ["[blank_2]"];[/code]',
                    'blanks' => 'fillable, field1',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/post", [blank_3]::class);[/code]',
                    'blanks' => 'post, post, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần truy cập biến môi trường trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]env("[blank_2]")[/code]',
                    'blanks' => 'env, APP_ENV',
                ],
                [
                    'question' => 'Để kiểm tra xem một người dùng đã xác thực hay chưa, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Auth::[blank_2]();[/code]',
                    'blanks' => 'check, check',
                ],
                [
                    'question' => 'Để lấy dữ liệu từ một model Eloquent, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]User::[blank_2]();[/code]',
                    'blanks' => 'all, all',
                ],
                [
                    'question' => 'Khi bạn cần truyền dữ liệu từ controller đến view, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]return view("[blank_2]", ["data" => $data]);[/code]',
                    'blanks' => 'view, home',
                ],
                [
                    'question' => 'Để tạo một migration để xóa một cột khỏi bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Schema::table("[blank_2]", function (Blueprint $table) { $table->dropColumn("old_column"); });[/code]',
                    'blanks' => 'Schema::table, users',
                ],
                [
                    'question' => 'Để tạo một controller mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] MyController[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lọc dữ liệu theo điều kiện, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("users")->where("[blank_2]", "value")->get();[/code]',
                    'blanks' => 'where, column',
                ],
                [
                    'question' => 'Để tạo một form với method PUT trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]<form action="[blank_2]" method="put">[/code]',
                    'blanks' => 'url, url',
                ],
                [
                    'question' => 'Khi bạn cần xác thực dữ liệu nhập vào với Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Validator::make($request->all(), ["field" => "[blank_2]"]);[/code]',
                    'blanks' => 'Validator, required',
                ],
                [
                    'question' => 'Để lấy giá trị của một thuộc tính trong model, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$model->[blank_2];[/code]',
                    'blanks' => 'propertyName, propertyName',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth',
                ],
                [
                    'question' => 'Khi bạn cần lấy tất cả dữ liệu từ một bảng, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->get();[/code]',
                    'blanks' => 'get, users',
                ],
                [
                    'question' => 'Để tạo một view mới trong Laravel, bạn cần tạo một file trong thư mục [blank_1]. Ví dụ: [code]resources/views/[blank_2].blade.php[/code]',
                    'blanks' => 'resources/views, welcome',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->delete();[/code]',
                    'blanks' => 'delete, users',
                ],
                [
                    'question' => 'Để tạo một migration mới cho một bảng, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_table_name[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để lấy bản ghi đầu tiên từ cơ sở dữ liệu, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Model::[blank_2]();[/code]',
                    'blanks' => 'first, first',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route cho phương thức PUT, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::[blank_2]("/update", [blank_3]::class);[/code]',
                    'blanks' => 'put, put, controllerName',
                ],
                [
                    'question' => 'Để tạo một form với method POST trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]<form action="[blank_2]" method="post">[/code]',
                    'blanks' => 'url, url',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth',
                ],
                [
                    'question' => 'Để tạo một model mới trong Laravel, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] ModelName[/code]',
                    'blanks' => 'make:model, make:model',
                ],
                [
                    'question' => 'Khi bạn cần xác thực dữ liệu trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Validator::make($request->all(), ["[blank_2]" => "required"]);[/code]',
                    'blanks' => 'Validator, fieldName',
                ],
                [
                    'question' => 'Để lấy giá trị của một thuộc tính trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]$model->[blank_2];[/code]',
                    'blanks' => 'propertyName, propertyName',
                ],
                [
                    'question' => 'Để tạo một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Để định nghĩa một route với tên cụ thể, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/dashboard", [blank_2]::class)->name("dashboard");[/code]',
                    'blanks' => 'name, controllerName',
                ],
                [
                    'question' => 'Khi bạn cần truy cập biến môi trường trong Laravel, bạn có thể sử dụng hàm [blank_1]. Ví dụ: [code]config("[blank_2]")[/code]',
                    'blanks' => 'config, app.name',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng phương thức [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để định nghĩa một route nhóm với middleware và tên nhóm, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->name("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth, admin',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với phương thức PATCH và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::patch("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'patch, controllerName, auth',
                ],
                [
                    'question' => 'Để tạo một request class với xác thực và middleware, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName --middleware="[blank_3]"[/code]',
                    'blanks' => 'make:request, make:request, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa nhiều bản ghi theo điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->delete();[/code]',
                    'blanks' => 'delete, users, field, value',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để cập nhật bản ghi với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->update(["[blank_6]" => "[blank_7]"]);[/code]',
                    'blanks' => 'update, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource và tên cụ thể, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm bản ghi theo nhiều điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->orderBy("[blank_6]")->get();[/code]',
                    'blanks' => 'where, field1, value1, field2, value2, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức GET và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/dashboard", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'get, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration mới với tên cụ thể, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] create_table_name[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu từ một model theo điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->get();[/code]',
                    'blanks' => 'where, field, value',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->prefix("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'middleware, auth, admin',
                ],
                [
                    'question' => 'Để tạo một route với tên cụ thể và phương thức POST, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::post("/submit", [blank_2]::class)->name("[blank_3]");[/code]',
                    'blanks' => 'name, controllerName, submit',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu từ một bảng với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Để tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", $id)->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, users, id, field, value',
                ],
                [
                    'question' => 'Để tạo một route nhóm với middleware và prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần tạo một request class với xác thực, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] RequestName[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent để lấy dữ liệu theo điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Để tạo một route với phương thức POST và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::post("/submit", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'post, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu với điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'where, field, value, 10',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy bản ghi đầu tiên hoặc tạo mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Khi bạn cần tạo một custom request class, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomRequest[/code]',
                    'blanks' => 'make:request, make:request',
                ],
                [
                    'question' => 'Để cập nhật một bản ghi bằng phương thức Eloquent, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->update(["[blank_4]" => "[blank_5]"]);[/code]',
                    'blanks' => 'update, field, value, column, newValue',
                ],
                [
                    'question' => 'Để tạo một controller với các phương thức resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ResourceController --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu với điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'where, field, value, orderField',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức PATCH, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::patch("/update/{id}", [blank_2]::class);[/code]',
                    'blanks' => 'patch, controllerName',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để xóa bản ghi dựa trên một điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->delete();[/code]',
                    'blanks' => 'delete, tableName, field, value',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route nhóm với prefix và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'prefix, admin, auth',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'paginate, field, value, 10',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent và sắp xếp dữ liệu, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::orderBy("[blank_2]")->get();[/code]',
                    'blanks' => 'orderBy, column',
                ],
                [
                    'question' => 'Khi bạn cần tạo một middleware tùy chỉnh, bạn có thể sử dụng lệnh Artisan [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->get();[/code]',
                    'blanks' => 'where, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để tạo một bản ghi mới nếu không tồn tại, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::[blank_2]OrCreate(["field" => "[blank_3]"]);[/code]',
                    'blanks' => 'firstOrCreate, firstOrCreate, value',
                ],
                [
                    'question' => 'Khi bạn cần tạo một controller với phương thức API, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ApiController[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Để định nghĩa một route nhóm với prefix và namespace, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::namespace("[blank_2]")->prefix("[blank_3]")->group(function () { /* ... */ });[/code]',
                    'blanks' => 'namespace, Admin, admin',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với Eloquent và sử dụng eager loading, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::with("[blank_2]")->get();[/code]',
                    'blanks' => 'with, relationName',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu với điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'where, field, value, 10',
                ],
                [
                    'question' => 'Để tạo một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/delete/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, controllerName, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu trong cơ sở dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, users, field1, value1, field2, value2, fieldToUpdate, newValue',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::get("/home", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'get, HomeController, auth',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration để thêm cột vào bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] add_column_to_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để xóa bản ghi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->delete();[/code]',
                    'blanks' => 'delete, field, value',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với điều kiện phức tạp trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where(function ($query) { $query->where("[blank_3]", "[blank_4]")->orWhere("[blank_5]", "[blank_6]"); })->get();[/code]',
                    'blanks' => 'where, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để tạo một service provider mới, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] MyServiceProvider[/code]',
                    'blanks' => 'make:provider, make:provider',
                ],
                [
                    'question' => 'Khi bạn cần định nghĩa một route với phương thức PUT và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, controllerName, auth',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để tạo mới một bản ghi, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::create(["[blank_2]" => "[blank_3]"]);[/code]',
                    'blanks' => 'create, field, value',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm kiếm bản ghi với điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->first();[/code]',
                    'blanks' => 'where, field, value',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với điều kiện phức tạp và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orWhere("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, users, field1, value1, field2, value2, 10',
                ],
                [
                    'question' => 'Khi bạn cần tạo một middleware tùy chỉnh và đăng ký nó trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomMiddleware[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Để tạo một migration để xóa cột từ bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] remove_column_from_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với điều kiện và sắp xếp theo nhiều cột, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orderBy("[blank_5]", "[blank_6]")->orderBy("[blank_7]")->get();[/code]',
                    'blanks' => 'orderBy, users, field1, value1, column1, asc, column2',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->update(["[blank_6]" => "[blank_7]"]);[/code]',
                    'blanks' => 'update, field1, value1, field2, value2, column, newValue',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, users, field1, value1, field2, value2, 10',
                ],
                [
                    'question' => 'Để tạo một route với phương thức PUT và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::put("/update/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'put, UpdateController, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu với điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'paginate, field, value, 15',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức POST và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::post("/create", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'post, CreateController, auth',
                ],
                [
                    'question' => 'Khi bạn cần tạo một route với middleware và nhóm route, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/dashboard", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, DashboardController',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với điều kiện phức tạp và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, users, field1, value1, field2, value2, 20',
                ],
                [
                    'question' => 'Để tạo một command mới trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] CustomCommand[/code]',
                    'blanks' => 'make:command, make:command',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, users, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để sử dụng phương thức Eloquent để lấy dữ liệu và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'where, field, value, 25',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration để thêm bảng mới, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] create_users_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức PATCH và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::patch("/update/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'patch, UpdateController, auth',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với Eloquent để tìm kiếm bản ghi theo nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->get();[/code]',
                    'blanks' => 'where, field1, value1, field2, value2',
                ],
                [
                    'question' => 'Để tạo một service provider và đăng ký nó, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ServiceProvider[/code]',
                    'blanks' => 'make:provider, make:provider',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để cập nhật dữ liệu với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->update(["[blank_6]" => "[blank_7]"]);[/code]',
                    'blanks' => 'update, field1, value1, field2, value2, column, newValue',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn để lấy dữ liệu với nhiều điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, orders, field1, value1, field2, value2, 30',
                ],
                [
                    'question' => 'Khi bạn cần tạo một migration để xóa bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] drop_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/profile", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, ProfileController',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với Eloquent để tìm kiếm bản ghi theo nhiều điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->paginate([blank_6]);[/code]',
                    'blanks' => 'paginate, field1, value1, field2, value2, 40',
                ],
                [
                    'question' => 'Để tạo một middleware và đăng ký nó trong Laravel, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] MiddlewareName[/code]',
                    'blanks' => 'make:middleware, make:middleware',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn với điều kiện phức tạp và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orderBy("[blank_5]", "[blank_6]")->get();[/code]',
                    'blanks' => 'orderBy, posts, field, value, column, desc',
                ],
                [
                    'question' => 'Để tạo một route với middleware và nhóm route với prefix, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::prefix("[blank_2]")->middleware("[blank_3]")->group(function () { Route::get("/settings", [blank_4]::class); });[/code]',
                    'blanks' => 'prefix, admin, auth, SettingsController',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, products, field1, value1, field2, value2, 50',
                ],
                [
                    'question' => 'Để tạo một controller với phương thức API và resource, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] ApiController --api --resource[/code]',
                    'blanks' => 'make:controller, make:controller',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để cập nhật dữ liệu với nhiều điều kiện và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->update(["[blank_7]" => "[blank_8]"]);[/code]',
                    'blanks' => 'update, orders, field1, value1, field2, value2, column, newValue',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức DELETE và middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::delete("/remove/{id}", [blank_2]::class)->middleware("[blank_3]");[/code]',
                    'blanks' => 'delete, RemoveController, auth',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để lấy dữ liệu và sắp xếp theo nhiều cột, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::orderBy("[blank_2]", "[blank_3]")->orderBy("[blank_4]")->get();[/code]',
                    'blanks' => 'orderBy, field1, asc, field2',
                ],
                [
                    'question' => 'Để tạo một middleware và áp dụng cho route, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/dashboard", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, DashboardController',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để lấy dữ liệu với điều kiện và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->where("[blank_4]", "[blank_5]")->paginate([blank_6]);[/code]',
                    'blanks' => 'paginate, field1, value1, field2, value2, 60',
                ],
                [
                    'question' => 'Để tạo một migration để sửa đổi bảng, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]php artisan [blank_2] modify_table[/code]',
                    'blanks' => 'make:migration, make:migration',
                ],
                [
                    'question' => 'Khi bạn cần thực hiện một truy vấn để xóa dữ liệu với nhiều điều kiện và sắp xếp, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->orderBy("[blank_5]", "[blank_6]")->delete();[/code]',
                    'blanks' => 'delete, products, field1, value1, column, asc',
                ],
                [
                    'question' => 'Để thực hiện một truy vấn với nhiều điều kiện và phân trang với nhiều điều kiện, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]DB::table("[blank_2]")->where("[blank_3]", "[blank_4]")->where("[blank_5]", "[blank_6]")->paginate([blank_7]);[/code]',
                    'blanks' => 'paginate, orders, field1, value1, field2, value2, 70',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng phương thức Eloquent để tìm kiếm và phân trang, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Model::where("[blank_2]", "[blank_3]")->paginate([blank_4]);[/code]',
                    'blanks' => 'paginate, field, value, 80',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và nhóm middleware, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]Route::middleware("[blank_2]")->group(function () { Route::get("/home", [blank_3]::class); });[/code]',
                    'blanks' => 'middleware, auth, HomeController',
                ],
            ];
        $essays_angular =
            [
                [
                    'question' => 'Để tạo một component mới trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]ng generate [blank_2] my-component[/code]',
                    'blanks' => 'component, component',
                ],
                [
                    'question' => 'Trong Angular, để thêm một module vào ứng dụng, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, CommonModule',
                ],
                [
                    'question' => 'Để khai báo một dịch vụ (service) trong Angular, bạn cần sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: [blank_2] })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Khi sử dụng Angular CLI để tạo một service, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]ng generate [blank_2] my-service[/code]',
                    'blanks' => 'service, service',
                ],
                [
                    'question' => 'Để tạo một route mới trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", component: [blank_3] }[/code]',
                    'blanks' => 'path, home, HomeComponent',
                ],
                [
                    'question' => 'Để liên kết dữ liệu giữa component và template trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] }}[/code]',
                    'blanks' => 'interpolation, title',
                ],
                [
                    'question' => 'Trong Angular, để tạo một form và xử lý dữ liệu, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].value[/code]',
                    'blanks' => 'formControlName, form',
                ],
                [
                    'question' => 'Khi muốn lặp qua một danh sách trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]*ngFor="let [blank_2] of [blank_3]"[/code]',
                    'blanks' => 'ngFor, item, items',
                ],
                [
                    'question' => 'Để khai báo một pipe trong Angular, bạn cần sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'name, uppercase',
                ],
                [
                    'question' => 'Để thêm một module vào ứng dụng Angular, bạn cần sử dụng cú pháp [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, FormsModule',
                ],
                [
                    'question' => 'Để thực hiện điều hướng trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"]);[/code]',
                    'blanks' => 'Router, router, home',
                ],
                [
                    'question' => 'Để định nghĩa một class trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]export class [blank_2] { }[/code]',
                    'blanks' => 'class, AppComponent',
                ],
                [
                    'question' => 'Để khai báo các biến trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Input() [blank_2]: string;[/code]',
                    'blanks' => 'Input, title',
                ],
                [
                    'question' => 'Để áp dụng điều kiện trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]*ngIf="[blank_2]"[/code]',
                    'blanks' => 'ngIf, isVisible',
                ],
                [
                    'question' => 'Để cập nhật một giá trị trong Angular component, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = "[blank_3]";[/code]',
                    'blanks' => 'title, title, Angular',
                ],
                [
                    'question' => 'Khi bạn muốn sử dụng các thuộc tính CSS trong Angular, bạn có thể khai báo chúng trong [blank_1]. Ví dụ: [code].[blank_2] { color: [blank_3]; }[/code]',
                    'blanks' => 'styleUrls, my-class, red',
                ],
                [
                    'question' => 'Để liên kết một sự kiện trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code](click)="[blank_2]()"[/code]',
                    'blanks' => 'click, onClick',
                ],
                [
                    'question' => 'Khi cần sử dụng dependency injection trong Angular, bạn khai báo dependency trong [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để định nghĩa một module trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2] })[/code]',
                    'blanks' => 'NgModule, AppComponent',
                ],
                [
                    'question' => 'Để xử lý sự kiện trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code](submit)="[blank_2]()"[/code]',
                    'blanks' => 'submit, onSubmit',
                ],
                [
                    'question' => 'Khi bạn cần tạo một Angular service và thêm nó vào provider, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]providers: [blank_2][/code]',
                    'blanks' => 'providers, MyService',
                ],
                [
                    'question' => 'Để thêm các directive vào Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'selector, appHighlight',
                ],
                [
                    'question' => 'Để định nghĩa một route với phương thức GET và một component, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", component: [blank_3] }[/code]',
                    'blanks' => 'path, home, HomeComponent',
                ],
                [
                    'question' => 'Để sử dụng một dịch vụ trong Angular component, bạn cần khai báo trong [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để khai báo các phương thức trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]public [blank_2](): void { }[/code]',
                    'blanks' => 'method, onClick',
                ],
                [
                    'question' => 'Khi cần thực hiện một HTTP request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]");[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data',
                ],
                [
                    'question' => 'Để áp dụng một style cho component trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ styles: [".[blank_2] { color: [blank_3]; }"] })[/code]',
                    'blanks' => 'styles, my-class, blue',
                ],
                [
                    'question' => 'Để thêm một pipe vào Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, uppercase',
                ],
                [
                    'question' => 'Để khai báo một biến trong Angular template, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]let [blank_2] = [blank_3][/code]',
                    'blanks' => 'let, item, items',
                ],
                [
                    'question' => 'Để định nghĩa một module trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ imports: [blank_2] })[/code]',
                    'blanks' => 'NgModule, RouterModule',
                ],
                [
                    'question' => 'Khi bạn cần khai báo một route với prefix, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]RouterModule.forRoot([ { path: "[blank_2]", component: [blank_3] } ])[/code]',
                    'blanks' => 'forRoot, home, HomeComponent',
                ],
                [
                    'question' => 'Để thêm một module vào imports trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, HttpClientModule',
                ],
                [
                    'question' => 'Để liên kết dữ liệu với Angular form, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code][blank_2]="[blank_3]"[/code]',
                    'blanks' => 'formControlName, title, formControl',
                ],
                [
                    'question' => 'Để khai báo một decorator trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", templateUrl: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, ./app.component.html',
                ],
                [
                    'question' => 'Khi bạn muốn sử dụng một service trong Angular component, bạn có thể inject nó bằng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để tạo một reactive form trong Angular, bạn cần khai báo [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: [blank_5] });[/code]',
                    'blanks' => 'formGroup, formBuilder, fb, name, [""',
                ],
                [
                    'question' => 'Để định nghĩa một route trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", component: [blank_3] }[/code]',
                    'blanks' => 'path, home, HomeComponent',
                ],
                [
                    'question' => 'Để xử lý sự kiện trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code](click)="[blank_2]()"[/code]',
                    'blanks' => 'click, onClick',
                ],
                [
                    'question' => 'Để tạo một Angular component và chỉ định selector, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'selector, app-header',
                ],
                [
                    'question' => 'Khi bạn cần tạo một module trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2] })[/code]',
                    'blanks' => 'NgModule, AppComponent',
                ],
                [
                    'question' => 'Để sử dụng dependency injection trong Angular service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Khi cần thực hiện HTTP request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]")[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data',
                ],
                [
                    'question' => 'Để định nghĩa một class trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]export class [blank_2] { }[/code]',
                    'blanks' => 'class, AppComponent',
                ],
                [
                    'question' => 'Để áp dụng điều kiện trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]*ngIf="[blank_2]"[/code]',
                    'blanks' => 'ngIf, isVisible',
                ],
                [
                    'question' => 'Để liên kết dữ liệu trong Angular form, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code][blank_2]="[blank_3]"[/code]',
                    'blanks' => 'formControlName, name, formControl',
                ],
                [
                    'question' => 'Để tạo một directive trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để định nghĩa một pipe trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, uppercase',
                ],
                [
                    'question' => 'Để khai báo một biến trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]public [blank_2] = "[blank_3]";[/code]',
                    'blanks' => 'variable, title, Angular',
                ],
                [
                    'question' => 'Để xử lý sự kiện click trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code](click)="[blank_2]()"[/code]',
                    'blanks' => 'click, onClick',
                ],
                [
                    'question' => 'Để thực hiện điều hướng trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"]);[/code]',
                    'blanks' => 'Router, router, home',
                ],
                [
                    'question' => 'Để định nghĩa một route trong Angular với một đường dẫn động, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", component: [blank_3] }[/code]',
                    'blanks' => 'path, dynamic, DynamicComponent',
                ],
                [
                    'question' => 'Để khai báo một module trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để sử dụng một pipe trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, uppercase',
                ],
                [
                    'question' => 'Để định nghĩa một class trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]export class [blank_2] { }[/code]',
                    'blanks' => 'class, AppComponent',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng một module trong Angular, bạn cần khai báo nó trong [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, FormsModule',
                ],
                [
                    'question' => 'Để tạo một Angular service và sử dụng dependency injection, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để khai báo một biến trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]let [blank_2] = [blank_3][/code]',
                    'blanks' => 'let, item, items',
                ],
                [
                    'question' => 'Để tạo một form và xử lý dữ liệu trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].value[/code]',
                    'blanks' => 'formControlName, form',
                ],
                [
                    'question' => 'Để khai báo một route với prefix trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]RouterModule.forRoot([ { path: "[blank_2]", component: [blank_3] } ])[/code]',
                    'blanks' => 'forRoot, home, HomeComponent',
                ],
                [
                    'question' => 'Để thực hiện điều hướng trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"]);[/code]',
                    'blanks' => 'Router, router, home',
                ],
                [
                    'question' => 'Để tạo một Angular component và chỉ định selector, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'selector, app-header',
                ],
                [
                    'question' => 'Để áp dụng điều kiện trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]*ngIf="[blank_2]"[/code]',
                    'blanks' => 'ngIf, isVisible',
                ],
                [
                    'question' => 'Để thêm một directive vào Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để định nghĩa một pipe trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, uppercase',
                ],
                [
                    'question' => 'Khi bạn cần khai báo một route trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", component: [blank_3] }[/code]',
                    'blanks' => 'path, home, HomeComponent',
                ],
                [
                    'question' => 'Để thực hiện điều hướng trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"]);[/code]',
                    'blanks' => 'Router, router, home',
                ],
                [
                    'question' => 'Để khai báo một biến trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]let [blank_2] = [blank_3][/code]',
                    'blanks' => 'let, item, items',
                ],
                [
                    'question' => 'Để tạo một service và thêm nó vào provider trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]providers: [blank_2][/code]',
                    'blanks' => 'providers, MyService',
                ],
                [
                    'question' => 'Để áp dụng một style cho component trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ styles: [".[blank_2] { color: [blank_3]; }"] })[/code]',
                    'blanks' => 'styles, my-class, blue',
                ],
                [
                    'question' => 'Để xử lý sự kiện click trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code](click)="[blank_2]()"[/code]',
                    'blanks' => 'click, onClick',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng một module trong Angular, bạn cần khai báo nó trong [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, FormsModule',
                ],
                [
                    'question' => 'Để tạo một reactive form trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: [blank_5] });[/code]',
                    'blanks' => 'formGroup, formBuilder, fb, name, ""',
                ],
                [
                    'question' => 'Để khai báo một decorator trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", templateUrl: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, ./app.component.html',
                ],
                [
                    'question' => 'Khi cần thực hiện một HTTP request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]")[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data',
                ],
                [
                    'question' => 'Để liên kết dữ liệu giữa component và template trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] }}[/code]',
                    'blanks' => 'interpolation, title',
                ],
                [
                    'question' => 'Để khai báo một dịch vụ trong Angular, bạn cần sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: [blank_2] })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để tạo một route mới trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", component: [blank_3] }[/code]',
                    'blanks' => 'path, home, HomeComponent',
                ],
                [
                    'question' => 'Để liên kết một sự kiện trong Angular template, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code](click)="[blank_2]()"[/code]',
                    'blanks' => 'click, onClick',
                ],
                [
                    'question' => 'Để tạo một module trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để tạo một component mới trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]ng generate [blank_2] my-component[/code]',
                    'blanks' => 'component, component',
                ],
                [
                    'question' => 'Để khai báo một provider trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]providers: [{ provide: [blank_2], useClass: [blank_3] }] [/code]',
                    'blanks' => 'providers, MyService, MyServiceImpl',
                ],
                [
                    'question' => 'Để tạo một interceptor trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable() export class [blank_2] implements [blank_3] { }[/code]',
                    'blanks' => 'Interceptor, AuthInterceptor, HttpInterceptor',
                ],
                [
                    'question' => 'Để định nghĩa một route với các tham số trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]/:id", component: [blank_3] }[/code]',
                    'blanks' => 'path, user, UserDetailComponent',
                ],
                [
                    'question' => 'Để sử dụng module Lazy Loading trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", loadChildren: () => import("./[blank_3]").then(m => m.[blank_4]) }[/code]',
                    'blanks' => 'loadChildren, module, lazy.module, LazyModule',
                ],
                [
                    'question' => 'Để tạo một form group trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: [blank_5] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, ""',
                ],
                [
                    'question' => 'Để thực hiện một HTTP POST request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].post("[blank_3]", [blank_4])[/code]',
                    'blanks' => 'httpClient, httpClient, /api/save, data',
                ],
                [
                    'question' => 'Khi tạo một custom directive trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để sử dụng các hooks trong Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnInit() { }[/code]',
                    'blanks' => 'ngOnInit',
                ],
                [
                    'question' => 'Để sử dụng Angular Router trong component, bạn có thể inject nó bằng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, router, Router',
                ],
                [
                    'question' => 'Để tạo một observable trong Angular service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]return this.[blank_2].get("[blank_3]");[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data',
                ],
                [
                    'question' => 'Để tạo một pipe tùy chỉnh trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, customPipe',
                ],
                [
                    'question' => 'Để định nghĩa một route với nested routes trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", children: [{ path: "[blank_3]", component: [blank_4] }] }[/code]',
                    'blanks' => 'path, parent, child, ChildComponent',
                ],
                [
                    'question' => 'Để khai báo một reactive form control trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]("");[/code]',
                    'blanks' => 'formControl, formControl, FormControl',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng một service trong Angular component, bạn cần khai báo nó trong [blank_1]. Ví dụ: [code]providers: [blank_2][/code]',
                    'blanks' => 'providers, MyService',
                ],
                [
                    'question' => 'Để thực hiện điều hướng đến một route trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"]);[/code]',
                    'blanks' => 'Router, router, home',
                ],
                [
                    'question' => 'Để thêm một pipe vào Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, customPipe',
                ],
                [
                    'question' => 'Để định nghĩa một model trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]export class [blank_2] { [blank_3]: [blank_4]; }[/code]',
                    'blanks' => 'class, User, name, string',
                ],
                [
                    'question' => 'Để sử dụng dependency injection trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để khai báo một route guard trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Khi bạn cần sử dụng một async pipe trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | async }}[/code]',
                    'blanks' => 'async, data$',
                ],
                [
                    'question' => 'Để khai báo một form trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: [blank_5] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, ""',
                ],
                [
                    'question' => 'Để định nghĩa một custom validator trong Angular form, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]export function [blank_2](control: FormControl): { [blank_3]: boolean } | null { }[/code]',
                    'blanks' => 'validator, forbiddenNameValidator, forbiddenName',
                ],
                [
                    'question' => 'Để khai báo một module trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để xử lý sự kiện trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code](click)="[blank_2]()"[/code]',
                    'blanks' => 'click, onClick',
                ],
                [
                    'question' => 'Để thêm một form control vào một reactive form trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].addControl("[blank_3]", new [blank_4](""));[/code]',
                    'blanks' => 'formGroup, form, formControlName, FormControl',
                ],
                [
                    'question' => 'Khi cần xử lý sự kiện trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code](change)="[blank_2]($event)"[/code]',
                    'blanks' => 'change, onChange',
                ],
                [
                    'question' => 'Để tạo một Angular service và sử dụng dependency injection, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để tạo một Angular component với template inline, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, <h1>App</h1>',
                ],
                [
                    'question' => 'Để tạo một module trong Angular và khai báo các component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để tạo một pipe tùy chỉnh trong Angular và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, customPipe',
                ],
                [
                    'question' => 'Để khai báo một form array trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].array([ [blank_4] ]);[/code]',
                    'blanks' => 'formArray, fb, formBuilder, formControl',
                ],
                [
                    'question' => 'Để thực hiện điều hướng với query parameters trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"], { queryParams: { [blank_4]: [blank_5] } });[/code]',
                    'blanks' => 'Router, router, search, query, keyword',
                ],
                [
                    'question' => 'Để tạo một dynamic component trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].createComponent([blank_3]);[/code]',
                    'blanks' => 'viewContainerRef, viewContainerRef, MyDynamicComponent',
                ],
                [
                    'question' => 'Để khai báo một Angular form và thiết lập validation, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", [blank_5]] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, Validators.required',
                ],
                [
                    'question' => 'Để áp dụng styles cho một Angular component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ styles: [".[blank_2] { color: [blank_3] }"] })[/code]',
                    'blanks' => 'styles, my-class, red',
                ],
                [
                    'question' => 'Để xử lý một asynchronous operation trong Angular, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].pipe([blank_3](data => console.log(data)));[/code]',
                    'blanks' => 'pipe, httpClient, tap',
                ],
                [
                    'question' => 'Khi bạn muốn sử dụng các Angular services trong một module, bạn cần khai báo chúng trong [blank_1]. Ví dụ: [code]@NgModule({ providers: [blank_2] })[/code]',
                    'blanks' => 'providers, MyService',
                ],
                [
                    'question' => 'Để thực hiện kiểm tra (testing) một Angular service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]TestBed.inject([blank_2])[/code]',
                    'blanks' => 'TestBed, MyService',
                ],
                [
                    'question' => 'Để định nghĩa một Angular guard và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để thực hiện điều hướng dựa trên điều kiện trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]if ([blank_2]) { this.[blank_3].navigate(["/[blank_4]"]); }[/code]',
                    'blanks' => 'condition, isLoggedIn, router, home',
                ],
                [
                    'question' => 'Để tạo một Angular directive tùy chỉnh và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để sử dụng `ngModel` trong Angular, bạn cần khai báo module `FormsModule` trong [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, FormsModule',
                ],
                [
                    'question' => 'Để định nghĩa một Angular module và sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Khi cần khai báo một Angular service với một provider tùy chỉnh, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: [blank_2] })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để định nghĩa một Angular pipe với tham số, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, customPipe',
                ],
                [
                    'question' => 'Để sử dụng Angular Dependency Injection trong component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để tạo một Angular module và cấu hình các routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, home, HomeComponent',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với validation, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", Validators.required',
                ],
                [
                    'question' => 'Để tạo một Angular component với một template inline, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, <h1>App</h1>',
                ],
                [
                    'question' => 'Để thực hiện HTTP PUT request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].put("[blank_3]", [blank_4])[/code]',
                    'blanks' => 'httpClient, httpClient, /api/update, data',
                ],
                [
                    'question' => 'Để sử dụng một Angular service trong component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để sử dụng Angular pipes trong templates, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, uppercase',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với lifecycle hooks, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnInit() { }[/code]',
                    'blanks' => 'ngOnInit',
                ],
                [
                    'question' => 'Để khai báo một route guard trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để sử dụng một observable trong Angular service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].pipe([blank_3](data => console.log(data)));[/code]',
                    'blanks' => 'pipe, httpClient, tap',
                ],
                [
                    'question' => 'Để định nghĩa một Angular module và cấu hình các component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để tạo một Angular form với các validators tùy chỉnh, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", [blank_5]] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, Validators.required',
                ],
                [
                    'question' => 'Để thực hiện điều hướng đến một route với parameters trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"], { queryParams: { [blank_4]: [blank_5] } });[/code]',
                    'blanks' => 'Router, router, search, query, keyword',
                ],
                [
                    'question' => 'Để tạo một Angular directive và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để sử dụng Angular dependency injection trong một service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, httpClient, HttpClient',
                ],
                [
                    'question' => 'Để định nghĩa một Angular service và đăng ký nó với dependency injection, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để khai báo một Angular form với một form array, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].array([ [blank_4] ]);[/code]',
                    'blanks' => 'formArray, fb, formBuilder, formControl',
                ],
                [
                    'question' => 'Để tạo một Angular pipe và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, customPipe',
                ],
                [
                    'question' => 'Để định nghĩa một route trong Angular với nested routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{ path: "[blank_2]", children: [{ path: "[blank_3]", component: [blank_4] }] }[/code]',
                    'blanks' => 'path, parent, child, ChildComponent',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, home, HomeComponent',
                ],
                [
                    'question' => 'Để thực hiện một HTTP DELETE request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].delete("[blank_3]")[/code]',
                    'blanks' => 'httpClient, httpClient, /api/delete',
                ],
                [
                    'question' => 'Để sử dụng Angular dependency injection trong một component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để khai báo một Angular form với các validators tùy chỉnh, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", [blank_5]] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, Validators.required',
                ],
                [
                    'question' => 'Để tạo một dynamic component trong Angular và sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].createComponent([blank_3]);[/code]',
                    'blanks' => 'viewContainerRef, viewContainerRef, MyDynamicComponent',
                ],
                [
                    'question' => 'Để khai báo một Angular form và thiết lập validation, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", [blank_5]] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, Validators.required',
                ],
                [
                    'question' => 'Để sử dụng `ngModel` trong Angular, bạn cần khai báo module `FormsModule` trong [blank_1]. Ví dụ: [code]imports: [blank_2][/code]',
                    'blanks' => 'imports, FormsModule',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với lifecycle hooks, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnInit() { }[/code]',
                    'blanks' => 'ngOnInit',
                ],
                [
                    'question' => 'Để tạo một Angular component với template inline, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, <h1>App</h1>',
                ],
                [
                    'question' => 'Để sử dụng Angular pipes trong templates, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, uppercase',
                ],
                [
                    'question' => 'Để thực hiện điều hướng dựa trên điều kiện trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]if ([blank_2]) { this.[blank_3].navigate(["/[blank_4]"]); }[/code]',
                    'blanks' => 'condition, isLoggedIn, router, home',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để sử dụng Angular dependency injection trong một service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, httpClient, HttpClient',
                ],
                [
                    'question' => 'Để tạo một Angular directive và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để thực hiện điều hướng đến một route với query parameters trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"], { queryParams: { [blank_4]: [blank_5] } });[/code]',
                    'blanks' => 'Router, router, search, query, keyword',
                ],
                [
                    'question' => 'Để tạo một Angular pipe với tham số, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, customPipe',
                ],
                [
                    'question' => 'Để sử dụng Angular forms trong một component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].controls[blank_3].setValue("[blank_4]");[/code]',
                    'blanks' => 'formGroup, form, name, value',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, home, HomeComponent',
                ],
                [
                    'question' => 'Để sử dụng Angular pipes trong templates, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, uppercase',
                ],
                [
                    'question' => 'Để thực hiện điều hướng dựa trên điều kiện trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]if ([blank_2]) { this.[blank_3].navigate(["/[blank_4]"]); }[/code]',
                    'blanks' => 'condition, isLoggedIn, router, home',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với validation, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", Validators.required',
                ],
                [
                    'question' => 'Để thực hiện HTTP PUT request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].put("[blank_3]", [blank_4])[/code]',
                    'blanks' => 'httpClient, httpClient, /api/update, data',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với lifecycle hooks, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnInit() { }[/code]',
                    'blanks' => 'ngOnInit',
                ],
                [
                    'question' => 'Để thực hiện điều hướng với query parameters trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].navigate(["/[blank_3]"], { queryParams: { [blank_4]: [blank_5] } });[/code]',
                    'blanks' => 'Router, router, search, query, keyword',
                ],
                [
                    'question' => 'Để khai báo một Angular form với một form array, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].array([ [blank_4] ]);[/code]',
                    'blanks' => 'formArray, fb, formBuilder, formControl',
                ],
                [
                    'question' => 'Để tạo một Angular component với template inline, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, <h1>App</h1>',
                ],
                [
                    'question' => 'Để thực hiện HTTP DELETE request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].delete("[blank_3]")[/code]',
                    'blanks' => 'httpClient, httpClient, /api/delete',
                ],
                [
                    'question' => 'Để định nghĩa một Angular guard và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để khai báo một Angular module và cấu hình các component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [blank_2], imports: [blank_3] })[/code]',
                    'blanks' => 'NgModule, AppComponent, BrowserModule',
                ],
                [
                    'question' => 'Để sử dụng Angular Dependency Injection trong component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, service, MyService',
                ],
                [
                    'question' => 'Để sử dụng Angular forms trong một component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].controls[blank_3].setValue("[blank_4]");[/code]',
                    'blanks' => 'formGroup, form, name, value',
                ],
                [
                    'question' => 'Để tạo một Angular directive và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để sử dụng Angular dependency injection trong một service, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { }[/code]',
                    'blanks' => 'constructor, httpClient, HttpClient',
                ],
                [
                    'question' => 'Để tạo một Angular module và cấu hình các routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, home, HomeComponent',
                ],
                [
                    'question' => 'Để thực hiện HTTP PUT request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].put("[blank_3]", [blank_4])[/code]',
                    'blanks' => 'httpClient, httpClient, /api/update, data',
                ],
                [
                    'question' => 'Để tạo một Angular pipe với tham số, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" })[/code]',
                    'blanks' => 'Pipe, customPipe',
                ],
                [
                    'question' => 'Để định nghĩa một Angular guard và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, home, HomeComponent',
                ],
                [
                    'question' => 'Để tạo một Angular directive và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để thực hiện HTTP DELETE request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].delete("[blank_3]")[/code]',
                    'blanks' => 'httpClient, httpClient, /api/delete',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với lifecycle hooks, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnInit() { }[/code]',
                    'blanks' => 'ngOnInit',
                ],
                [
                    'question' => 'Để tạo một Angular component với template inline, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: "[blank_3]" })[/code]',
                    'blanks' => 'Component, app-root, <h1>App</h1>',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với validation, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", Validators.required',
                ],
                [
                    'question' => 'Để định nghĩa một Angular service và đăng ký nó với dependency injection, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" })[/code]',
                    'blanks' => 'providedIn, root',
                ],
                [
                    'question' => 'Để tạo một Angular form với các validators tùy chỉnh, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", [blank_5]] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, Validators.required',
                ],
                [
                    'question' => 'Để sử dụng Angular pipes trong templates, bạn có thể sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3] }}[/code]',
                    'blanks' => 'pipe, title, uppercase',
                ],
                [
                    'question' => 'Để khai báo một Angular module và cấu hình các routes, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, home, HomeComponent',
                ],
                [
                    'question' => 'Để sử dụng Angular forms trong một component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].controls[blank_3].setValue("[blank_4]");[/code]',
                    'blanks' => 'formGroup, form, name, value',
                ],
                [
                    'question' => 'Để khai báo một Angular component với lazy loading, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", loadChildren: () => import("./[blank_3]").then(m => m.[blank_4]) }];[/code]',
                    'blanks' => 'loadChildren, feature, feature.module, FeatureModule',
                ],
                [
                    'question' => 'Để sử dụng Angular resolver để tải dữ liệu trước khi điều hướng đến một route, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]resolve: { data: [blank_2] }[/code]',
                    'blanks' => 'dataResolver, DataResolver',
                ],
                [
                    'question' => 'Để tạo một Angular service với method tùy chỉnh và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" }) export class [blank_3] { [blank_4]() { return "Hello World"; } }[/code]',
                    'blanks' => 'providedIn, root, MyService, getMessage',
                ],
                [
                    'question' => 'Để thực hiện kiểm tra quyền truy cập trong Angular với route guards, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]canActivate: [blank_2] [/code]',
                    'blanks' => 'canActivate, AuthGuard',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với validator tùy chỉnh, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", [blank_6]]',
                ],
                [
                    'question' => 'Để tạo một Angular component với dynamic content, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<ng-container *ngComponentOutlet="[blank_3]"></ng-container>` })[/code]',
                    'blanks' => 'Component, app-dynamic, dynamicComponent',
                ],
                [
                    'question' => 'Để sử dụng Angular ngOnChanges lifecycle hook, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnChanges(changes: SimpleChanges) { [blank_2] }[/code]',
                    'blanks' => 'ngOnChanges, console.log(changes)',
                ],
                [
                    'question' => 'Để tạo một Angular service với HTTP request và sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]").subscribe([blank_4] => { [blank_5] });[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data, data, console.log(data)',
                ],
                [
                    'question' => 'Để khai báo một Angular form với form array và validators, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].array([ [blank_4] ]);[/code]',
                    'blanks' => 'formArray, fb, formBuilder, new FormControl("", Validators.required)',
                ],
                [
                    'question' => 'Để định nghĩa một Angular directive và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" })[/code]',
                    'blanks' => 'Directive, appHighlight',
                ],
                [
                    'question' => 'Để tạo một Angular pipe với logic phức tạp và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" }) export class [blank_3] implements PipeTransform { transform(value: string, [blank_4]: string): string { return value + [blank_5]; } }[/code]',
                    'blanks' => 'Pipe, appendPipe, AppendPipe, appendString, " appended"',
                ],
                [
                    'question' => 'Để sử dụng Angular reactive forms với nested form groups, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: this.[blank_5].group({ [blank_6]: ["", [blank_7]] }) });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, nested, fb, formControl, Validators.required',
                ],
                [
                    'question' => 'Để tạo một Angular module với các route guards, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", component: [blank_3], canActivate: [blank_4] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, secure, SecureComponent, AuthGuard',
                ],
                [
                    'question' => 'Để định nghĩa một Angular guard và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" }) export class [blank_3] implements CanActivate { canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean { return true; } }[/code]',
                    'blanks' => 'providedIn, root, AuthGuard',
                ],
                [
                    'question' => 'Để sử dụng Angular lifecycle hooks trong một component, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", templateUrl: "[blank_3]" }) export class [blank_4] implements OnInit { ngOnInit() { } }[/code]',
                    'blanks' => 'Component, app-root, app.component.html, AppComponent',
                ],
                [
                    'question' => 'Để thực hiện một HTTP PATCH request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].patch("[blank_3]", [blank_4])[/code]',
                    'blanks' => 'httpClient, httpClient, /api/patch, data',
                ],
                [
                    'question' => 'Để tạo một Angular component với dynamic inputs, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<p>{{ [blank_3] }}</p>` }) export class [blank_4] { @Input() [blank_5]: string; }[/code]',
                    'blanks' => 'Component, app-dynamic, message, DynamicComponent, message',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với custom validator, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", this.customValidator]',
                ],
                [
                    'question' => 'Để tạo một Angular directive với host listener, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" }) export class [blank_3] { @HostListener("click") onClick() { [blank_4] } }[/code]',
                    'blanks' => 'Directive, appClick, ClickDirective, console.log("Clicked!")',
                ],
                [
                    'question' => 'Để sử dụng Angular dependency injection trong một service và thực hiện HTTP request, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]constructor(private [blank_2]: [blank_3]) { [blank_4] }[/code]',
                    'blanks' => 'constructor, httpClient, HttpClient, this.httpClient.get("/api/data")',
                ],
                [
                    'question' => 'Để định nghĩa một Angular route với lazy-loaded modules, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", loadChildren: () => import("./[blank_3]").then(m => m.[blank_4]) }];[/code]',
                    'blanks' => 'loadChildren, feature, feature.module, FeatureModule',
                ],
                [
                    'question' => 'Để tạo một Angular pipe với nhiều tham số, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" }) export class [blank_3] implements PipeTransform { transform(value: string, [blank_4]: string, [blank_5]: number): string { return value + [blank_6]; } }[/code]',
                    'blanks' => 'Pipe, appendPipe, AppendPipe, appendString, times, " appended"',
                ],
                [
                    'question' => 'Để sử dụng Angular ngOnChanges lifecycle hook để theo dõi thay đổi, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]ngOnChanges(changes: SimpleChanges) { if (changes.[blank_2]) { [blank_3] } }[/code]',
                    'blanks' => 'ngOnChanges, inputProperty, console.log("Changed!")',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các imports và exports, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ imports: [BrowserModule, [blank_2]], exports: [ [blank_3] ] })[/code]',
                    'blanks' => 'CommonModule, SharedModule',
                ],
                [
                    'question' => 'Để sử dụng Angular pipes trong templates với tham số, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]{{ [blank_2] | [blank_3]:[blank_4] }}[/code]',
                    'blanks' => 'pipe, title, uppercase, locale',
                ],
                [
                    'question' => 'Để tạo một Angular form với nested form controls và sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: this.[blank_5].control([blank_6]) });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, fb, new FormControl("", Validators.required',
                ],
                [
                    'question' => 'Để tạo một Angular module với các dịch vụ toàn cục, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ providers: [{ provide: [blank_2], useClass: [blank_3] }] })[/code]',
                    'blanks' => 'MyService, MyService',
                ],
                [
                    'question' => 'Để sử dụng Angular ngFor trong templates và hiển thị danh sách các phần tử, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<div *ngFor="let [blank_2] of [blank_3]"> {{ [blank_4] }} </div>[/code]',
                    'blanks' => 'item, items, item.name',
                ],
                [
                    'question' => 'Để tạo một Angular service với custom HTTP headers, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]", { headers: new HttpHeaders({ [blank_4]: [blank_5] }) })[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data, Authorization, Bearer token',
                ],
                [
                    'question' => 'Để tạo một Angular form với custom validators và sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", [blank_5]] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, customValidator',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với content projection và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<ng-content></ng-content>` })[/code]',
                    'blanks' => 'Component, app-content',
                ],
                [
                    'question' => 'Để thực hiện Angular HTTP request với observable, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]").pipe(map([blank_4] => [blank_5])).subscribe();[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data, data, processData(data)',
                ],
                [
                    'question' => 'Để tạo một Angular directive với host binding, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" }) export class [blank_3] { @HostBinding("style.backgroundColor") backgroundColor: string = "[blank_4]"; }[/code]',
                    'blanks' => 'Directive, appBackground, BackgroundDirective, yellow',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với custom validation logic, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", this.customValidator]',
                ],
                [
                    'question' => 'Để thực hiện HTTP POST request với dữ liệu đa dạng trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].post("[blank_3]", { [blank_4]: [blank_5], [blank_6]: [blank_7] })[/code]',
                    'blanks' => 'httpClient, httpClient, /api/post, name, "John", age, 30',
                ],
                [
                    'question' => 'Để sử dụng Angular lifecycle hooks để theo dõi thay đổi thuộc tính, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Input() [blank_2]: string; ngOnChanges(changes: SimpleChanges) { if (changes.[blank_3]) { [blank_4] } }[/code]',
                    'blanks' => 'ngOnChanges, inputProperty, inputProperty, console.log("Property changed!")',
                ],
                [
                    'question' => 'Để khai báo một Angular module và cấu hình các providers, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ providers: [{ provide: [blank_2], useClass: [blank_3] }] })[/code]',
                    'blanks' => 'MyService, MyService',
                ],
                [
                    'question' => 'Để tạo một Angular pipe với nhiều tham số và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" }) export class [blank_3] implements PipeTransform { transform(value: string, [blank_4]: string, [blank_5]: number): string { return value + [blank_6]; } }[/code]',
                    'blanks' => 'Pipe, customPipe, CustomPipe, prefix, count, " prefix"',
                ],
                [
                    'question' => 'Để định nghĩa một Angular module với các route guards và lazy loading, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", loadChildren: () => import("./[blank_3]").then(m => m.[blank_4]), canActivate: [blank_5] }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, feature, feature.module, FeatureModule, AuthGuard',
                ],
                [
                    'question' => 'Để sử dụng Angular ngIf với điều kiện phức tạp trong templates, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<div *ngIf="[blank_2] && [blank_3]">[blank_4]</div>[/code]',
                    'blanks' => 'condition1, condition2, content',
                ],
                [
                    'question' => 'Để tạo một Angular directive với host binding và host listener, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" }) export class [blank_3] { @HostBinding("style.backgroundColor") backgroundColor: string = "[blank_4]"; @HostListener("click") onClick() { [blank_5] } }[/code]',
                    'blanks' => 'Directive, appHighlight, HighlightDirective, yellow, console.log("Highlighted!")',
                ],
                [
                    'question' => 'Để định nghĩa một Angular service với các phương thức tùy chỉnh và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" }) export class [blank_3] { [blank_4]() { return "Hello World"; } }[/code]',
                    'blanks' => 'providedIn, root, MyService, getMessage',
                ],
                [
                    'question' => 'Để tạo một Angular component với multiple templates và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", templateUrl: "[blank_3]", styleUrls: ["[blank_4]"] })[/code]',
                    'blanks' => 'Component, app-root, app.component.html, app.component.css',
                ],
                [
                    'question' => 'Để khai báo một Angular module với nhiều components và directives, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ declarations: [ [blank_2], [blank_3] ], imports: [BrowserModule], providers: [] })[/code]',
                    'blanks' => 'NgModule, AppComponent, CustomDirective',
                ],
                [
                    'question' => 'Để sử dụng Angular forms trong một component với nested controls, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: this.[blank_5].array([ [blank_6] ]) });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, items, fb, new FormControl("", Validators.required)',
                ],
                [
                    'question' => 'Để thực hiện một HTTP DELETE request trong Angular, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].delete("[blank_3]").subscribe();[/code]',
                    'blanks' => 'httpClient, httpClient, /api/delete',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với dynamic content projection, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<ng-content select="[blank_3]"></ng-content>` })[/code]',
                    'blanks' => 'Component, app-content, app-highlight',
                ],
                [
                    'question' => 'Để tạo một Angular service với HTTP interceptors và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable() export class [blank_2] implements HttpInterceptor { intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { [blank_3] } }[/code]',
                    'blanks' => 'MyInterceptor, MyInterceptor, return next.handle(req)',
                ],
                [
                    'question' => 'Để sử dụng Angular ngModel trong templates và bind dữ liệu, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<input [(ngModel)]="[blank_2]" />[/code]',
                    'blanks' => 'modelProperty',
                ],
                [
                    'question' => 'Để khai báo một Angular form control với multiple validators và sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = new [blank_3]([blank_4], [blank_5]);[/code]',
                    'blanks' => 'formControl, name, FormControl, "", [Validators.required, Validators.minLength(5)]',
                ],
                [
                    'question' => 'Để tạo một Angular pipe với custom transformation và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Pipe({ name: "[blank_2]" }) export class [blank_3] implements PipeTransform { transform(value: string, [blank_4]: number): string { return value + [blank_5]; } }[/code]',
                    'blanks' => 'Pipe, appendPipe, AppendPipe, suffix, " appended"',
                ],
                [
                    'question' => 'Để định nghĩa một Angular route với canActivate guard và lazy loading, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", loadChildren: () => import("./[blank_3]").then(m => m.[blank_4]), canActivate: [blank_5] }];[/code]',
                    'blanks' => 'RouterModule, feature, feature.module, FeatureModule, AuthGuard',
                ],
                [
                    'question' => 'Để khai báo một Angular component với input và output properties, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<button (click)="[blank_3]()">Click me</button>` }) export class [blank_4] { @Input() [blank_5]: string; @Output() [blank_6] = new EventEmitter<void>(); [blank_7]() { this.[blank_6].emit(); } }[/code]',
                    'blanks' => 'Component, app-button, onClick, ButtonComponent, message, buttonClick, onClick',
                ],
                [
                    'question' => 'Để tạo một Angular module với các imports, declarations, và providers, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ imports: [BrowserModule, [blank_2]], declarations: [ [blank_3] ], providers: [ [blank_4] ] })[/code]',
                    'blanks' => 'NgModule, SharedModule, AppComponent, MyService',
                ],
                [
                    'question' => 'Để định nghĩa một Angular service với custom logic và thực hiện HTTP POST request, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" }) export class [blank_3] { [blank_4](data: any) { return this.[blank_5].post("/api/submit", data); } }[/code]',
                    'blanks' => 'providedIn, root, MyService, submitData, httpClient',
                ],
                [
                    'question' => 'Để khai báo một Angular form array với validators và sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].array([ [blank_4] ]);[/code]',
                    'blanks' => 'formArray, fb, formBuilder, new FormControl("", Validators.required)',
                ],
                [
                    'question' => 'Để sử dụng Angular ngFor để lặp qua danh sách và hiển thị các phần tử, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<div *ngFor="let [blank_2] of [blank_3]"> {{ [blank_4] }} </div>[/code]',
                    'blanks' => 'item, items, item.name',
                ],
                [
                    'question' => 'Để tạo một Angular component với các lifecycle hooks và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<p>{{ [blank_3] }}</p>` }) export class [blank_4] implements OnInit { ngOnInit() { [blank_5] } }[/code]',
                    'blanks' => 'Component, app-root, message, AppComponent, console.log("Component initialized")',
                ],
                [
                    'question' => 'Để sử dụng Angular HTTP interceptor để thêm custom headers, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable() export class [blank_2] implements HttpInterceptor { intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> { const headers = req.headers.set("[blank_3]", "[blank_4]"); const clonedReq = req.clone({ headers }); return next.handle(clonedReq); } }[/code]',
                    'blanks' => 'MyInterceptor, MyInterceptor, Authorization, Bearer token',
                ],
                [
                    'question' => 'Để khai báo một Angular form với nested controls và validators, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: this.[blank_5].control("", [blank_6]) });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, fb, Validators.required',
                ],
                [
                    'question' => 'Để tạo một Angular directive với host listener và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Directive({ selector: "[blank_2]" }) export class [blank_3] { @HostListener("click") onClick() { [blank_4] } }[/code]',
                    'blanks' => 'Directive, appClick, ClickDirective, console.log("Clicked!")',
                ],
                [
                    'question' => 'Để định nghĩa một Angular component với content projection và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<ng-content></ng-content>` })[/code]',
                    'blanks' => 'Component, app-content',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các providers toàn cục và sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ providers: [{ provide: [blank_2], useClass: [blank_3] }] })[/code]',
                    'blanks' => 'MyService, MyService',
                ],
                [
                    'question' => 'Để sử dụng Angular ngModel trong một component với two-way data binding, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<input [(ngModel)]="[blank_2]" />[/code]',
                    'blanks' => 'modelProperty',
                ],
                [
                    'question' => 'Để tạo một Angular service với HTTP request và xử lý lỗi, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2].get("[blank_3]").pipe(catchError([blank_4] => { return throwError([blank_5]); })).subscribe();[/code]',
                    'blanks' => 'httpClient, httpClient, /api/data, error => console.error(error), error',
                ],
                [
                    'question' => 'Để khai báo một Angular module với các imports và providers, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ imports: [BrowserModule, [blank_2]], providers: [ [blank_3] ] })[/code]',
                    'blanks' => 'NgModule, SharedModule, MyService',
                ],
                [
                    'question' => 'Để tạo một Angular component với custom styles và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<div class="[blank_3]">Hello</div>`, styleUrls: ["[blank_4]"] })[/code]',
                    'blanks' => 'Component, app-root, custom-class, app.component.css',
                ],
                [
                    'question' => 'Để định nghĩa một Angular module với lazy loaded feature và sử dụng cú pháp [blank_1]. Ví dụ: [code]const routes: Routes = [{ path: "[blank_2]", loadChildren: () => import("./[blank_3]").then(m => m.[blank_4]) }]; @NgModule({ imports: [RouterModule.forRoot(routes)] })[/code]',
                    'blanks' => 'RouterModule, feature, feature.module, FeatureModule',
                ],
                [
                    'question' => 'Để sử dụng Angular ngIf với điều kiện phức tạp trong templates, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<div *ngIf="[blank_2] && [blank_3]">[blank_4]</div>[/code]',
                    'blanks' => 'condition1, condition2, content',
                ],
                [
                    'question' => 'Để khai báo một Angular form với multiple controls và validators, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].group({ [blank_4]: ["", Validators.required], [blank_5]: ["", Validators.minLength(5)] });[/code]',
                    'blanks' => 'formGroup, fb, formBuilder, name, email',
                ],
                [
                    'question' => 'Để tạo một Angular component với templateUrl và styleUrls, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", templateUrl: "[blank_3]", styleUrls: ["[blank_4]"] })[/code]',
                    'blanks' => 'Component, app-root, app.component.html, app.component.css',
                ],
                [
                    'question' => 'Để định nghĩa một Angular module với nhiều imports và providers, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@NgModule({ imports: [BrowserModule, [blank_2]], providers: [ [blank_3] ] })[/code]',
                    'blanks' => 'NgModule, SharedModule, MyService',
                ],
                [
                    'question' => 'Để khai báo một Angular form với form array và validators, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]this.[blank_2] = this.[blank_3].array([ [blank_4] ]);[/code]',
                    'blanks' => 'formArray, fb, formBuilder, new FormControl("", Validators.required)',
                ],
                [
                    'question' => 'Để sử dụng Angular ngModel trong một component với binding dữ liệu, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<input [(ngModel)]="[blank_2]" />[/code]',
                    'blanks' => 'modelProperty',
                ],
                [
                    'question' => 'Để tạo một Angular service với các phương thức tùy chỉnh và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" }) export class [blank_3] { [blank_4]() { return "Hello World"; } }[/code]',
                    'blanks' => 'providedIn, root, MyService, getMessage',
                ],
                [
                    'question' => 'Để định nghĩa một Angular service với custom logic và thực hiện HTTP GET request, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]@Injectable({ providedIn: "[blank_2]" }) export class [blank_3] { [blank_4]() { return this.[blank_5].get("/api/data"); } }[/code]',
                    'blanks' => 'providedIn, root, MyService, getData, httpClient',
                ],
                [
                    'question' => 'Để sử dụng Angular ngFor để lặp qua danh sách và hiển thị các phần tử, bạn sử dụng cú pháp [blank_1]. Ví dụ: [code]<div *ngFor="let [blank_2] of [blank_3]"> {{ [blank_4] }} </div>[/code]',
                    'blanks' => 'item, items, item.name',
                ],
                [
                    'question' => 'Để tạo một Angular component với các lifecycle hooks và sử dụng cú pháp [blank_1]. Ví dụ: [code]@Component({ selector: "[blank_2]", template: `<p>{{ [blank_3] }}</p>` }) export class [blank_4] implements OnInit { ngOnInit() { [blank_5] } }[/code]',
                    'blanks' => 'Component, app-root, message, AppComponent, console.log("Component initialized")',
                ],
            ];




        $quizs_html0 = Quiz::where('category_id', 1)->where('type', 0)->get();
        $quizs_css0 = Quiz::where('category_id', 2)->where('type', 0)->get();
        $quizs_javascript0 = Quiz::where('category_id', 3)->where('type', 0)->get();
        $quizs_php0 = Quiz::where('category_id', 4)->where('type', 0)->get();
        $quizs_angular0 = Quiz::where('category_id', 5)->where('type', 0)->get();
        $quizs_laravel0 = Quiz::where('category_id', 6)->where('type', 0)->get();
        $quizs_react0 = Quiz::where('category_id', 7)->where('type', 0)->get();


        $quizs_html1 = Quiz::where('category_id', 1)->where('type', 1)->get();
        $quizs_css1 = Quiz::where('category_id', 2)->where('type', 1)->get();
        $quizs_javascript1 = Quiz::where('category_id', 3)->where('type', 1)->get();
        $quizs_php1 = Quiz::where('category_id', 4)->where('type', 1)->get();
        $quizs_angular1 = Quiz::where('category_id', 5)->where('type', 1)->get();
        $quizs_laravel1 = Quiz::where('category_id', 6)->where('type', 1)->get();
        $quizs_react1 = Quiz::where('category_id', 7)->where('type', 1)->get();


        $quizs_html2 = Quiz::where('category_id', 1)->where('type', 2)->get();
        $quizs_css2 = Quiz::where('category_id', 2)->where('type', 2)->get();
        $quizs_javascript2 = Quiz::where('category_id', 3)->where('type', 2)->get();
        $quizs_php2 = Quiz::where('category_id', 4)->where('type', 2)->get();
        $quizs_angular2 = Quiz::where('category_id', 5)->where('type', 2)->get();
        $quizs_laravel2 = Quiz::where('category_id', 6)->where('type', 2)->get();
        $quizs_react2 = Quiz::where('category_id', 7)->where('type', 2)->get();


        $this->renderQuestion($quizs_html0, $questions_html);
        $this->renderQuestion($quizs_css0, $questions_css);
        $this->renderQuestion($quizs_javascript0, $questions_javascript);
        $this->renderQuestion($quizs_php0, $questions_php);
        $this->renderQuestion($quizs_angular0, $questions_angular);
        $this->renderQuestion($quizs_laravel0, $questions_laravel);
        $this->renderQuestion($quizs_react0, $questions_react);


        $this->renderEssay($quizs_html1, $essays_html);
        $this->renderEssay($quizs_css1, $essays_css);
        $this->renderEssay($quizs_javascript1, $essays_javascript);
        $this->renderEssay($quizs_php1, $essays_php);
        $this->renderEssay($quizs_angular1, $essays_angular);
        $this->renderEssay($quizs_laravel1, $essays_laravel);
        $this->renderEssay($quizs_react1, $essays_react);


        $this->renderQuestionAndEssay($quizs_html2, $questions_html, $essays_html);
        $this->renderQuestionAndEssay($quizs_css2, $questions_css, $essays_css);
        $this->renderQuestionAndEssay($quizs_javascript2, $questions_javascript, $essays_javascript);
        $this->renderQuestionAndEssay($quizs_php2, $questions_php, $essays_php);
        $this->renderQuestionAndEssay($quizs_angular2, $questions_angular, $essays_angular);
        $this->renderQuestionAndEssay($quizs_laravel2, $questions_laravel, $essays_laravel);
        $this->renderQuestionAndEssay($quizs_react2, $questions_react, $essays_react);
    }

    function renderQuestion($quizs, $questions)
    {

        // shuffle($questions); // Xáo trộn mảng câu hỏi
        foreach ($quizs as $i => $quiz) {
            for ($j = 0; $j < 10; $j++) {
                $index = $i * 10 + $j;

                if ($index >= count($questions)) break;

                $item = $questions[$index];

                Question::insert([
                    'quiz_id' => $quiz->id,
                    'question' => $item['question'],
                    'option_1' => $item['option_1'],
                    'option_2' => $item['option_2'],
                    'option_3' => $item['option_3'],
                    'option_4' => $item['option_4'],
                    'answer' => $item['answer'],
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            }
        };
    }

    function renderEssay($quizs, $essays)
    {
        // shuffle($essays); // Xáo trộn mảng bài viết
        foreach ($quizs as $i => $quiz) {
            for ($j = 0; $j < 5; $j++) {
                $index = $i * 5 + $j;

                if ($index >= count($essays)) break;

                $item = $essays[$index];

                Essay::insert([
                    'quiz_id' => $quiz->id,
                    'question' => $item['question'],
                    'blanks' => $item['blanks'],
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            }
        };
    }

    function renderQuestionAndEssay($quizs, $questions, $essays)
    {
        // shuffle($questions); // Xáo trộn mảng câu hỏi
        // shuffle($essays); // Xáo trộn mảng bài viết
        foreach ($quizs as $i => $quiz) {
            for ($j = 0; $j < 7; $j++) {
                $index = $i * 7 + $j;

                if ($index >= count($questions)) break;

                $item = $questions[$index];

                Question::insert([
                    'quiz_id' => $quiz->id,
                    'question' => $item['question'],
                    'option_1' => $item['option_1'],
                    'option_2' => $item['option_2'],
                    'option_3' => $item['option_3'],
                    'option_4' => $item['option_4'],
                    'answer' => $item['answer'],
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            }

            for ($j = 0; $j < 3; $j++) {
                $index = $i * 3 + $j;

                if ($index >= count($essays)) break;

                $item = $essays[$index];

                Essay::insert([
                    'quiz_id' => $quiz->id,
                    'question' => $item['question'],
                    'blanks' => $item['blanks'],
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
            }
        };
    }
}
